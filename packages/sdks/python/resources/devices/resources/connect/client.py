# This file was auto-generated by Fern from our API Definition.

import urllib.parse
from json.decoder import JSONDecodeError

import typing_extensions

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.remove_none_from_dict import remove_none_from_dict


class ConnectClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def connect_rpm_provider(
        self, provider: typing_extensions.Literal["tenovi"], *, token: str, device_user_id: str, device_ids: str
    ) -> None:
        """
        Connects the user to remote patient monitoring (RPM) device(s) for the specified provider.

        Parameters:
            - provider: typing_extensions.Literal["tenovi"]. An RPM device provider. Currently, `tenovi` is supported.

            - token: str. The user ID you identify this user with in your app.

            - device_user_id: str. The provider’s user ID for which the RPM device(s) are provisioned.

            - device_ids: str. A comma-separated string of the user’s devices IDs to connect to. For example: `1234-0001,5678-0002`.

        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"connect/rpm/{provider}"),
            params=remove_none_from_dict({"token": token, "deviceUserId": device_user_id, "deviceIds": device_ids}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncConnectClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def connect_rpm_provider(
        self, provider: typing_extensions.Literal["tenovi"], *, token: str, device_user_id: str, device_ids: str
    ) -> None:
        """
        Connects the user to remote patient monitoring (RPM) device(s) for the specified provider.

        Parameters:
            - provider: typing_extensions.Literal["tenovi"]. An RPM device provider. Currently, `tenovi` is supported.

            - token: str. The user ID you identify this user with in your app.

            - device_user_id: str. The provider’s user ID for which the RPM device(s) are provisioned.

            - device_ids: str. A comma-separated string of the user’s devices IDs to connect to. For example: `1234-0001,5678-0002`.

        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"connect/rpm/{provider}"),
            params=remove_none_from_dict({"token": token, "deviceUserId": device_user_id, "deviceIds": device_ids}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
