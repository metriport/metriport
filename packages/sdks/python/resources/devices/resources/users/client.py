# This file was auto-generated by Fern from our API Definition.

import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.remove_none_from_dict import remove_none_from_dict
from .types.connect_token_response import ConnectTokenResponse
from .types.connected_providers_response import ConnectedProvidersResponse
from .types.delete_user_response import DeleteUserResponse
from .types.metriport_user_id_response import MetriportUserIdResponse
from .types.revoke_access_to_provider_response import RevokeAccessToProviderResponse


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_metriport_user_id(self, *, app_user_id: str) -> MetriportUserIdResponse:
        """
        For your specified user ID, returns a Metriport user ID to be used in subsequent requests.

        Parameters:
            - app_user_id: str. The user ID you identify this user with in your app.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "user"),
            params=remove_none_from_dict({"appUserId": app_user_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MetriportUserIdResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_connect_token(self, *, user_id: str) -> ConnectTokenResponse:
        """
        Returns a token to be used in a Metriport Connect session.

        Parameters:
            - user_id: str. The Metriport user ID to create a session token for.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "user/connect/token"),
            params=remove_none_from_dict({"userId": user_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConnectTokenResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_connected_providers(self, user_id: str) -> ConnectedProvidersResponse:
        """
        Returns the specified user's connected providers.

        Parameters:
            - user_id: str. The Metriport user ID to create a session token for.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"user/{user_id}/connected-providers"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConnectedProvidersResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def revoke_access_to_provider(self, user_id: str, *, provider: str) -> RevokeAccessToProviderResponse:
        """
        Revokes the access token for a given provider.

        Parameters:
            - user_id: str. The Metriport user ID to create a session token for.

            - provider: str. The provider you would like to revoke access to.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"user/{user_id}/revoke"),
            params=remove_none_from_dict({"provider": provider}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RevokeAccessToProviderResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, user_id: str) -> DeleteUserResponse:
        """
        Revokes access tokens for all providers and deletes the user.

        Parameters:
            - user_id: str. The Metriport user ID to create a session token for.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"user/{user_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteUserResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_metriport_user_id(self, *, app_user_id: str) -> MetriportUserIdResponse:
        """
        For your specified user ID, returns a Metriport user ID to be used in subsequent requests.

        Parameters:
            - app_user_id: str. The user ID you identify this user with in your app.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "user"),
            params=remove_none_from_dict({"appUserId": app_user_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MetriportUserIdResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_connect_token(self, *, user_id: str) -> ConnectTokenResponse:
        """
        Returns a token to be used in a Metriport Connect session.

        Parameters:
            - user_id: str. The Metriport user ID to create a session token for.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "user/connect/token"),
            params=remove_none_from_dict({"userId": user_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConnectTokenResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_connected_providers(self, user_id: str) -> ConnectedProvidersResponse:
        """
        Returns the specified user's connected providers.

        Parameters:
            - user_id: str. The Metriport user ID to create a session token for.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"user/{user_id}/connected-providers"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConnectedProvidersResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def revoke_access_to_provider(self, user_id: str, *, provider: str) -> RevokeAccessToProviderResponse:
        """
        Revokes the access token for a given provider.

        Parameters:
            - user_id: str. The Metriport user ID to create a session token for.

            - provider: str. The provider you would like to revoke access to.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"user/{user_id}/revoke"),
            params=remove_none_from_dict({"provider": provider}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RevokeAccessToProviderResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, user_id: str) -> DeleteUserResponse:
        """
        Revokes access tokens for all providers and deletes the user.

        Parameters:
            - user_id: str. The Metriport user ID to create a session token for.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"user/{user_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteUserResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
