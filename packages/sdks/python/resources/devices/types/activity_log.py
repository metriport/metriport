# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .activity_durations import ActivityDurations
from .activity_movement import ActivityMovement
from .biometrics import Biometrics
from .energy_expenditure import EnergyExpenditure
from .location import Location
from .metadata import Metadata


class ActivityLog(pydantic.BaseModel):
    metadata: Metadata
    name: typing.Optional[str]
    type: typing.Optional[str]
    start_time: typing.Optional[str]
    end_time: typing.Optional[str]
    durations: typing.Optional[ActivityDurations]
    energy_expenditure: typing.Optional[EnergyExpenditure]
    movement: typing.Optional[ActivityMovement]
    location: typing.Optional[Location]
    biometrics: typing.Optional[Biometrics]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
