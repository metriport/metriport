# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ResourcesSearchableByPatient(str, enum.Enum):
    ACCOUNT = "Account"
    ALLERGY_INTOLERANCE = "AllergyIntolerance"
    APPOINTMENT = "Appointment"
    APPOINTMENT_RESPONSE = "AppointmentResponse"
    AUDIT_EVENT = "AuditEvent"
    BASIC = "Basic"
    BODY_STRUCTURE = "BodyStructure"
    CARE_PLAN = "CarePlan"
    CARE_TEAM = "CareTeam"
    CHARGE_ITEM = "ChargeItem"
    CLAIM = "Claim"
    CLAIM_RESPONSE = "ClaimResponse"
    CLINICAL_IMPRESSION = "ClinicalImpression"
    COMMUNICATION = "Communication"
    COMMUNICATION_REQUEST = "CommunicationRequest"
    COMPOSITION = "Composition"
    CONDITION = "Condition"
    CONSENT = "Consent"
    CONTRACT = "Contract"
    COVERAGE = "Coverage"
    COVERAGE_ELIGIBILITY_REQUEST = "CoverageEligibilityRequest"
    COVERAGE_ELIGIBILITY_RESPONSE = "CoverageEligibilityResponse"
    DETECTED_ISSUE = "DetectedIssue"
    DEVICE = "Device"
    DEVICE_REQUEST = "DeviceRequest"
    DEVICE_USE_STATEMENT = "DeviceUseStatement"
    DIAGNOSTIC_REPORT = "DiagnosticReport"
    DOCUMENT_MANIFEST = "DocumentManifest"
    DOCUMENT_REFERENCE = "DocumentReference"
    ENCOUNTER = "Encounter"
    ENROLLMENT_REQUEST = "EnrollmentRequest"
    EPISODE_OF_CARE = "EpisodeOfCare"
    EXPLANATION_OF_BENEFIT = "ExplanationOfBenefit"
    FAMILY_MEMBER_HISTORY = "FamilyMemberHistory"
    FLAG = "Flag"
    GOAL = "Goal"
    GUIDANCE_RESPONSE = "GuidanceResponse"
    IMAGING_STUDY = "ImagingStudy"
    IMMUNIZATION = "Immunization"
    IMMUNIZATION_EVALUATION = "ImmunizationEvaluation"
    IMMUNIZATION_RECOMMENDATION = "ImmunizationRecommendation"
    INVOICE = "Invoice"
    LIST = "List"
    MEASURE_REPORT = "MeasureReport"
    MEDIA = "Media"
    MEDICATION_ADMINISTRATION = "MedicationAdministration"
    MEDICATION_DISPENSE = "MedicationDispense"
    MEDICATION_REQUEST = "MedicationRequest"
    MEDICATION_STATEMENT = "MedicationStatement"
    MOLECULAR_SEQUENCE = "MolecularSequence"
    NUTRITION_ORDER = "NutritionOrder"
    OBSERVATION = "Observation"
    PERSON = "Person"
    PROCEDURE = "Procedure"
    PROVENANCE = "Provenance"
    QUESTIONNAIRE_RESPONSE = "QuestionnaireResponse"
    RELATED_PERSON = "RelatedPerson"
    REQUEST_GROUP = "RequestGroup"
    RESEARCH_SUBJECT = "ResearchSubject"
    RISK_ASSESSMENT = "RiskAssessment"
    SERVICE_REQUEST = "ServiceRequest"
    SPECIMEN = "Specimen"

    def visit(
        self,
        account: typing.Callable[[], T_Result],
        allergy_intolerance: typing.Callable[[], T_Result],
        appointment: typing.Callable[[], T_Result],
        appointment_response: typing.Callable[[], T_Result],
        audit_event: typing.Callable[[], T_Result],
        basic: typing.Callable[[], T_Result],
        body_structure: typing.Callable[[], T_Result],
        care_plan: typing.Callable[[], T_Result],
        care_team: typing.Callable[[], T_Result],
        charge_item: typing.Callable[[], T_Result],
        claim: typing.Callable[[], T_Result],
        claim_response: typing.Callable[[], T_Result],
        clinical_impression: typing.Callable[[], T_Result],
        communication: typing.Callable[[], T_Result],
        communication_request: typing.Callable[[], T_Result],
        composition: typing.Callable[[], T_Result],
        condition: typing.Callable[[], T_Result],
        consent: typing.Callable[[], T_Result],
        contract: typing.Callable[[], T_Result],
        coverage: typing.Callable[[], T_Result],
        coverage_eligibility_request: typing.Callable[[], T_Result],
        coverage_eligibility_response: typing.Callable[[], T_Result],
        detected_issue: typing.Callable[[], T_Result],
        device: typing.Callable[[], T_Result],
        device_request: typing.Callable[[], T_Result],
        device_use_statement: typing.Callable[[], T_Result],
        diagnostic_report: typing.Callable[[], T_Result],
        document_manifest: typing.Callable[[], T_Result],
        document_reference: typing.Callable[[], T_Result],
        encounter: typing.Callable[[], T_Result],
        enrollment_request: typing.Callable[[], T_Result],
        episode_of_care: typing.Callable[[], T_Result],
        explanation_of_benefit: typing.Callable[[], T_Result],
        family_member_history: typing.Callable[[], T_Result],
        flag: typing.Callable[[], T_Result],
        goal: typing.Callable[[], T_Result],
        guidance_response: typing.Callable[[], T_Result],
        imaging_study: typing.Callable[[], T_Result],
        immunization: typing.Callable[[], T_Result],
        immunization_evaluation: typing.Callable[[], T_Result],
        immunization_recommendation: typing.Callable[[], T_Result],
        invoice: typing.Callable[[], T_Result],
        list: typing.Callable[[], T_Result],
        measure_report: typing.Callable[[], T_Result],
        media: typing.Callable[[], T_Result],
        medication_administration: typing.Callable[[], T_Result],
        medication_dispense: typing.Callable[[], T_Result],
        medication_request: typing.Callable[[], T_Result],
        medication_statement: typing.Callable[[], T_Result],
        molecular_sequence: typing.Callable[[], T_Result],
        nutrition_order: typing.Callable[[], T_Result],
        observation: typing.Callable[[], T_Result],
        person: typing.Callable[[], T_Result],
        procedure: typing.Callable[[], T_Result],
        provenance: typing.Callable[[], T_Result],
        questionnaire_response: typing.Callable[[], T_Result],
        related_person: typing.Callable[[], T_Result],
        request_group: typing.Callable[[], T_Result],
        research_subject: typing.Callable[[], T_Result],
        risk_assessment: typing.Callable[[], T_Result],
        service_request: typing.Callable[[], T_Result],
        specimen: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ResourcesSearchableByPatient.ACCOUNT:
            return account()
        if self is ResourcesSearchableByPatient.ALLERGY_INTOLERANCE:
            return allergy_intolerance()
        if self is ResourcesSearchableByPatient.APPOINTMENT:
            return appointment()
        if self is ResourcesSearchableByPatient.APPOINTMENT_RESPONSE:
            return appointment_response()
        if self is ResourcesSearchableByPatient.AUDIT_EVENT:
            return audit_event()
        if self is ResourcesSearchableByPatient.BASIC:
            return basic()
        if self is ResourcesSearchableByPatient.BODY_STRUCTURE:
            return body_structure()
        if self is ResourcesSearchableByPatient.CARE_PLAN:
            return care_plan()
        if self is ResourcesSearchableByPatient.CARE_TEAM:
            return care_team()
        if self is ResourcesSearchableByPatient.CHARGE_ITEM:
            return charge_item()
        if self is ResourcesSearchableByPatient.CLAIM:
            return claim()
        if self is ResourcesSearchableByPatient.CLAIM_RESPONSE:
            return claim_response()
        if self is ResourcesSearchableByPatient.CLINICAL_IMPRESSION:
            return clinical_impression()
        if self is ResourcesSearchableByPatient.COMMUNICATION:
            return communication()
        if self is ResourcesSearchableByPatient.COMMUNICATION_REQUEST:
            return communication_request()
        if self is ResourcesSearchableByPatient.COMPOSITION:
            return composition()
        if self is ResourcesSearchableByPatient.CONDITION:
            return condition()
        if self is ResourcesSearchableByPatient.CONSENT:
            return consent()
        if self is ResourcesSearchableByPatient.CONTRACT:
            return contract()
        if self is ResourcesSearchableByPatient.COVERAGE:
            return coverage()
        if self is ResourcesSearchableByPatient.COVERAGE_ELIGIBILITY_REQUEST:
            return coverage_eligibility_request()
        if self is ResourcesSearchableByPatient.COVERAGE_ELIGIBILITY_RESPONSE:
            return coverage_eligibility_response()
        if self is ResourcesSearchableByPatient.DETECTED_ISSUE:
            return detected_issue()
        if self is ResourcesSearchableByPatient.DEVICE:
            return device()
        if self is ResourcesSearchableByPatient.DEVICE_REQUEST:
            return device_request()
        if self is ResourcesSearchableByPatient.DEVICE_USE_STATEMENT:
            return device_use_statement()
        if self is ResourcesSearchableByPatient.DIAGNOSTIC_REPORT:
            return diagnostic_report()
        if self is ResourcesSearchableByPatient.DOCUMENT_MANIFEST:
            return document_manifest()
        if self is ResourcesSearchableByPatient.DOCUMENT_REFERENCE:
            return document_reference()
        if self is ResourcesSearchableByPatient.ENCOUNTER:
            return encounter()
        if self is ResourcesSearchableByPatient.ENROLLMENT_REQUEST:
            return enrollment_request()
        if self is ResourcesSearchableByPatient.EPISODE_OF_CARE:
            return episode_of_care()
        if self is ResourcesSearchableByPatient.EXPLANATION_OF_BENEFIT:
            return explanation_of_benefit()
        if self is ResourcesSearchableByPatient.FAMILY_MEMBER_HISTORY:
            return family_member_history()
        if self is ResourcesSearchableByPatient.FLAG:
            return flag()
        if self is ResourcesSearchableByPatient.GOAL:
            return goal()
        if self is ResourcesSearchableByPatient.GUIDANCE_RESPONSE:
            return guidance_response()
        if self is ResourcesSearchableByPatient.IMAGING_STUDY:
            return imaging_study()
        if self is ResourcesSearchableByPatient.IMMUNIZATION:
            return immunization()
        if self is ResourcesSearchableByPatient.IMMUNIZATION_EVALUATION:
            return immunization_evaluation()
        if self is ResourcesSearchableByPatient.IMMUNIZATION_RECOMMENDATION:
            return immunization_recommendation()
        if self is ResourcesSearchableByPatient.INVOICE:
            return invoice()
        if self is ResourcesSearchableByPatient.LIST:
            return list()
        if self is ResourcesSearchableByPatient.MEASURE_REPORT:
            return measure_report()
        if self is ResourcesSearchableByPatient.MEDIA:
            return media()
        if self is ResourcesSearchableByPatient.MEDICATION_ADMINISTRATION:
            return medication_administration()
        if self is ResourcesSearchableByPatient.MEDICATION_DISPENSE:
            return medication_dispense()
        if self is ResourcesSearchableByPatient.MEDICATION_REQUEST:
            return medication_request()
        if self is ResourcesSearchableByPatient.MEDICATION_STATEMENT:
            return medication_statement()
        if self is ResourcesSearchableByPatient.MOLECULAR_SEQUENCE:
            return molecular_sequence()
        if self is ResourcesSearchableByPatient.NUTRITION_ORDER:
            return nutrition_order()
        if self is ResourcesSearchableByPatient.OBSERVATION:
            return observation()
        if self is ResourcesSearchableByPatient.PERSON:
            return person()
        if self is ResourcesSearchableByPatient.PROCEDURE:
            return procedure()
        if self is ResourcesSearchableByPatient.PROVENANCE:
            return provenance()
        if self is ResourcesSearchableByPatient.QUESTIONNAIRE_RESPONSE:
            return questionnaire_response()
        if self is ResourcesSearchableByPatient.RELATED_PERSON:
            return related_person()
        if self is ResourcesSearchableByPatient.REQUEST_GROUP:
            return request_group()
        if self is ResourcesSearchableByPatient.RESEARCH_SUBJECT:
            return research_subject()
        if self is ResourcesSearchableByPatient.RISK_ASSESSMENT:
            return risk_assessment()
        if self is ResourcesSearchableByPatient.SERVICE_REQUEST:
            return service_request()
        if self is ResourcesSearchableByPatient.SPECIMEN:
            return specimen()
