# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ......core.datetime_utils import serialize_datetime
from .codeable_concept import CodeableConcept


class DocumentReference(pydantic.BaseModel):
    id: str = pydantic.Field(description="The Document ID.")
    file_name: str = pydantic.Field(alias="fileName", description="Name of the file.")
    location: str = pydantic.Field(description="URL that can be used to retrieve the Document.")
    description: typing.Optional[str] = pydantic.Field(description="Human-readable description of the Document.")
    status: typing.Optional[str] = pydantic.Field(
        description="Can be one of `current`, `superceded`, or `entered in error`."
    )
    indexed: typing.Optional[dt.datetime] = pydantic.Field(
        description="When this Document reference was created - formatted to ISO 8601."
    )
    mime_type: typing.Optional[str] = pydantic.Field(
        alias="mimeType", description="Document MIME type - usually `application/xml`, or `application/pdf`."
    )
    size: typing.Optional[int] = pydantic.Field(description="Size of the Document in bytes.")
    type: typing.Optional[CodeableConcept] = pydantic.Field(
        description="What kind of document this is (LOINC if possible)."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
