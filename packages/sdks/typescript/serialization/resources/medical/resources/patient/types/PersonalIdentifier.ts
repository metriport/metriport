/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Metriport from "../../../../../../api";
import * as core from "../../../../../../core";

export const PersonalIdentifier: core.serialization.Schema<
    serializers.medical.PersonalIdentifier.Raw,
    Metriport.medical.PersonalIdentifier
> = core.serialization
    .union("type", {
        driversLicense: core.serialization.lazyObject(
            async () => (await import("../../../../..")).medical.DriversLicense
        ),
    })
    .transform<Metriport.medical.PersonalIdentifier>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace PersonalIdentifier {
    type Raw = PersonalIdentifier.DriversLicense;

    interface DriversLicense extends serializers.medical.DriversLicense.Raw {
        type: "driversLicense";
    }
}
