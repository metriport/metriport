/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Metriport from "../../../../api";
import * as core from "../../../../core";

export const Location: core.serialization.ObjectSchema<serializers.devices.Location.Raw, Metriport.devices.Location> =
    core.serialization.object({
        startLatLonDeg: core.serialization.property(
            "start_lat_lon_deg",
            core.serialization.lazyObject(async () => (await import("../../..")).devices.LatLon).optional()
        ),
        endLatLonDeg: core.serialization.property(
            "end_lat_lon_deg",
            core.serialization.lazyObject(async () => (await import("../../..")).devices.LatLon).optional()
        ),
        polystring: core.serialization.string().optional(),
        city: core.serialization.string().optional(),
        country: core.serialization.string().optional(),
        region: core.serialization.string().optional(),
    });

export declare namespace Location {
    interface Raw {
        start_lat_lon_deg?: serializers.devices.LatLon.Raw | null;
        end_lat_lon_deg?: serializers.devices.LatLon.Raw | null;
        polystring?: string | null;
        city?: string | null;
        country?: string | null;
        region?: string | null;
    }
}
