/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Metriport from "../../../../api";
import * as core from "../../../../core";

export const User: core.serialization.ObjectSchema<serializers.devices.User.Raw, Metriport.devices.User> =
    core.serialization
        .object({
            age: core.serialization.number().optional(),
            firstName: core.serialization.property("first_name", core.serialization.string().optional()),
            lastName: core.serialization.property("last_name", core.serialization.string().optional()),
            city: core.serialization.string().optional(),
            country: core.serialization.string().optional(),
            dateOfBirth: core.serialization.property("date_of_birth", core.serialization.string().optional()),
            email: core.serialization.string().optional(),
            region: core.serialization.string().optional(),
            sex: core.serialization.lazy(async () => (await import("../../..")).devices.Sex).optional(),
        })
        .extend(core.serialization.lazyObject(async () => (await import("../../..")).devices.MetriportData));

export declare namespace User {
    interface Raw extends serializers.devices.MetriportData.Raw {
        age?: number | null;
        first_name?: string | null;
        last_name?: string | null;
        city?: string | null;
        country?: string | null;
        date_of_birth?: string | null;
        email?: string | null;
        region?: string | null;
        sex?: serializers.devices.Sex.Raw | null;
    }
}
