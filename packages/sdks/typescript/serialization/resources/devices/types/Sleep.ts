/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Metriport from "../../../../api";
import * as core from "../../../../core";

export const Sleep: core.serialization.ObjectSchema<serializers.devices.Sleep.Raw, Metriport.devices.Sleep> =
    core.serialization
        .object({
            startTime: core.serialization.property("start_time", core.serialization.string().optional()),
            endTime: core.serialization.property("end_time", core.serialization.string().optional()),
            durations: core.serialization
                .lazyObject(async () => (await import("../../..")).devices.SleepDurations)
                .optional(),
            biometrics: core.serialization
                .lazyObject(async () => (await import("../../..")).devices.SleepBiometrics)
                .optional(),
            wakeupFrequency: core.serialization.property("wakeup_frequency", core.serialization.number().optional()),
        })
        .extend(core.serialization.lazyObject(async () => (await import("../../..")).devices.MetriportData));

export declare namespace Sleep {
    interface Raw extends serializers.devices.MetriportData.Raw {
        start_time?: string | null;
        end_time?: string | null;
        durations?: serializers.devices.SleepDurations.Raw | null;
        biometrics?: serializers.devices.SleepBiometrics.Raw | null;
        wakeup_frequency?: number | null;
    }
}
