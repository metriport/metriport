/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.commons.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Address.Builder.class
)
public final class Address {
  private final String addressLine1;

  private final Optional<String> addressLine2;

  private final String city;

  private final UsState state;

  private final String zip;

  private final String country;

  private Address(String addressLine1, Optional<String> addressLine2, String city, UsState state,
      String zip, String country) {
    this.addressLine1 = addressLine1;
    this.addressLine2 = addressLine2;
    this.city = city;
    this.state = state;
    this.zip = zip;
    this.country = country;
  }

  /**
   * @return The address.
   */
  @JsonProperty("addressLine1")
  public String getAddressLine1() {
    return addressLine1;
  }

  /**
   * @return The address details, for example <code>#4451</code>
   */
  @JsonProperty("addressLine2")
  public Optional<String> getAddressLine2() {
    return addressLine2;
  }

  /**
   * @return The city.
   */
  @JsonProperty("city")
  public String getCity() {
    return city;
  }

  /**
   * @return The 2 letter state acronym, for example <code>CA</code>
   */
  @JsonProperty("state")
  public UsState getState() {
    return state;
  }

  /**
   * @return Zip must be a string consisting of 5 numbers.
   */
  @JsonProperty("zip")
  public String getZip() {
    return zip;
  }

  /**
   * @return Defaults to “USA”
   */
  @JsonProperty("country")
  public String getCountry() {
    return country;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Address && equalTo((Address) other);
  }

  private boolean equalTo(Address other) {
    return addressLine1.equals(other.addressLine1) && addressLine2.equals(other.addressLine2) && city.equals(other.city) && state.equals(other.state) && zip.equals(other.zip) && country.equals(other.country);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.addressLine1, this.addressLine2, this.city, this.state, this.zip, this.country);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static AddressLine1Stage builder() {
    return new Builder();
  }

  public interface AddressLine1Stage {
    CityStage addressLine1(String addressLine1);

    Builder from(Address other);
  }

  public interface CityStage {
    StateStage city(String city);
  }

  public interface StateStage {
    ZipStage state(UsState state);
  }

  public interface ZipStage {
    CountryStage zip(String zip);
  }

  public interface CountryStage {
    _FinalStage country(String country);
  }

  public interface _FinalStage {
    Address build();

    _FinalStage addressLine2(Optional<String> addressLine2);

    _FinalStage addressLine2(String addressLine2);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements AddressLine1Stage, CityStage, StateStage, ZipStage, CountryStage, _FinalStage {
    private String addressLine1;

    private String city;

    private UsState state;

    private String zip;

    private String country;

    private Optional<String> addressLine2 = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(Address other) {
      addressLine1(other.getAddressLine1());
      addressLine2(other.getAddressLine2());
      city(other.getCity());
      state(other.getState());
      zip(other.getZip());
      country(other.getCountry());
      return this;
    }

    /**
     * <p>The address.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("addressLine1")
    public CityStage addressLine1(String addressLine1) {
      this.addressLine1 = addressLine1;
      return this;
    }

    /**
     * <p>The city.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("city")
    public StateStage city(String city) {
      this.city = city;
      return this;
    }

    /**
     * <p>The 2 letter state acronym, for example <code>CA</code></p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("state")
    public ZipStage state(UsState state) {
      this.state = state;
      return this;
    }

    /**
     * <p>Zip must be a string consisting of 5 numbers.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("zip")
    public CountryStage zip(String zip) {
      this.zip = zip;
      return this;
    }

    /**
     * <p>Defaults to “USA”</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("country")
    public _FinalStage country(String country) {
      this.country = country;
      return this;
    }

    /**
     * <p>The address details, for example <code>#4451</code></p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage addressLine2(String addressLine2) {
      this.addressLine2 = Optional.of(addressLine2);
      return this;
    }

    @Override
    @JsonSetter(
        value = "addressLine2",
        nulls = Nulls.SKIP
    )
    public _FinalStage addressLine2(Optional<String> addressLine2) {
      this.addressLine2 = addressLine2;
      return this;
    }

    @Override
    public Address build() {
      return new Address(addressLine1, addressLine2, city, state, zip, country);
    }
  }
}
