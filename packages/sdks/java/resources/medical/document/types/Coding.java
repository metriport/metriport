/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.document.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Coding.Builder.class
)
public final class Coding {
  private final Optional<String> system;

  private final Optional<String> code;

  private final Optional<String> display;

  private Coding(Optional<String> system, Optional<String> code, Optional<String> display) {
    this.system = system;
    this.code = code;
    this.display = display;
  }

  /**
   * @return Identity of the terminology system.
   */
  @JsonProperty("system")
  public Optional<String> getSystem() {
    return system;
  }

  /**
   * @return Symbol in syntax defined by the system.
   */
  @JsonProperty("code")
  public Optional<String> getCode() {
    return code;
  }

  /**
   * @return Representation defined by the system.
   */
  @JsonProperty("display")
  public Optional<String> getDisplay() {
    return display;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Coding && equalTo((Coding) other);
  }

  private boolean equalTo(Coding other) {
    return system.equals(other.system) && code.equals(other.code) && display.equals(other.display);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.system, this.code, this.display);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> system = Optional.empty();

    private Optional<String> code = Optional.empty();

    private Optional<String> display = Optional.empty();

    private Builder() {
    }

    public Builder from(Coding other) {
      system(other.getSystem());
      code(other.getCode());
      display(other.getDisplay());
      return this;
    }

    @JsonSetter(
        value = "system",
        nulls = Nulls.SKIP
    )
    public Builder system(Optional<String> system) {
      this.system = system;
      return this;
    }

    public Builder system(String system) {
      this.system = Optional.of(system);
      return this;
    }

    @JsonSetter(
        value = "code",
        nulls = Nulls.SKIP
    )
    public Builder code(Optional<String> code) {
      this.code = code;
      return this;
    }

    public Builder code(String code) {
      this.code = Optional.of(code);
      return this;
    }

    @JsonSetter(
        value = "display",
        nulls = Nulls.SKIP
    )
    public Builder display(Optional<String> display) {
      this.display = display;
      return this;
    }

    public Builder display(String display) {
      this.display = Optional.of(display);
      return this;
    }

    public Coding build() {
      return new Coding(system, code, display);
    }
  }
}
