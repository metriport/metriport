/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.document.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = DocumentReference.Builder.class
)
public final class DocumentReference {
  private final String id;

  private final String fileName;

  private final String location;

  private final Optional<String> description;

  private final Optional<String> status;

  private final Optional<OffsetDateTime> indexed;

  private final Optional<String> mimeType;

  private final Optional<Integer> size;

  private final Optional<CodeableConcept> type;

  private DocumentReference(String id, String fileName, String location,
      Optional<String> description, Optional<String> status, Optional<OffsetDateTime> indexed,
      Optional<String> mimeType, Optional<Integer> size, Optional<CodeableConcept> type) {
    this.id = id;
    this.fileName = fileName;
    this.location = location;
    this.description = description;
    this.status = status;
    this.indexed = indexed;
    this.mimeType = mimeType;
    this.size = size;
    this.type = type;
  }

  /**
   * @return The Document ID.
   */
  @JsonProperty("id")
  public String getId() {
    return id;
  }

  /**
   * @return Name of the file.
   */
  @JsonProperty("fileName")
  public String getFileName() {
    return fileName;
  }

  /**
   * @return URL that can be used to retrieve the Document.
   */
  @JsonProperty("location")
  public String getLocation() {
    return location;
  }

  /**
   * @return Human-readable description of the Document.
   */
  @JsonProperty("description")
  public Optional<String> getDescription() {
    return description;
  }

  /**
   * @return Can be one of <code>current</code>, <code>superceded</code>, or <code>entered in error</code>.
   */
  @JsonProperty("status")
  public Optional<String> getStatus() {
    return status;
  }

  /**
   * @return When this Document reference was created - formatted to ISO 8601.
   */
  @JsonProperty("indexed")
  public Optional<OffsetDateTime> getIndexed() {
    return indexed;
  }

  /**
   * @return Document MIME type - usually <code>application/xml</code>, or <code>application/pdf</code>.
   */
  @JsonProperty("mimeType")
  public Optional<String> getMimeType() {
    return mimeType;
  }

  /**
   * @return Size of the Document in bytes.
   */
  @JsonProperty("size")
  public Optional<Integer> getSize() {
    return size;
  }

  /**
   * @return What kind of document this is (LOINC if possible).
   */
  @JsonProperty("type")
  public Optional<CodeableConcept> getType() {
    return type;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof DocumentReference && equalTo((DocumentReference) other);
  }

  private boolean equalTo(DocumentReference other) {
    return id.equals(other.id) && fileName.equals(other.fileName) && location.equals(other.location) && description.equals(other.description) && status.equals(other.status) && indexed.equals(other.indexed) && mimeType.equals(other.mimeType) && size.equals(other.size) && type.equals(other.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.fileName, this.location, this.description, this.status, this.indexed, this.mimeType, this.size, this.type);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    FileNameStage id(String id);

    Builder from(DocumentReference other);
  }

  public interface FileNameStage {
    LocationStage fileName(String fileName);
  }

  public interface LocationStage {
    _FinalStage location(String location);
  }

  public interface _FinalStage {
    DocumentReference build();

    _FinalStage description(Optional<String> description);

    _FinalStage description(String description);

    _FinalStage status(Optional<String> status);

    _FinalStage status(String status);

    _FinalStage indexed(Optional<OffsetDateTime> indexed);

    _FinalStage indexed(OffsetDateTime indexed);

    _FinalStage mimeType(Optional<String> mimeType);

    _FinalStage mimeType(String mimeType);

    _FinalStage size(Optional<Integer> size);

    _FinalStage size(Integer size);

    _FinalStage type(Optional<CodeableConcept> type);

    _FinalStage type(CodeableConcept type);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, FileNameStage, LocationStage, _FinalStage {
    private String id;

    private String fileName;

    private String location;

    private Optional<CodeableConcept> type = Optional.empty();

    private Optional<Integer> size = Optional.empty();

    private Optional<String> mimeType = Optional.empty();

    private Optional<OffsetDateTime> indexed = Optional.empty();

    private Optional<String> status = Optional.empty();

    private Optional<String> description = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(DocumentReference other) {
      id(other.getId());
      fileName(other.getFileName());
      location(other.getLocation());
      description(other.getDescription());
      status(other.getStatus());
      indexed(other.getIndexed());
      mimeType(other.getMimeType());
      size(other.getSize());
      type(other.getType());
      return this;
    }

    /**
     * <p>The Document ID.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("id")
    public FileNameStage id(String id) {
      this.id = id;
      return this;
    }

    /**
     * <p>Name of the file.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("fileName")
    public LocationStage fileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    /**
     * <p>URL that can be used to retrieve the Document.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("location")
    public _FinalStage location(String location) {
      this.location = location;
      return this;
    }

    /**
     * <p>What kind of document this is (LOINC if possible).</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage type(CodeableConcept type) {
      this.type = Optional.of(type);
      return this;
    }

    @Override
    @JsonSetter(
        value = "type",
        nulls = Nulls.SKIP
    )
    public _FinalStage type(Optional<CodeableConcept> type) {
      this.type = type;
      return this;
    }

    /**
     * <p>Size of the Document in bytes.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage size(Integer size) {
      this.size = Optional.of(size);
      return this;
    }

    @Override
    @JsonSetter(
        value = "size",
        nulls = Nulls.SKIP
    )
    public _FinalStage size(Optional<Integer> size) {
      this.size = size;
      return this;
    }

    /**
     * <p>Document MIME type - usually <code>application/xml</code>, or <code>application/pdf</code>.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage mimeType(String mimeType) {
      this.mimeType = Optional.of(mimeType);
      return this;
    }

    @Override
    @JsonSetter(
        value = "mimeType",
        nulls = Nulls.SKIP
    )
    public _FinalStage mimeType(Optional<String> mimeType) {
      this.mimeType = mimeType;
      return this;
    }

    /**
     * <p>When this Document reference was created - formatted to ISO 8601.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage indexed(OffsetDateTime indexed) {
      this.indexed = Optional.of(indexed);
      return this;
    }

    @Override
    @JsonSetter(
        value = "indexed",
        nulls = Nulls.SKIP
    )
    public _FinalStage indexed(Optional<OffsetDateTime> indexed) {
      this.indexed = indexed;
      return this;
    }

    /**
     * <p>Can be one of <code>current</code>, <code>superceded</code>, or <code>entered in error</code>.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage status(String status) {
      this.status = Optional.of(status);
      return this;
    }

    @Override
    @JsonSetter(
        value = "status",
        nulls = Nulls.SKIP
    )
    public _FinalStage status(Optional<String> status) {
      this.status = status;
      return this;
    }

    /**
     * <p>Human-readable description of the Document.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage description(String description) {
      this.description = Optional.of(description);
      return this;
    }

    @Override
    @JsonSetter(
        value = "description",
        nulls = Nulls.SKIP
    )
    public _FinalStage description(Optional<String> description) {
      this.description = description;
      return this;
    }

    @Override
    public DocumentReference build() {
      return new DocumentReference(id, fileName, location, description, status, indexed, mimeType, size, type);
    }
  }
}
