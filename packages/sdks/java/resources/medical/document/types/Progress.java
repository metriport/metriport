/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.document.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Progress.Builder.class
)
public final class Progress {
  private final DocumentQueryStatus status;

  private final Optional<Integer> total;

  private final Optional<Integer> successful;

  private final Optional<Integer> errors;

  private Progress(DocumentQueryStatus status, Optional<Integer> total,
      Optional<Integer> successful, Optional<Integer> errors) {
    this.status = status;
    this.total = total;
    this.successful = successful;
    this.errors = errors;
  }

  /**
   * @return The status of querying document references across HIEs.
   */
  @JsonProperty("status")
  public DocumentQueryStatus getStatus() {
    return status;
  }

  /**
   * @return The total number of documents to be queried.
   */
  @JsonProperty("total")
  public Optional<Integer> getTotal() {
    return total;
  }

  /**
   * @return The number of documents successfully downloaded.
   */
  @JsonProperty("successful")
  public Optional<Integer> getSuccessful() {
    return successful;
  }

  /**
   * @return The number of documents that failed to download.
   */
  @JsonProperty("errors")
  public Optional<Integer> getErrors() {
    return errors;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Progress && equalTo((Progress) other);
  }

  private boolean equalTo(Progress other) {
    return status.equals(other.status) && total.equals(other.total) && successful.equals(other.successful) && errors.equals(other.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.status, this.total, this.successful, this.errors);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static StatusStage builder() {
    return new Builder();
  }

  public interface StatusStage {
    _FinalStage status(DocumentQueryStatus status);

    Builder from(Progress other);
  }

  public interface _FinalStage {
    Progress build();

    _FinalStage total(Optional<Integer> total);

    _FinalStage total(Integer total);

    _FinalStage successful(Optional<Integer> successful);

    _FinalStage successful(Integer successful);

    _FinalStage errors(Optional<Integer> errors);

    _FinalStage errors(Integer errors);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements StatusStage, _FinalStage {
    private DocumentQueryStatus status;

    private Optional<Integer> errors = Optional.empty();

    private Optional<Integer> successful = Optional.empty();

    private Optional<Integer> total = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(Progress other) {
      status(other.getStatus());
      total(other.getTotal());
      successful(other.getSuccessful());
      errors(other.getErrors());
      return this;
    }

    /**
     * <p>The status of querying document references across HIEs.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("status")
    public _FinalStage status(DocumentQueryStatus status) {
      this.status = status;
      return this;
    }

    /**
     * <p>The number of documents that failed to download.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage errors(Integer errors) {
      this.errors = Optional.of(errors);
      return this;
    }

    @Override
    @JsonSetter(
        value = "errors",
        nulls = Nulls.SKIP
    )
    public _FinalStage errors(Optional<Integer> errors) {
      this.errors = errors;
      return this;
    }

    /**
     * <p>The number of documents successfully downloaded.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage successful(Integer successful) {
      this.successful = Optional.of(successful);
      return this;
    }

    @Override
    @JsonSetter(
        value = "successful",
        nulls = Nulls.SKIP
    )
    public _FinalStage successful(Optional<Integer> successful) {
      this.successful = successful;
      return this;
    }

    /**
     * <p>The total number of documents to be queried.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage total(Integer total) {
      this.total = Optional.of(total);
      return this;
    }

    @Override
    @JsonSetter(
        value = "total",
        nulls = Nulls.SKIP
    )
    public _FinalStage total(Optional<Integer> total) {
      this.total = total;
      return this;
    }

    @Override
    public Progress build() {
      return new Progress(status, total, successful, errors);
    }
  }
}
