/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.document.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = DocumentUrl.Builder.class
)
public final class DocumentUrl {
  private final Optional<String> url;

  private DocumentUrl(Optional<String> url) {
    this.url = url;
  }

  /**
   * @return The presigned URL.
   */
  @JsonProperty("url")
  public Optional<String> getUrl() {
    return url;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof DocumentUrl && equalTo((DocumentUrl) other);
  }

  private boolean equalTo(DocumentUrl other) {
    return url.equals(other.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.url);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> url = Optional.empty();

    private Builder() {
    }

    public Builder from(DocumentUrl other) {
      url(other.getUrl());
      return this;
    }

    @JsonSetter(
        value = "url",
        nulls = Nulls.SKIP
    )
    public Builder url(Optional<String> url) {
      this.url = url;
      return this;
    }

    public Builder url(String url) {
      this.url = Optional.of(url);
      return this;
    }

    public DocumentUrl build() {
      return new DocumentUrl(url);
    }
  }
}
