/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.facility.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import resources.commons.types.Address;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = BaseFacility.Builder.class
)
public final class BaseFacility implements IBaseFacility {
  private final String name;

  private final String npi;

  private final Optional<String> tin;

  private final Optional<Boolean> active;

  private final Address address;

  private BaseFacility(String name, String npi, Optional<String> tin, Optional<Boolean> active,
      Address address) {
    this.name = name;
    this.npi = npi;
    this.tin = tin;
    this.active = active;
    this.address = address;
  }

  /**
   * @return The name of your Facility. This is the actual address where a patient will receive care (can be virtual) - for example <code>Care Facility, LLC</code>.
   */
  @JsonProperty("name")
  @Override
  public String getName() {
    return name;
  }

  /**
   * @return The 10 digit National Provider Identifier (NPI) that will be used to make requests on behalf of the Facility.
   */
  @JsonProperty("npi")
  @Override
  public String getNpi() {
    return npi;
  }

  /**
   * @return The Taxpayer Identification Number (TIN) of the Facility.
   */
  @JsonProperty("tin")
  @Override
  public Optional<String> getTin() {
    return tin;
  }

  /**
   * @return Whether or not this Facility is currently active - this is usually <code>true</code>.
   */
  @JsonProperty("active")
  @Override
  public Optional<Boolean> getActive() {
    return active;
  }

  @JsonProperty("address")
  @Override
  public Address getAddress() {
    return address;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BaseFacility && equalTo((BaseFacility) other);
  }

  private boolean equalTo(BaseFacility other) {
    return name.equals(other.name) && npi.equals(other.npi) && tin.equals(other.tin) && active.equals(other.active) && address.equals(other.address);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.name, this.npi, this.tin, this.active, this.address);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static NameStage builder() {
    return new Builder();
  }

  public interface NameStage {
    NpiStage name(String name);

    Builder from(BaseFacility other);
  }

  public interface NpiStage {
    AddressStage npi(String npi);
  }

  public interface AddressStage {
    _FinalStage address(Address address);
  }

  public interface _FinalStage {
    BaseFacility build();

    _FinalStage tin(Optional<String> tin);

    _FinalStage tin(String tin);

    _FinalStage active(Optional<Boolean> active);

    _FinalStage active(Boolean active);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements NameStage, NpiStage, AddressStage, _FinalStage {
    private String name;

    private String npi;

    private Address address;

    private Optional<Boolean> active = Optional.empty();

    private Optional<String> tin = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(BaseFacility other) {
      name(other.getName());
      npi(other.getNpi());
      tin(other.getTin());
      active(other.getActive());
      address(other.getAddress());
      return this;
    }

    /**
     * <p>The name of your Facility. This is the actual address where a patient will receive care (can be virtual) - for example <code>Care Facility, LLC</code>.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("name")
    public NpiStage name(String name) {
      this.name = name;
      return this;
    }

    /**
     * <p>The 10 digit National Provider Identifier (NPI) that will be used to make requests on behalf of the Facility.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("npi")
    public AddressStage npi(String npi) {
      this.npi = npi;
      return this;
    }

    @Override
    @JsonSetter("address")
    public _FinalStage address(Address address) {
      this.address = address;
      return this;
    }

    /**
     * <p>Whether or not this Facility is currently active - this is usually <code>true</code>.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage active(Boolean active) {
      this.active = Optional.of(active);
      return this;
    }

    @Override
    @JsonSetter(
        value = "active",
        nulls = Nulls.SKIP
    )
    public _FinalStage active(Optional<Boolean> active) {
      this.active = active;
      return this;
    }

    /**
     * <p>The Taxpayer Identification Number (TIN) of the Facility.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage tin(String tin) {
      this.tin = Optional.of(tin);
      return this;
    }

    @Override
    @JsonSetter(
        value = "tin",
        nulls = Nulls.SKIP
    )
    public _FinalStage tin(Optional<String> tin) {
      this.tin = tin;
      return this;
    }

    @Override
    public BaseFacility build() {
      return new BaseFacility(name, npi, tin, active, address);
    }
  }
}
