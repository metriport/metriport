/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.organization;

import core.ApiError;
import core.ClientOptions;
import core.ObjectMappers;
import core.RequestOptions;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import resources.medical.organization.requests.OrganizationUpdateRequest;
import resources.medical.organization.types.Organization;
import resources.medical.organization.types.OrganizationCreate;

public class OrganizationClient {
  protected final ClientOptions clientOptions;

  public OrganizationClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Registers your Organization in Metriport.
   */
  public Organization create(OrganizationCreate request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("medical/v1/organization")

      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Organization.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * Registers your Organization in Metriport.
   */
  public Organization create(OrganizationCreate request) {
    return create(request,null);
  }

  /**
   * Gets the Organization representing your legal corporate entity.
   */
  public Organization get(RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("medical/v1/organization")

      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Organization.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * Gets the Organization representing your legal corporate entity.
   */
  public Organization get() {
    return get(null);
  }

  /**
   * Updates your Organization's details.
   */
  public Organization update(String id, OrganizationUpdateRequest request,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("medical/v1/organization")

      .addPathSegment(id)
      .build();
    Map<String, Object> properties = new HashMap<>();
    properties.put("name", request.getName());
    properties.put("type", request.getType());
    properties.put("location", request.getLocation());
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaType.parse("application/json"));
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder = new Request.Builder()
      .url(httpUrl)
      .method("PUT", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json");
    if (request.getETag().isPresent()) {
      _requestBuilder.addHeader("ETag", request.getETag().get());
    }
    Request okhttpRequest = _requestBuilder.build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Organization.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * Updates your Organization's details.
   */
  public Organization update(String id, OrganizationUpdateRequest request) {
    return update(id,request,null);
  }
}
