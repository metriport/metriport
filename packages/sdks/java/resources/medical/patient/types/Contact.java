/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.patient.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Contact.Builder.class
)
public final class Contact {
  private final Optional<String> phone;

  private final Optional<String> email;

  private final List<String> facilityIds;

  private Contact(Optional<String> phone, Optional<String> email, List<String> facilityIds) {
    this.phone = phone;
    this.email = email;
    this.facilityIds = facilityIds;
  }

  /**
   * @return The Patient's 10 digit phone number, formatted <code>1234567899</code>.
   */
  @JsonProperty("phone")
  public Optional<String> getPhone() {
    return phone;
  }

  /**
   * @return The Patient's email address.
   */
  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  /**
   * @return Array of the IDs of the Facilities where the Patient is receiving care.
   */
  @JsonProperty("facilityIds")
  public List<String> getFacilityIds() {
    return facilityIds;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Contact && equalTo((Contact) other);
  }

  private boolean equalTo(Contact other) {
    return phone.equals(other.phone) && email.equals(other.email) && facilityIds.equals(other.facilityIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.phone, this.email, this.facilityIds);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> phone = Optional.empty();

    private Optional<String> email = Optional.empty();

    private List<String> facilityIds = new ArrayList<>();

    private Builder() {
    }

    public Builder from(Contact other) {
      phone(other.getPhone());
      email(other.getEmail());
      facilityIds(other.getFacilityIds());
      return this;
    }

    @JsonSetter(
        value = "phone",
        nulls = Nulls.SKIP
    )
    public Builder phone(Optional<String> phone) {
      this.phone = phone;
      return this;
    }

    public Builder phone(String phone) {
      this.phone = Optional.of(phone);
      return this;
    }

    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public Builder email(Optional<String> email) {
      this.email = email;
      return this;
    }

    public Builder email(String email) {
      this.email = Optional.of(email);
      return this;
    }

    @JsonSetter(
        value = "facilityIds",
        nulls = Nulls.SKIP
    )
    public Builder facilityIds(List<String> facilityIds) {
      this.facilityIds.clear();
      this.facilityIds.addAll(facilityIds);
      return this;
    }

    public Builder addFacilityIds(String facilityIds) {
      this.facilityIds.add(facilityIds);
      return this;
    }

    public Builder addAllFacilityIds(List<String> facilityIds) {
      this.facilityIds.addAll(facilityIds);
      return this;
    }

    public Contact build() {
      return new Contact(phone, email, facilityIds);
    }
  }
}
