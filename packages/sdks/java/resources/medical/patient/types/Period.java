/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.patient.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Period.Builder.class
)
public final class Period {
  private final Optional<String> start;

  private final Optional<String> end;

  private Period(Optional<String> start, Optional<String> end) {
    this.start = start;
    this.end = end;
  }

  @JsonProperty("start")
  public Optional<String> getStart() {
    return start;
  }

  @JsonProperty("end")
  public Optional<String> getEnd() {
    return end;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Period && equalTo((Period) other);
  }

  private boolean equalTo(Period other) {
    return start.equals(other.start) && end.equals(other.end);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.start, this.end);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> start = Optional.empty();

    private Optional<String> end = Optional.empty();

    private Builder() {
    }

    public Builder from(Period other) {
      start(other.getStart());
      end(other.getEnd());
      return this;
    }

    @JsonSetter(
        value = "start",
        nulls = Nulls.SKIP
    )
    public Builder start(Optional<String> start) {
      this.start = start;
      return this;
    }

    public Builder start(String start) {
      this.start = Optional.of(start);
      return this;
    }

    @JsonSetter(
        value = "end",
        nulls = Nulls.SKIP
    )
    public Builder end(Optional<String> end) {
      this.end = end;
      return this;
    }

    public Builder end(String end) {
      this.end = Optional.of(end);
      return this;
    }

    public Period build() {
      return new Period(start, end);
    }
  }
}
