/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.patient.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import resources.commons.types.UsState;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = DriversLicense.Builder.class
)
public final class DriversLicense {
  private final UsState state;

  private final String value;

  private final Optional<String> assigner;

  private final Optional<Period> period;

  private DriversLicense(UsState state, String value, Optional<String> assigner,
      Optional<Period> period) {
    this.state = state;
    this.value = value;
    this.assigner = assigner;
    this.period = period;
  }

  /**
   * @return The 2 letter state acronym where this ID was issued, for example <code>CA</code>.
   */
  @JsonProperty("state")
  public UsState getState() {
    return state;
  }

  /**
   * @return The ID number.
   */
  @JsonProperty("value")
  public String getValue() {
    return value;
  }

  @JsonProperty("assigner")
  public Optional<String> getAssigner() {
    return assigner;
  }

  @JsonProperty("period")
  public Optional<Period> getPeriod() {
    return period;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof DriversLicense && equalTo((DriversLicense) other);
  }

  private boolean equalTo(DriversLicense other) {
    return state.equals(other.state) && value.equals(other.value) && assigner.equals(other.assigner) && period.equals(other.period);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.state, this.value, this.assigner, this.period);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static StateStage builder() {
    return new Builder();
  }

  public interface StateStage {
    ValueStage state(UsState state);

    Builder from(DriversLicense other);
  }

  public interface ValueStage {
    _FinalStage value(String value);
  }

  public interface _FinalStage {
    DriversLicense build();

    _FinalStage assigner(Optional<String> assigner);

    _FinalStage assigner(String assigner);

    _FinalStage period(Optional<Period> period);

    _FinalStage period(Period period);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements StateStage, ValueStage, _FinalStage {
    private UsState state;

    private String value;

    private Optional<Period> period = Optional.empty();

    private Optional<String> assigner = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(DriversLicense other) {
      state(other.getState());
      value(other.getValue());
      assigner(other.getAssigner());
      period(other.getPeriod());
      return this;
    }

    /**
     * <p>The 2 letter state acronym where this ID was issued, for example <code>CA</code>.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("state")
    public ValueStage state(UsState state) {
      this.state = state;
      return this;
    }

    /**
     * <p>The ID number.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("value")
    public _FinalStage value(String value) {
      this.value = value;
      return this;
    }

    @Override
    public _FinalStage period(Period period) {
      this.period = Optional.of(period);
      return this;
    }

    @Override
    @JsonSetter(
        value = "period",
        nulls = Nulls.SKIP
    )
    public _FinalStage period(Optional<Period> period) {
      this.period = period;
      return this;
    }

    @Override
    public _FinalStage assigner(String assigner) {
      this.assigner = Optional.of(assigner);
      return this;
    }

    @Override
    @JsonSetter(
        value = "assigner",
        nulls = Nulls.SKIP
    )
    public _FinalStage assigner(Optional<String> assigner) {
      this.assigner = assigner;
      return this;
    }

    @Override
    public DriversLicense build() {
      return new DriversLicense(state, value, assigner, period);
    }
  }
}
