/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.patient.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = BasePatient.Builder.class
)
public final class BasePatient implements IBasePatient {
  private final String firstName;

  private final String lastName;

  private final String dob;

  private final String genderAtBirth;

  private final Optional<List<PersonalIdentifier>> personalIdentifiers;

  private final Optional<Addresses> address;

  private final Optional<Contacts> contact;

  private BasePatient(String firstName, String lastName, String dob, String genderAtBirth,
      Optional<List<PersonalIdentifier>> personalIdentifiers, Optional<Addresses> address,
      Optional<Contacts> contact) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.dob = dob;
    this.genderAtBirth = genderAtBirth;
    this.personalIdentifiers = personalIdentifiers;
    this.address = address;
    this.contact = contact;
  }

  /**
   * @return The Patient's first name(s).
   * You may provide a comma/space delimited string to specify
   * multiple first and last names. For example, the following inputs
   * would be equivalent: &quot;John,Jonathan&quot; &amp; &quot;John Jonathan&quot;
   */
  @JsonProperty("firstName")
  @Override
  public String getFirstName() {
    return firstName;
  }

  /**
   * @return The Patient's last name(s).
   */
  @JsonProperty("lastName")
  @Override
  public String getLastName() {
    return lastName;
  }

  /**
   * @return The Patient's date of birth (DOB), formatted <code>YYYY-MM-DD</code> as per ISO 8601.
   */
  @JsonProperty("dob")
  @Override
  public String getDob() {
    return dob;
  }

  /**
   * @return The Patient's gender at birth, can be one of <code>M</code> or <code>F</code>.
   */
  @JsonProperty("genderAtBirth")
  @Override
  public String getGenderAtBirth() {
    return genderAtBirth;
  }

  /**
   * @return An array of the Patient's personal IDs, such as a driver's license.
   * May be empty.
   */
  @JsonProperty("personalIdentifiers")
  @Override
  public Optional<List<PersonalIdentifier>> getPersonalIdentifiers() {
    return personalIdentifiers;
  }

  @JsonProperty("address")
  @Override
  public Optional<Addresses> getAddress() {
    return address;
  }

  @JsonProperty("contact")
  @Override
  public Optional<Contacts> getContact() {
    return contact;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BasePatient && equalTo((BasePatient) other);
  }

  private boolean equalTo(BasePatient other) {
    return firstName.equals(other.firstName) && lastName.equals(other.lastName) && dob.equals(other.dob) && genderAtBirth.equals(other.genderAtBirth) && personalIdentifiers.equals(other.personalIdentifiers) && address.equals(other.address) && contact.equals(other.contact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.firstName, this.lastName, this.dob, this.genderAtBirth, this.personalIdentifiers, this.address, this.contact);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static FirstNameStage builder() {
    return new Builder();
  }

  public interface FirstNameStage {
    LastNameStage firstName(String firstName);

    Builder from(BasePatient other);
  }

  public interface LastNameStage {
    DobStage lastName(String lastName);
  }

  public interface DobStage {
    GenderAtBirthStage dob(String dob);
  }

  public interface GenderAtBirthStage {
    _FinalStage genderAtBirth(String genderAtBirth);
  }

  public interface _FinalStage {
    BasePatient build();

    _FinalStage personalIdentifiers(Optional<List<PersonalIdentifier>> personalIdentifiers);

    _FinalStage personalIdentifiers(List<PersonalIdentifier> personalIdentifiers);

    _FinalStage address(Optional<Addresses> address);

    _FinalStage address(Addresses address);

    _FinalStage contact(Optional<Contacts> contact);

    _FinalStage contact(Contacts contact);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements FirstNameStage, LastNameStage, DobStage, GenderAtBirthStage, _FinalStage {
    private String firstName;

    private String lastName;

    private String dob;

    private String genderAtBirth;

    private Optional<Contacts> contact = Optional.empty();

    private Optional<Addresses> address = Optional.empty();

    private Optional<List<PersonalIdentifier>> personalIdentifiers = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(BasePatient other) {
      firstName(other.getFirstName());
      lastName(other.getLastName());
      dob(other.getDob());
      genderAtBirth(other.getGenderAtBirth());
      personalIdentifiers(other.getPersonalIdentifiers());
      address(other.getAddress());
      contact(other.getContact());
      return this;
    }

    /**
     * <p>The Patient's first name(s).
     * You may provide a comma/space delimited string to specify
     * multiple first and last names. For example, the following inputs
     * would be equivalent: &quot;John,Jonathan&quot; &amp; &quot;John Jonathan&quot;</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("firstName")
    public LastNameStage firstName(String firstName) {
      this.firstName = firstName;
      return this;
    }

    /**
     * <p>The Patient's last name(s).</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("lastName")
    public DobStage lastName(String lastName) {
      this.lastName = lastName;
      return this;
    }

    /**
     * <p>The Patient's date of birth (DOB), formatted <code>YYYY-MM-DD</code> as per ISO 8601.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("dob")
    public GenderAtBirthStage dob(String dob) {
      this.dob = dob;
      return this;
    }

    /**
     * <p>The Patient's gender at birth, can be one of <code>M</code> or <code>F</code>.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("genderAtBirth")
    public _FinalStage genderAtBirth(String genderAtBirth) {
      this.genderAtBirth = genderAtBirth;
      return this;
    }

    @Override
    public _FinalStage contact(Contacts contact) {
      this.contact = Optional.of(contact);
      return this;
    }

    @Override
    @JsonSetter(
        value = "contact",
        nulls = Nulls.SKIP
    )
    public _FinalStage contact(Optional<Contacts> contact) {
      this.contact = contact;
      return this;
    }

    @Override
    public _FinalStage address(Addresses address) {
      this.address = Optional.of(address);
      return this;
    }

    @Override
    @JsonSetter(
        value = "address",
        nulls = Nulls.SKIP
    )
    public _FinalStage address(Optional<Addresses> address) {
      this.address = address;
      return this;
    }

    /**
     * <p>An array of the Patient's personal IDs, such as a driver's license.
     * May be empty.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage personalIdentifiers(List<PersonalIdentifier> personalIdentifiers) {
      this.personalIdentifiers = Optional.of(personalIdentifiers);
      return this;
    }

    @Override
    @JsonSetter(
        value = "personalIdentifiers",
        nulls = Nulls.SKIP
    )
    public _FinalStage personalIdentifiers(Optional<List<PersonalIdentifier>> personalIdentifiers) {
      this.personalIdentifiers = personalIdentifiers;
      return this;
    }

    @Override
    public BasePatient build() {
      return new BasePatient(firstName, lastName, dob, genderAtBirth, personalIdentifiers, address, contact);
    }
  }
}
