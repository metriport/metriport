/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.patient.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = PatientList.Builder.class
)
public final class PatientList {
  private final Optional<String> facilityId;

  private PatientList(Optional<String> facilityId) {
    this.facilityId = facilityId;
  }

  /**
   * @return The ID of the Facility where the patient is receiving care.
   */
  @JsonProperty("facilityId")
  public Optional<String> getFacilityId() {
    return facilityId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PatientList && equalTo((PatientList) other);
  }

  private boolean equalTo(PatientList other) {
    return facilityId.equals(other.facilityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.facilityId);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> facilityId = Optional.empty();

    private Builder() {
    }

    public Builder from(PatientList other) {
      facilityId(other.getFacilityId());
      return this;
    }

    @JsonSetter(
        value = "facilityId",
        nulls = Nulls.SKIP
    )
    public Builder facilityId(Optional<String> facilityId) {
      this.facilityId = facilityId;
      return this;
    }

    public Builder facilityId(String facilityId) {
      this.facilityId = Optional.of(facilityId);
      return this;
    }

    public PatientList build() {
      return new PatientList(facilityId);
    }
  }
}
