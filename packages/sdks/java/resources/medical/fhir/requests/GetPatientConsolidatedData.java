/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.medical.fhir.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = GetPatientConsolidatedData.Builder.class
)
public final class GetPatientConsolidatedData {
  private final Optional<String> resources;

  private final Optional<String> dateFrom;

  private final Optional<String> dateTo;

  private GetPatientConsolidatedData(Optional<String> resources, Optional<String> dateFrom,
      Optional<String> dateTo) {
    this.resources = resources;
    this.dateFrom = dateFrom;
    this.dateTo = dateTo;
  }

  /**
   * @return A comma separated, case sensitive list of resources to be returned.
   * If none are provided all resources will be included.
   */
  @JsonProperty("resources")
  public Optional<String> getResources() {
    return resources;
  }

  /**
   * @return The start date (inclusive) for which to filter returned resources -
   * formatted <code>YYYY-MM-DD</code> as per ISO 8601. If not provided,
   * no start date filter will be applied.
   */
  @JsonProperty("dateFrom")
  public Optional<String> getDateFrom() {
    return dateFrom;
  }

  /**
   * @return The end date (inclusive) for which to filter returned resources -
   * formatted <code>YYYY-MM-DD</code> as per ISO 8601. If not provided,
   * no end date filter will be applied.
   */
  @JsonProperty("dateTo")
  public Optional<String> getDateTo() {
    return dateTo;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GetPatientConsolidatedData && equalTo((GetPatientConsolidatedData) other);
  }

  private boolean equalTo(GetPatientConsolidatedData other) {
    return resources.equals(other.resources) && dateFrom.equals(other.dateFrom) && dateTo.equals(other.dateTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.resources, this.dateFrom, this.dateTo);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> resources = Optional.empty();

    private Optional<String> dateFrom = Optional.empty();

    private Optional<String> dateTo = Optional.empty();

    private Builder() {
    }

    public Builder from(GetPatientConsolidatedData other) {
      resources(other.getResources());
      dateFrom(other.getDateFrom());
      dateTo(other.getDateTo());
      return this;
    }

    @JsonSetter(
        value = "resources",
        nulls = Nulls.SKIP
    )
    public Builder resources(Optional<String> resources) {
      this.resources = resources;
      return this;
    }

    public Builder resources(String resources) {
      this.resources = Optional.of(resources);
      return this;
    }

    @JsonSetter(
        value = "dateFrom",
        nulls = Nulls.SKIP
    )
    public Builder dateFrom(Optional<String> dateFrom) {
      this.dateFrom = dateFrom;
      return this;
    }

    public Builder dateFrom(String dateFrom) {
      this.dateFrom = Optional.of(dateFrom);
      return this;
    }

    @JsonSetter(
        value = "dateTo",
        nulls = Nulls.SKIP
    )
    public Builder dateTo(Optional<String> dateTo) {
      this.dateTo = dateTo;
      return this;
    }

    public Builder dateTo(String dateTo) {
      this.dateTo = Optional.of(dateTo);
      return this;
    }

    public GetPatientConsolidatedData build() {
      return new GetPatientConsolidatedData(resources, dateFrom, dateTo);
    }
  }
}
