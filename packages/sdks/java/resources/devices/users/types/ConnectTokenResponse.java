/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.users.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = ConnectTokenResponse.Builder.class
)
public final class ConnectTokenResponse {
  private final String token;

  private ConnectTokenResponse(String token) {
    this.token = token;
  }

  /**
   * @return The temporary token to allow the specified user to access
   * the Metriport Connect widget.
   * The token will expire 10 minutes after it is created, and
   * can be reused for the duration of the session.
   */
  @JsonProperty("token")
  public String getToken() {
    return token;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ConnectTokenResponse && equalTo((ConnectTokenResponse) other);
  }

  private boolean equalTo(ConnectTokenResponse other) {
    return token.equals(other.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.token);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TokenStage builder() {
    return new Builder();
  }

  public interface TokenStage {
    _FinalStage token(String token);

    Builder from(ConnectTokenResponse other);
  }

  public interface _FinalStage {
    ConnectTokenResponse build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TokenStage, _FinalStage {
    private String token;

    private Builder() {
    }

    @Override
    public Builder from(ConnectTokenResponse other) {
      token(other.getToken());
      return this;
    }

    /**
     * <p>The temporary token to allow the specified user to access
     * the Metriport Connect widget.
     * The token will expire 10 minutes after it is created, and
     * can be reused for the duration of the session.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("token")
    public _FinalStage token(String token) {
      this.token = token;
      return this;
    }

    @Override
    public ConnectTokenResponse build() {
      return new ConnectTokenResponse(token);
    }
  }
}
