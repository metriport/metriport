/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.users.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = ConnectedProvidersResponse.Builder.class
)
public final class ConnectedProvidersResponse {
  private final List<String> connectedProviders;

  private ConnectedProvidersResponse(List<String> connectedProviders) {
    this.connectedProviders = connectedProviders;
  }

  @JsonProperty("connectedProviders")
  public List<String> getConnectedProviders() {
    return connectedProviders;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ConnectedProvidersResponse && equalTo((ConnectedProvidersResponse) other);
  }

  private boolean equalTo(ConnectedProvidersResponse other) {
    return connectedProviders.equals(other.connectedProviders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.connectedProviders);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private List<String> connectedProviders = new ArrayList<>();

    private Builder() {
    }

    public Builder from(ConnectedProvidersResponse other) {
      connectedProviders(other.getConnectedProviders());
      return this;
    }

    @JsonSetter(
        value = "connectedProviders",
        nulls = Nulls.SKIP
    )
    public Builder connectedProviders(List<String> connectedProviders) {
      this.connectedProviders.clear();
      this.connectedProviders.addAll(connectedProviders);
      return this;
    }

    public Builder addConnectedProviders(String connectedProviders) {
      this.connectedProviders.add(connectedProviders);
      return this;
    }

    public Builder addAllConnectedProviders(List<String> connectedProviders) {
      this.connectedProviders.addAll(connectedProviders);
      return this;
    }

    public ConnectedProvidersResponse build() {
      return new ConnectedProvidersResponse(connectedProviders);
    }
  }
}
