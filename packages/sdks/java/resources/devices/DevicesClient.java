/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices;

import com.fasterxml.jackson.core.type.TypeReference;
import core.ApiError;
import core.ClientOptions;
import core.ObjectMappers;
import core.RequestOptions;
import core.Suppliers;
import java.io.IOException;
import java.lang.Object;
import java.lang.RuntimeException;
import java.util.List;
import java.util.function.Supplier;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import resources.devices.connect.ConnectClient;
import resources.devices.requests.GetActivityDataRequest;
import resources.devices.requests.GetBiometricsDataRequest;
import resources.devices.requests.GetBodyDataRequest;
import resources.devices.requests.GetNutritionDataRequest;
import resources.devices.requests.GetSleepDataRequest;
import resources.devices.requests.GetUserDataRequest;
import resources.devices.types.Activity;
import resources.devices.types.Biometrics;
import resources.devices.types.Body;
import resources.devices.types.ConnectedUserInfo;
import resources.devices.types.Nutrition;
import resources.devices.types.Sleep;
import resources.devices.types.User;
import resources.devices.users.UsersClient;

public class DevicesClient {
  protected final ClientOptions clientOptions;

  protected final Supplier<ConnectClient> connectClient;

  protected final Supplier<UsersClient> usersClient;

  public DevicesClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.connectClient = Suppliers.memoize(() -> new ConnectClient(clientOptions));
    this.usersClient = Suppliers.memoize(() -> new UsersClient(clientOptions));
  }

  /**
   * Returns activity data from all of the specified users' connected providers.
   */
  public List<Activity> getActivityData(GetActivityDataRequest request,
      RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("activity");httpUrl.addQueryParameter("userId", request.getUserId());
      httpUrl.addQueryParameter("date", request.getDate());
      httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), new TypeReference<List<Activity>>() {});
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    /**
     * Returns activity data from all of the specified users' connected providers.
     */
    public List<Activity> getActivityData(GetActivityDataRequest request) {
      return getActivityData(request,null);
    }

    /**
     * Returns biometrics data from all of the specified users' connected providers.
     */
    public List<Biometrics> getBiometricsData(GetBiometricsDataRequest request,
        RequestOptions requestOptions) {
      HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("biometrics");httpUrl.addQueryParameter("userId", request.getUserId());
        httpUrl.addQueryParameter("date", request.getDate());
        httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
        Request.Builder _requestBuilder = new Request.Builder()
          .url(httpUrl.build())
          .method("GET", null)
          .headers(Headers.of(clientOptions.headers(requestOptions)))
          .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
          Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
          if (response.isSuccessful()) {
            return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), new TypeReference<List<Biometrics>>() {});
          }
          throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        }
        catch (IOException e) {
          throw new RuntimeException(e);
        }
      }

      /**
       * Returns biometrics data from all of the specified users' connected providers.
       */
      public List<Biometrics> getBiometricsData(GetBiometricsDataRequest request) {
        return getBiometricsData(request,null);
      }

      /**
       * Returns body data from all of the specified users' connected providers.
       */
      public List<Body> getBodyData(GetBodyDataRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

          .addPathSegments("body");httpUrl.addQueryParameter("userId", request.getUserId());
          httpUrl.addQueryParameter("date", request.getDate());
          httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
          Request.Builder _requestBuilder = new Request.Builder()
            .url(httpUrl.build())
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json");
          Request okhttpRequest = _requestBuilder.build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), new TypeReference<List<Body>>() {});
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        /**
         * Returns body data from all of the specified users' connected providers.
         */
        public List<Body> getBodyData(GetBodyDataRequest request) {
          return getBodyData(request,null);
        }

        /**
         * Returns nutrition data from all of the specified users' connected providers.
         */
        public List<Nutrition> getNutritionData(GetNutritionDataRequest request,
            RequestOptions requestOptions) {
          HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("nutrition");httpUrl.addQueryParameter("userId", request.getUserId());
            httpUrl.addQueryParameter("date", request.getDate());
            httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
            Request.Builder _requestBuilder = new Request.Builder()
              .url(httpUrl.build())
              .method("GET", null)
              .headers(Headers.of(clientOptions.headers(requestOptions)))
              .addHeader("Content-Type", "application/json");
            Request okhttpRequest = _requestBuilder.build();
            try {
              Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
              if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), new TypeReference<List<Nutrition>>() {});
              }
              throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
            }
            catch (IOException e) {
              throw new RuntimeException(e);
            }
          }

          /**
           * Returns nutrition data from all of the specified users' connected providers.
           */
          public List<Nutrition> getNutritionData(GetNutritionDataRequest request) {
            return getNutritionData(request,null);
          }

          /**
           * Returns sleep data from all of the specified users' connected providers.
           */
          public List<Sleep> getSleepData(GetSleepDataRequest request,
              RequestOptions requestOptions) {
            HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

              .addPathSegments("sleep");httpUrl.addQueryParameter("userId", request.getUserId());
              httpUrl.addQueryParameter("date", request.getDate());
              httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
              Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
              Request okhttpRequest = _requestBuilder.build();
              try {
                Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
                if (response.isSuccessful()) {
                  return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), new TypeReference<List<Sleep>>() {});
                }
                throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
              }
              catch (IOException e) {
                throw new RuntimeException(e);
              }
            }

            /**
             * Returns sleep data from all of the specified users' connected providers.
             */
            public List<Sleep> getSleepData(GetSleepDataRequest request) {
              return getSleepData(request,null);
            }

            /**
             * Returns user info from all of the specified users' connected providers.
             */
            public List<User> getUserData(GetUserDataRequest request,
                RequestOptions requestOptions) {
              HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

                .addPathSegments("user");httpUrl.addQueryParameter("userId", request.getUserId());
                httpUrl.addQueryParameter("date", request.getDate());
                httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
                Request.Builder _requestBuilder = new Request.Builder()
                  .url(httpUrl.build())
                  .method("GET", null)
                  .headers(Headers.of(clientOptions.headers(requestOptions)))
                  .addHeader("Content-Type", "application/json");
                Request okhttpRequest = _requestBuilder.build();
                try {
                  Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
                  if (response.isSuccessful()) {
                    return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), new TypeReference<List<User>>() {});
                  }
                  throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
                }
                catch (IOException e) {
                  throw new RuntimeException(e);
                }
              }

              /**
               * Returns user info from all of the specified users' connected providers.
               */
              public List<User> getUserData(GetUserDataRequest request) {
                return getUserData(request,null);
              }

              /**
               * Returns a list of users with their IDs and connected providers.
               */
              public List<ConnectedUserInfo> getConnectedUsers(RequestOptions requestOptions) {
                HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

                  .addPathSegments("user")
                  .build();
                Request okhttpRequest = new Request.Builder()
                  .url(httpUrl)
                  .method("GET", null)
                  .headers(Headers.of(clientOptions.headers(requestOptions)))
                  .addHeader("Content-Type", "application/json")
                  .build();
                try {
                  Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
                  if (response.isSuccessful()) {
                    return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), new TypeReference<List<ConnectedUserInfo>>() {});
                  }
                  throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
                }
                catch (IOException e) {
                  throw new RuntimeException(e);
                }
              }

              /**
               * Returns a list of users with their IDs and connected providers.
               */
              public List<ConnectedUserInfo> getConnectedUsers() {
                return getConnectedUsers(null);
              }

              public ConnectClient connect() {
                return this.connectClient.get();
              }

              public UsersClient users() {
                return this.usersClient.get();
              }
            }
