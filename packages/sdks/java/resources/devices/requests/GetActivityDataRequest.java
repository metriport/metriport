/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = GetActivityDataRequest.Builder.class
)
public final class GetActivityDataRequest {
  private final String userId;

  private final String date;

  private final String timezoneId;

  private GetActivityDataRequest(String userId, String date, String timezoneId) {
    this.userId = userId;
    this.date = date;
    this.timezoneId = timezoneId;
  }

  /**
   * @return The Metriport user ID to create a session token for.
   */
  @JsonProperty("userId")
  public String getUserId() {
    return userId;
  }

  /**
   * @return Day for which to pull the data. Formatted YYYY-MM-DD.
   * <p>For simplicity, all queries assume the UTC timezone for the
   * specified date starting at 00:00 to 23:59 - unless otherwise
   * specified by the timezoneId parameter.</p>
   */
  @JsonProperty("date")
  public String getDate() {
    return date;
  }

  /**
   * @return Timezone ID to use for the specified date. If not specified,
   * the UTC timezone is used. For example this can be valid timezones
   * like <code>America/Los_Angeles</code> or <code>Europe/Kiev</code>.
   * <p>Valid timezones can be found at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.</p>
   * <p>Support for this parameter is under development, and currently only supported for the Google Fit provider.</p>
   */
  @JsonProperty("timezoneId")
  public String getTimezoneId() {
    return timezoneId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GetActivityDataRequest && equalTo((GetActivityDataRequest) other);
  }

  private boolean equalTo(GetActivityDataRequest other) {
    return userId.equals(other.userId) && date.equals(other.date) && timezoneId.equals(other.timezoneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.userId, this.date, this.timezoneId);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UserIdStage builder() {
    return new Builder();
  }

  public interface UserIdStage {
    DateStage userId(String userId);

    Builder from(GetActivityDataRequest other);
  }

  public interface DateStage {
    TimezoneIdStage date(String date);
  }

  public interface TimezoneIdStage {
    _FinalStage timezoneId(String timezoneId);
  }

  public interface _FinalStage {
    GetActivityDataRequest build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserIdStage, DateStage, TimezoneIdStage, _FinalStage {
    private String userId;

    private String date;

    private String timezoneId;

    private Builder() {
    }

    @Override
    public Builder from(GetActivityDataRequest other) {
      userId(other.getUserId());
      date(other.getDate());
      timezoneId(other.getTimezoneId());
      return this;
    }

    /**
     * <p>The Metriport user ID to create a session token for.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("userId")
    public DateStage userId(String userId) {
      this.userId = userId;
      return this;
    }

    /**
     * <p>Day for which to pull the data. Formatted YYYY-MM-DD.</p>
     * <p>For simplicity, all queries assume the UTC timezone for the
     * specified date starting at 00:00 to 23:59 - unless otherwise
     * specified by the timezoneId parameter.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("date")
    public TimezoneIdStage date(String date) {
      this.date = date;
      return this;
    }

    /**
     * <p>Timezone ID to use for the specified date. If not specified,
     * the UTC timezone is used. For example this can be valid timezones
     * like <code>America/Los_Angeles</code> or <code>Europe/Kiev</code>.</p>
     * <p>Valid timezones can be found at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.</p>
     * <p>Support for this parameter is under development, and currently only supported for the Google Fit provider.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("timezoneId")
    public _FinalStage timezoneId(String timezoneId) {
      this.timezoneId = timezoneId;
      return this;
    }

    @Override
    public GetActivityDataRequest build() {
      return new GetActivityDataRequest(userId, date, timezoneId);
    }
  }
}
