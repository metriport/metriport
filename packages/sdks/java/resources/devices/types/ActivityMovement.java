/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = ActivityMovement.Builder.class
)
public final class ActivityMovement {
  private final Optional<Integer> stepsCount;

  private final Optional<Integer> floorsCount;

  private final Optional<Elevation> elevation;

  private final Optional<Speed> speed;

  private final Optional<Integer> avgCadence;

  private final Optional<Integer> distanceMeters;

  private ActivityMovement(Optional<Integer> stepsCount, Optional<Integer> floorsCount,
      Optional<Elevation> elevation, Optional<Speed> speed, Optional<Integer> avgCadence,
      Optional<Integer> distanceMeters) {
    this.stepsCount = stepsCount;
    this.floorsCount = floorsCount;
    this.elevation = elevation;
    this.speed = speed;
    this.avgCadence = avgCadence;
    this.distanceMeters = distanceMeters;
  }

  @JsonProperty("steps_count")
  public Optional<Integer> getStepsCount() {
    return stepsCount;
  }

  @JsonProperty("floors_count")
  public Optional<Integer> getFloorsCount() {
    return floorsCount;
  }

  @JsonProperty("elevation")
  public Optional<Elevation> getElevation() {
    return elevation;
  }

  @JsonProperty("speed")
  public Optional<Speed> getSpeed() {
    return speed;
  }

  @JsonProperty("avg_cadence")
  public Optional<Integer> getAvgCadence() {
    return avgCadence;
  }

  @JsonProperty("distance_meters")
  public Optional<Integer> getDistanceMeters() {
    return distanceMeters;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ActivityMovement && equalTo((ActivityMovement) other);
  }

  private boolean equalTo(ActivityMovement other) {
    return stepsCount.equals(other.stepsCount) && floorsCount.equals(other.floorsCount) && elevation.equals(other.elevation) && speed.equals(other.speed) && avgCadence.equals(other.avgCadence) && distanceMeters.equals(other.distanceMeters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.stepsCount, this.floorsCount, this.elevation, this.speed, this.avgCadence, this.distanceMeters);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> stepsCount = Optional.empty();

    private Optional<Integer> floorsCount = Optional.empty();

    private Optional<Elevation> elevation = Optional.empty();

    private Optional<Speed> speed = Optional.empty();

    private Optional<Integer> avgCadence = Optional.empty();

    private Optional<Integer> distanceMeters = Optional.empty();

    private Builder() {
    }

    public Builder from(ActivityMovement other) {
      stepsCount(other.getStepsCount());
      floorsCount(other.getFloorsCount());
      elevation(other.getElevation());
      speed(other.getSpeed());
      avgCadence(other.getAvgCadence());
      distanceMeters(other.getDistanceMeters());
      return this;
    }

    @JsonSetter(
        value = "steps_count",
        nulls = Nulls.SKIP
    )
    public Builder stepsCount(Optional<Integer> stepsCount) {
      this.stepsCount = stepsCount;
      return this;
    }

    public Builder stepsCount(Integer stepsCount) {
      this.stepsCount = Optional.of(stepsCount);
      return this;
    }

    @JsonSetter(
        value = "floors_count",
        nulls = Nulls.SKIP
    )
    public Builder floorsCount(Optional<Integer> floorsCount) {
      this.floorsCount = floorsCount;
      return this;
    }

    public Builder floorsCount(Integer floorsCount) {
      this.floorsCount = Optional.of(floorsCount);
      return this;
    }

    @JsonSetter(
        value = "elevation",
        nulls = Nulls.SKIP
    )
    public Builder elevation(Optional<Elevation> elevation) {
      this.elevation = elevation;
      return this;
    }

    public Builder elevation(Elevation elevation) {
      this.elevation = Optional.of(elevation);
      return this;
    }

    @JsonSetter(
        value = "speed",
        nulls = Nulls.SKIP
    )
    public Builder speed(Optional<Speed> speed) {
      this.speed = speed;
      return this;
    }

    public Builder speed(Speed speed) {
      this.speed = Optional.of(speed);
      return this;
    }

    @JsonSetter(
        value = "avg_cadence",
        nulls = Nulls.SKIP
    )
    public Builder avgCadence(Optional<Integer> avgCadence) {
      this.avgCadence = avgCadence;
      return this;
    }

    public Builder avgCadence(Integer avgCadence) {
      this.avgCadence = Optional.of(avgCadence);
      return this;
    }

    @JsonSetter(
        value = "distance_meters",
        nulls = Nulls.SKIP
    )
    public Builder distanceMeters(Optional<Integer> distanceMeters) {
      this.distanceMeters = distanceMeters;
      return this;
    }

    public Builder distanceMeters(Integer distanceMeters) {
      this.distanceMeters = Optional.of(distanceMeters);
      return this;
    }

    public ActivityMovement build() {
      return new ActivityMovement(stepsCount, floorsCount, elevation, speed, avgCadence, distanceMeters);
    }
  }
}
