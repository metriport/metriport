/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = ActivityDurations.Builder.class
)
public final class ActivityDurations {
  private final Optional<Integer> activeSeconds;

  private final Optional<Duration> intensity;

  private final Optional<Duration> strain;

  private ActivityDurations(Optional<Integer> activeSeconds, Optional<Duration> intensity,
      Optional<Duration> strain) {
    this.activeSeconds = activeSeconds;
    this.intensity = intensity;
    this.strain = strain;
  }

  @JsonProperty("active_seconds")
  public Optional<Integer> getActiveSeconds() {
    return activeSeconds;
  }

  /**
   * @return Also referred to as metabolic-equivalent minutes
   */
  @JsonProperty("intensity")
  public Optional<Duration> getIntensity() {
    return intensity;
  }

  /**
   * @return Also referred to as stress
   */
  @JsonProperty("strain")
  public Optional<Duration> getStrain() {
    return strain;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ActivityDurations && equalTo((ActivityDurations) other);
  }

  private boolean equalTo(ActivityDurations other) {
    return activeSeconds.equals(other.activeSeconds) && intensity.equals(other.intensity) && strain.equals(other.strain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.activeSeconds, this.intensity, this.strain);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> activeSeconds = Optional.empty();

    private Optional<Duration> intensity = Optional.empty();

    private Optional<Duration> strain = Optional.empty();

    private Builder() {
    }

    public Builder from(ActivityDurations other) {
      activeSeconds(other.getActiveSeconds());
      intensity(other.getIntensity());
      strain(other.getStrain());
      return this;
    }

    @JsonSetter(
        value = "active_seconds",
        nulls = Nulls.SKIP
    )
    public Builder activeSeconds(Optional<Integer> activeSeconds) {
      this.activeSeconds = activeSeconds;
      return this;
    }

    public Builder activeSeconds(Integer activeSeconds) {
      this.activeSeconds = Optional.of(activeSeconds);
      return this;
    }

    @JsonSetter(
        value = "intensity",
        nulls = Nulls.SKIP
    )
    public Builder intensity(Optional<Duration> intensity) {
      this.intensity = intensity;
      return this;
    }

    public Builder intensity(Duration intensity) {
      this.intensity = Optional.of(intensity);
      return this;
    }

    @JsonSetter(
        value = "strain",
        nulls = Nulls.SKIP
    )
    public Builder strain(Optional<Duration> strain) {
      this.strain = strain;
      return this;
    }

    public Builder strain(Duration strain) {
      this.strain = Optional.of(strain);
      return this;
    }

    public ActivityDurations build() {
      return new ActivityDurations(activeSeconds, intensity, strain);
    }
  }
}
