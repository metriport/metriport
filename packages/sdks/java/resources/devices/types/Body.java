/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Body.Builder.class
)
public final class Body implements IMetriportData {
  private final Metadata metadata;

  private final Optional<Double> bodyFatPct;

  private final Optional<Double> heightCm;

  private final Optional<Double> weightKg;

  private final Optional<Double> boneMassKg;

  private final Optional<Double> muscleMassKg;

  private final Optional<Double> leanMassKg;

  private final Optional<Double> maxPossibleHeartRateBpm;

  private final Optional<List<Sample>> weightSamplesKg;

  private Body(Metadata metadata, Optional<Double> bodyFatPct, Optional<Double> heightCm,
      Optional<Double> weightKg, Optional<Double> boneMassKg, Optional<Double> muscleMassKg,
      Optional<Double> leanMassKg, Optional<Double> maxPossibleHeartRateBpm,
      Optional<List<Sample>> weightSamplesKg) {
    this.metadata = metadata;
    this.bodyFatPct = bodyFatPct;
    this.heightCm = heightCm;
    this.weightKg = weightKg;
    this.boneMassKg = boneMassKg;
    this.muscleMassKg = muscleMassKg;
    this.leanMassKg = leanMassKg;
    this.maxPossibleHeartRateBpm = maxPossibleHeartRateBpm;
    this.weightSamplesKg = weightSamplesKg;
  }

  @JsonProperty("metadata")
  @Override
  public Metadata getMetadata() {
    return metadata;
  }

  @JsonProperty("body_fat_pct")
  public Optional<Double> getBodyFatPct() {
    return bodyFatPct;
  }

  @JsonProperty("height_cm")
  public Optional<Double> getHeightCm() {
    return heightCm;
  }

  @JsonProperty("weight_kg")
  public Optional<Double> getWeightKg() {
    return weightKg;
  }

  @JsonProperty("bone_mass_kg")
  public Optional<Double> getBoneMassKg() {
    return boneMassKg;
  }

  @JsonProperty("muscle_mass_kg")
  public Optional<Double> getMuscleMassKg() {
    return muscleMassKg;
  }

  @JsonProperty("lean_mass_kg")
  public Optional<Double> getLeanMassKg() {
    return leanMassKg;
  }

  @JsonProperty("max_possible_heart_rate_bpm")
  public Optional<Double> getMaxPossibleHeartRateBpm() {
    return maxPossibleHeartRateBpm;
  }

  @JsonProperty("weight_samples_kg")
  public Optional<List<Sample>> getWeightSamplesKg() {
    return weightSamplesKg;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Body && equalTo((Body) other);
  }

  private boolean equalTo(Body other) {
    return metadata.equals(other.metadata) && bodyFatPct.equals(other.bodyFatPct) && heightCm.equals(other.heightCm) && weightKg.equals(other.weightKg) && boneMassKg.equals(other.boneMassKg) && muscleMassKg.equals(other.muscleMassKg) && leanMassKg.equals(other.leanMassKg) && maxPossibleHeartRateBpm.equals(other.maxPossibleHeartRateBpm) && weightSamplesKg.equals(other.weightSamplesKg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.metadata, this.bodyFatPct, this.heightCm, this.weightKg, this.boneMassKg, this.muscleMassKg, this.leanMassKg, this.maxPossibleHeartRateBpm, this.weightSamplesKg);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static MetadataStage builder() {
    return new Builder();
  }

  public interface MetadataStage {
    _FinalStage metadata(Metadata metadata);

    Builder from(Body other);
  }

  public interface _FinalStage {
    Body build();

    _FinalStage bodyFatPct(Optional<Double> bodyFatPct);

    _FinalStage bodyFatPct(Double bodyFatPct);

    _FinalStage heightCm(Optional<Double> heightCm);

    _FinalStage heightCm(Double heightCm);

    _FinalStage weightKg(Optional<Double> weightKg);

    _FinalStage weightKg(Double weightKg);

    _FinalStage boneMassKg(Optional<Double> boneMassKg);

    _FinalStage boneMassKg(Double boneMassKg);

    _FinalStage muscleMassKg(Optional<Double> muscleMassKg);

    _FinalStage muscleMassKg(Double muscleMassKg);

    _FinalStage leanMassKg(Optional<Double> leanMassKg);

    _FinalStage leanMassKg(Double leanMassKg);

    _FinalStage maxPossibleHeartRateBpm(Optional<Double> maxPossibleHeartRateBpm);

    _FinalStage maxPossibleHeartRateBpm(Double maxPossibleHeartRateBpm);

    _FinalStage weightSamplesKg(Optional<List<Sample>> weightSamplesKg);

    _FinalStage weightSamplesKg(List<Sample> weightSamplesKg);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements MetadataStage, _FinalStage {
    private Metadata metadata;

    private Optional<List<Sample>> weightSamplesKg = Optional.empty();

    private Optional<Double> maxPossibleHeartRateBpm = Optional.empty();

    private Optional<Double> leanMassKg = Optional.empty();

    private Optional<Double> muscleMassKg = Optional.empty();

    private Optional<Double> boneMassKg = Optional.empty();

    private Optional<Double> weightKg = Optional.empty();

    private Optional<Double> heightCm = Optional.empty();

    private Optional<Double> bodyFatPct = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(Body other) {
      metadata(other.getMetadata());
      bodyFatPct(other.getBodyFatPct());
      heightCm(other.getHeightCm());
      weightKg(other.getWeightKg());
      boneMassKg(other.getBoneMassKg());
      muscleMassKg(other.getMuscleMassKg());
      leanMassKg(other.getLeanMassKg());
      maxPossibleHeartRateBpm(other.getMaxPossibleHeartRateBpm());
      weightSamplesKg(other.getWeightSamplesKg());
      return this;
    }

    @Override
    @JsonSetter("metadata")
    public _FinalStage metadata(Metadata metadata) {
      this.metadata = metadata;
      return this;
    }

    @Override
    public _FinalStage weightSamplesKg(List<Sample> weightSamplesKg) {
      this.weightSamplesKg = Optional.of(weightSamplesKg);
      return this;
    }

    @Override
    @JsonSetter(
        value = "weight_samples_kg",
        nulls = Nulls.SKIP
    )
    public _FinalStage weightSamplesKg(Optional<List<Sample>> weightSamplesKg) {
      this.weightSamplesKg = weightSamplesKg;
      return this;
    }

    @Override
    public _FinalStage maxPossibleHeartRateBpm(Double maxPossibleHeartRateBpm) {
      this.maxPossibleHeartRateBpm = Optional.of(maxPossibleHeartRateBpm);
      return this;
    }

    @Override
    @JsonSetter(
        value = "max_possible_heart_rate_bpm",
        nulls = Nulls.SKIP
    )
    public _FinalStage maxPossibleHeartRateBpm(Optional<Double> maxPossibleHeartRateBpm) {
      this.maxPossibleHeartRateBpm = maxPossibleHeartRateBpm;
      return this;
    }

    @Override
    public _FinalStage leanMassKg(Double leanMassKg) {
      this.leanMassKg = Optional.of(leanMassKg);
      return this;
    }

    @Override
    @JsonSetter(
        value = "lean_mass_kg",
        nulls = Nulls.SKIP
    )
    public _FinalStage leanMassKg(Optional<Double> leanMassKg) {
      this.leanMassKg = leanMassKg;
      return this;
    }

    @Override
    public _FinalStage muscleMassKg(Double muscleMassKg) {
      this.muscleMassKg = Optional.of(muscleMassKg);
      return this;
    }

    @Override
    @JsonSetter(
        value = "muscle_mass_kg",
        nulls = Nulls.SKIP
    )
    public _FinalStage muscleMassKg(Optional<Double> muscleMassKg) {
      this.muscleMassKg = muscleMassKg;
      return this;
    }

    @Override
    public _FinalStage boneMassKg(Double boneMassKg) {
      this.boneMassKg = Optional.of(boneMassKg);
      return this;
    }

    @Override
    @JsonSetter(
        value = "bone_mass_kg",
        nulls = Nulls.SKIP
    )
    public _FinalStage boneMassKg(Optional<Double> boneMassKg) {
      this.boneMassKg = boneMassKg;
      return this;
    }

    @Override
    public _FinalStage weightKg(Double weightKg) {
      this.weightKg = Optional.of(weightKg);
      return this;
    }

    @Override
    @JsonSetter(
        value = "weight_kg",
        nulls = Nulls.SKIP
    )
    public _FinalStage weightKg(Optional<Double> weightKg) {
      this.weightKg = weightKg;
      return this;
    }

    @Override
    public _FinalStage heightCm(Double heightCm) {
      this.heightCm = Optional.of(heightCm);
      return this;
    }

    @Override
    @JsonSetter(
        value = "height_cm",
        nulls = Nulls.SKIP
    )
    public _FinalStage heightCm(Optional<Double> heightCm) {
      this.heightCm = heightCm;
      return this;
    }

    @Override
    public _FinalStage bodyFatPct(Double bodyFatPct) {
      this.bodyFatPct = Optional.of(bodyFatPct);
      return this;
    }

    @Override
    @JsonSetter(
        value = "body_fat_pct",
        nulls = Nulls.SKIP
    )
    public _FinalStage bodyFatPct(Optional<Double> bodyFatPct) {
      this.bodyFatPct = bodyFatPct;
      return this;
    }

    @Override
    public Body build() {
      return new Body(metadata, bodyFatPct, heightCm, weightKg, boneMassKg, muscleMassKg, leanMassKg, maxPossibleHeartRateBpm, weightSamplesKg);
    }
  }
}
