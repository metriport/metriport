/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Duration.Builder.class
)
public final class Duration {
  private final Optional<Integer> restSeconds;

  private final Optional<Integer> veryLowSeconds;

  private final Optional<Integer> lowSeconds;

  private final Optional<Integer> medSeconds;

  private final Optional<Integer> highSeconds;

  private Duration(Optional<Integer> restSeconds, Optional<Integer> veryLowSeconds,
      Optional<Integer> lowSeconds, Optional<Integer> medSeconds, Optional<Integer> highSeconds) {
    this.restSeconds = restSeconds;
    this.veryLowSeconds = veryLowSeconds;
    this.lowSeconds = lowSeconds;
    this.medSeconds = medSeconds;
    this.highSeconds = highSeconds;
  }

  @JsonProperty("rest_seconds")
  public Optional<Integer> getRestSeconds() {
    return restSeconds;
  }

  @JsonProperty("very_low_seconds")
  public Optional<Integer> getVeryLowSeconds() {
    return veryLowSeconds;
  }

  @JsonProperty("low_seconds")
  public Optional<Integer> getLowSeconds() {
    return lowSeconds;
  }

  @JsonProperty("med_seconds")
  public Optional<Integer> getMedSeconds() {
    return medSeconds;
  }

  @JsonProperty("high_seconds")
  public Optional<Integer> getHighSeconds() {
    return highSeconds;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Duration && equalTo((Duration) other);
  }

  private boolean equalTo(Duration other) {
    return restSeconds.equals(other.restSeconds) && veryLowSeconds.equals(other.veryLowSeconds) && lowSeconds.equals(other.lowSeconds) && medSeconds.equals(other.medSeconds) && highSeconds.equals(other.highSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.restSeconds, this.veryLowSeconds, this.lowSeconds, this.medSeconds, this.highSeconds);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> restSeconds = Optional.empty();

    private Optional<Integer> veryLowSeconds = Optional.empty();

    private Optional<Integer> lowSeconds = Optional.empty();

    private Optional<Integer> medSeconds = Optional.empty();

    private Optional<Integer> highSeconds = Optional.empty();

    private Builder() {
    }

    public Builder from(Duration other) {
      restSeconds(other.getRestSeconds());
      veryLowSeconds(other.getVeryLowSeconds());
      lowSeconds(other.getLowSeconds());
      medSeconds(other.getMedSeconds());
      highSeconds(other.getHighSeconds());
      return this;
    }

    @JsonSetter(
        value = "rest_seconds",
        nulls = Nulls.SKIP
    )
    public Builder restSeconds(Optional<Integer> restSeconds) {
      this.restSeconds = restSeconds;
      return this;
    }

    public Builder restSeconds(Integer restSeconds) {
      this.restSeconds = Optional.of(restSeconds);
      return this;
    }

    @JsonSetter(
        value = "very_low_seconds",
        nulls = Nulls.SKIP
    )
    public Builder veryLowSeconds(Optional<Integer> veryLowSeconds) {
      this.veryLowSeconds = veryLowSeconds;
      return this;
    }

    public Builder veryLowSeconds(Integer veryLowSeconds) {
      this.veryLowSeconds = Optional.of(veryLowSeconds);
      return this;
    }

    @JsonSetter(
        value = "low_seconds",
        nulls = Nulls.SKIP
    )
    public Builder lowSeconds(Optional<Integer> lowSeconds) {
      this.lowSeconds = lowSeconds;
      return this;
    }

    public Builder lowSeconds(Integer lowSeconds) {
      this.lowSeconds = Optional.of(lowSeconds);
      return this;
    }

    @JsonSetter(
        value = "med_seconds",
        nulls = Nulls.SKIP
    )
    public Builder medSeconds(Optional<Integer> medSeconds) {
      this.medSeconds = medSeconds;
      return this;
    }

    public Builder medSeconds(Integer medSeconds) {
      this.medSeconds = Optional.of(medSeconds);
      return this;
    }

    @JsonSetter(
        value = "high_seconds",
        nulls = Nulls.SKIP
    )
    public Builder highSeconds(Optional<Integer> highSeconds) {
      this.highSeconds = highSeconds;
      return this;
    }

    public Builder highSeconds(Integer highSeconds) {
      this.highSeconds = Optional.of(highSeconds);
      return this;
    }

    public Duration build() {
      return new Duration(restSeconds, veryLowSeconds, lowSeconds, medSeconds, highSeconds);
    }
  }
}
