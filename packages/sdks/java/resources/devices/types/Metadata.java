/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Metadata.Builder.class
)
public final class Metadata {
  private final String date;

  private final Optional<String> hour;

  private final ProviderSource source;

  private final Optional<SourceInfo> dataSource;

  private final Optional<String> error;

  private Metadata(String date, Optional<String> hour, ProviderSource source,
      Optional<SourceInfo> dataSource, Optional<String> error) {
    this.date = date;
    this.hour = hour;
    this.source = source;
    this.dataSource = dataSource;
    this.error = error;
  }

  @JsonProperty("date")
  public String getDate() {
    return date;
  }

  @JsonProperty("hour")
  public Optional<String> getHour() {
    return hour;
  }

  @JsonProperty("source")
  public ProviderSource getSource() {
    return source;
  }

  @JsonProperty("data_source")
  public Optional<SourceInfo> getDataSource() {
    return dataSource;
  }

  @JsonProperty("error")
  public Optional<String> getError() {
    return error;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Metadata && equalTo((Metadata) other);
  }

  private boolean equalTo(Metadata other) {
    return date.equals(other.date) && hour.equals(other.hour) && source.equals(other.source) && dataSource.equals(other.dataSource) && error.equals(other.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.date, this.hour, this.source, this.dataSource, this.error);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static DateStage builder() {
    return new Builder();
  }

  public interface DateStage {
    SourceStage date(String date);

    Builder from(Metadata other);
  }

  public interface SourceStage {
    _FinalStage source(ProviderSource source);
  }

  public interface _FinalStage {
    Metadata build();

    _FinalStage hour(Optional<String> hour);

    _FinalStage hour(String hour);

    _FinalStage dataSource(Optional<SourceInfo> dataSource);

    _FinalStage dataSource(SourceInfo dataSource);

    _FinalStage error(Optional<String> error);

    _FinalStage error(String error);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements DateStage, SourceStage, _FinalStage {
    private String date;

    private ProviderSource source;

    private Optional<String> error = Optional.empty();

    private Optional<SourceInfo> dataSource = Optional.empty();

    private Optional<String> hour = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(Metadata other) {
      date(other.getDate());
      hour(other.getHour());
      source(other.getSource());
      dataSource(other.getDataSource());
      error(other.getError());
      return this;
    }

    @Override
    @JsonSetter("date")
    public SourceStage date(String date) {
      this.date = date;
      return this;
    }

    @Override
    @JsonSetter("source")
    public _FinalStage source(ProviderSource source) {
      this.source = source;
      return this;
    }

    @Override
    public _FinalStage error(String error) {
      this.error = Optional.of(error);
      return this;
    }

    @Override
    @JsonSetter(
        value = "error",
        nulls = Nulls.SKIP
    )
    public _FinalStage error(Optional<String> error) {
      this.error = error;
      return this;
    }

    @Override
    public _FinalStage dataSource(SourceInfo dataSource) {
      this.dataSource = Optional.of(dataSource);
      return this;
    }

    @Override
    @JsonSetter(
        value = "data_source",
        nulls = Nulls.SKIP
    )
    public _FinalStage dataSource(Optional<SourceInfo> dataSource) {
      this.dataSource = dataSource;
      return this;
    }

    @Override
    public _FinalStage hour(String hour) {
      this.hour = Optional.of(hour);
      return this;
    }

    @Override
    @JsonSetter(
        value = "hour",
        nulls = Nulls.SKIP
    )
    public _FinalStage hour(Optional<String> hour) {
      this.hour = hour;
      return this;
    }

    @Override
    public Metadata build() {
      return new Metadata(date, hour, source, dataSource, error);
    }
  }
}
