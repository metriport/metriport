/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = EnergyExpenditure.Builder.class
)
public final class EnergyExpenditure {
  private final Optional<Integer> activeKcal;

  private final Optional<Integer> basalMetabolicRateKcal;

  private final Optional<Integer> totalWatts;

  private final Optional<Integer> avgWatts;

  private EnergyExpenditure(Optional<Integer> activeKcal, Optional<Integer> basalMetabolicRateKcal,
      Optional<Integer> totalWatts, Optional<Integer> avgWatts) {
    this.activeKcal = activeKcal;
    this.basalMetabolicRateKcal = basalMetabolicRateKcal;
    this.totalWatts = totalWatts;
    this.avgWatts = avgWatts;
  }

  @JsonProperty("active_kcal")
  public Optional<Integer> getActiveKcal() {
    return activeKcal;
  }

  @JsonProperty("basal_metabolic_rate_kcal")
  public Optional<Integer> getBasalMetabolicRateKcal() {
    return basalMetabolicRateKcal;
  }

  @JsonProperty("total_watts")
  public Optional<Integer> getTotalWatts() {
    return totalWatts;
  }

  @JsonProperty("avg_watts")
  public Optional<Integer> getAvgWatts() {
    return avgWatts;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EnergyExpenditure && equalTo((EnergyExpenditure) other);
  }

  private boolean equalTo(EnergyExpenditure other) {
    return activeKcal.equals(other.activeKcal) && basalMetabolicRateKcal.equals(other.basalMetabolicRateKcal) && totalWatts.equals(other.totalWatts) && avgWatts.equals(other.avgWatts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.activeKcal, this.basalMetabolicRateKcal, this.totalWatts, this.avgWatts);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> activeKcal = Optional.empty();

    private Optional<Integer> basalMetabolicRateKcal = Optional.empty();

    private Optional<Integer> totalWatts = Optional.empty();

    private Optional<Integer> avgWatts = Optional.empty();

    private Builder() {
    }

    public Builder from(EnergyExpenditure other) {
      activeKcal(other.getActiveKcal());
      basalMetabolicRateKcal(other.getBasalMetabolicRateKcal());
      totalWatts(other.getTotalWatts());
      avgWatts(other.getAvgWatts());
      return this;
    }

    @JsonSetter(
        value = "active_kcal",
        nulls = Nulls.SKIP
    )
    public Builder activeKcal(Optional<Integer> activeKcal) {
      this.activeKcal = activeKcal;
      return this;
    }

    public Builder activeKcal(Integer activeKcal) {
      this.activeKcal = Optional.of(activeKcal);
      return this;
    }

    @JsonSetter(
        value = "basal_metabolic_rate_kcal",
        nulls = Nulls.SKIP
    )
    public Builder basalMetabolicRateKcal(Optional<Integer> basalMetabolicRateKcal) {
      this.basalMetabolicRateKcal = basalMetabolicRateKcal;
      return this;
    }

    public Builder basalMetabolicRateKcal(Integer basalMetabolicRateKcal) {
      this.basalMetabolicRateKcal = Optional.of(basalMetabolicRateKcal);
      return this;
    }

    @JsonSetter(
        value = "total_watts",
        nulls = Nulls.SKIP
    )
    public Builder totalWatts(Optional<Integer> totalWatts) {
      this.totalWatts = totalWatts;
      return this;
    }

    public Builder totalWatts(Integer totalWatts) {
      this.totalWatts = Optional.of(totalWatts);
      return this;
    }

    @JsonSetter(
        value = "avg_watts",
        nulls = Nulls.SKIP
    )
    public Builder avgWatts(Optional<Integer> avgWatts) {
      this.avgWatts = avgWatts;
      return this;
    }

    public Builder avgWatts(Integer avgWatts) {
      this.avgWatts = Optional.of(avgWatts);
      return this;
    }

    public EnergyExpenditure build() {
      return new EnergyExpenditure(activeKcal, basalMetabolicRateKcal, totalWatts, avgWatts);
    }
  }
}
