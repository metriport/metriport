/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Macros.Builder.class
)
public final class Macros {
  private final Optional<Integer> alcoholG;

  private final Optional<Integer> carbsG;

  private final Optional<Integer> cholesterolMg;

  private final Optional<Integer> energyKcal;

  private final Optional<Integer> fatG;

  private final Optional<Integer> fiberG;

  private final Optional<Integer> proteinG;

  private final Optional<Integer> sodiumMg;

  private final Optional<Integer> sugarG;

  private final Optional<Integer> transFatG;

  private final Optional<Integer> waterMl;

  private Macros(Optional<Integer> alcoholG, Optional<Integer> carbsG,
      Optional<Integer> cholesterolMg, Optional<Integer> energyKcal, Optional<Integer> fatG,
      Optional<Integer> fiberG, Optional<Integer> proteinG, Optional<Integer> sodiumMg,
      Optional<Integer> sugarG, Optional<Integer> transFatG, Optional<Integer> waterMl) {
    this.alcoholG = alcoholG;
    this.carbsG = carbsG;
    this.cholesterolMg = cholesterolMg;
    this.energyKcal = energyKcal;
    this.fatG = fatG;
    this.fiberG = fiberG;
    this.proteinG = proteinG;
    this.sodiumMg = sodiumMg;
    this.sugarG = sugarG;
    this.transFatG = transFatG;
    this.waterMl = waterMl;
  }

  @JsonProperty("alcohol_g")
  public Optional<Integer> getAlcoholG() {
    return alcoholG;
  }

  @JsonProperty("carbs_g")
  public Optional<Integer> getCarbsG() {
    return carbsG;
  }

  @JsonProperty("cholesterol_mg")
  public Optional<Integer> getCholesterolMg() {
    return cholesterolMg;
  }

  @JsonProperty("energy_kcal")
  public Optional<Integer> getEnergyKcal() {
    return energyKcal;
  }

  @JsonProperty("fat_g")
  public Optional<Integer> getFatG() {
    return fatG;
  }

  @JsonProperty("fiber_g")
  public Optional<Integer> getFiberG() {
    return fiberG;
  }

  @JsonProperty("protein_g")
  public Optional<Integer> getProteinG() {
    return proteinG;
  }

  @JsonProperty("sodium_mg")
  public Optional<Integer> getSodiumMg() {
    return sodiumMg;
  }

  @JsonProperty("sugar_g")
  public Optional<Integer> getSugarG() {
    return sugarG;
  }

  @JsonProperty("trans_fat_g")
  public Optional<Integer> getTransFatG() {
    return transFatG;
  }

  @JsonProperty("water_ml")
  public Optional<Integer> getWaterMl() {
    return waterMl;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Macros && equalTo((Macros) other);
  }

  private boolean equalTo(Macros other) {
    return alcoholG.equals(other.alcoholG) && carbsG.equals(other.carbsG) && cholesterolMg.equals(other.cholesterolMg) && energyKcal.equals(other.energyKcal) && fatG.equals(other.fatG) && fiberG.equals(other.fiberG) && proteinG.equals(other.proteinG) && sodiumMg.equals(other.sodiumMg) && sugarG.equals(other.sugarG) && transFatG.equals(other.transFatG) && waterMl.equals(other.waterMl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.alcoholG, this.carbsG, this.cholesterolMg, this.energyKcal, this.fatG, this.fiberG, this.proteinG, this.sodiumMg, this.sugarG, this.transFatG, this.waterMl);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> alcoholG = Optional.empty();

    private Optional<Integer> carbsG = Optional.empty();

    private Optional<Integer> cholesterolMg = Optional.empty();

    private Optional<Integer> energyKcal = Optional.empty();

    private Optional<Integer> fatG = Optional.empty();

    private Optional<Integer> fiberG = Optional.empty();

    private Optional<Integer> proteinG = Optional.empty();

    private Optional<Integer> sodiumMg = Optional.empty();

    private Optional<Integer> sugarG = Optional.empty();

    private Optional<Integer> transFatG = Optional.empty();

    private Optional<Integer> waterMl = Optional.empty();

    private Builder() {
    }

    public Builder from(Macros other) {
      alcoholG(other.getAlcoholG());
      carbsG(other.getCarbsG());
      cholesterolMg(other.getCholesterolMg());
      energyKcal(other.getEnergyKcal());
      fatG(other.getFatG());
      fiberG(other.getFiberG());
      proteinG(other.getProteinG());
      sodiumMg(other.getSodiumMg());
      sugarG(other.getSugarG());
      transFatG(other.getTransFatG());
      waterMl(other.getWaterMl());
      return this;
    }

    @JsonSetter(
        value = "alcohol_g",
        nulls = Nulls.SKIP
    )
    public Builder alcoholG(Optional<Integer> alcoholG) {
      this.alcoholG = alcoholG;
      return this;
    }

    public Builder alcoholG(Integer alcoholG) {
      this.alcoholG = Optional.of(alcoholG);
      return this;
    }

    @JsonSetter(
        value = "carbs_g",
        nulls = Nulls.SKIP
    )
    public Builder carbsG(Optional<Integer> carbsG) {
      this.carbsG = carbsG;
      return this;
    }

    public Builder carbsG(Integer carbsG) {
      this.carbsG = Optional.of(carbsG);
      return this;
    }

    @JsonSetter(
        value = "cholesterol_mg",
        nulls = Nulls.SKIP
    )
    public Builder cholesterolMg(Optional<Integer> cholesterolMg) {
      this.cholesterolMg = cholesterolMg;
      return this;
    }

    public Builder cholesterolMg(Integer cholesterolMg) {
      this.cholesterolMg = Optional.of(cholesterolMg);
      return this;
    }

    @JsonSetter(
        value = "energy_kcal",
        nulls = Nulls.SKIP
    )
    public Builder energyKcal(Optional<Integer> energyKcal) {
      this.energyKcal = energyKcal;
      return this;
    }

    public Builder energyKcal(Integer energyKcal) {
      this.energyKcal = Optional.of(energyKcal);
      return this;
    }

    @JsonSetter(
        value = "fat_g",
        nulls = Nulls.SKIP
    )
    public Builder fatG(Optional<Integer> fatG) {
      this.fatG = fatG;
      return this;
    }

    public Builder fatG(Integer fatG) {
      this.fatG = Optional.of(fatG);
      return this;
    }

    @JsonSetter(
        value = "fiber_g",
        nulls = Nulls.SKIP
    )
    public Builder fiberG(Optional<Integer> fiberG) {
      this.fiberG = fiberG;
      return this;
    }

    public Builder fiberG(Integer fiberG) {
      this.fiberG = Optional.of(fiberG);
      return this;
    }

    @JsonSetter(
        value = "protein_g",
        nulls = Nulls.SKIP
    )
    public Builder proteinG(Optional<Integer> proteinG) {
      this.proteinG = proteinG;
      return this;
    }

    public Builder proteinG(Integer proteinG) {
      this.proteinG = Optional.of(proteinG);
      return this;
    }

    @JsonSetter(
        value = "sodium_mg",
        nulls = Nulls.SKIP
    )
    public Builder sodiumMg(Optional<Integer> sodiumMg) {
      this.sodiumMg = sodiumMg;
      return this;
    }

    public Builder sodiumMg(Integer sodiumMg) {
      this.sodiumMg = Optional.of(sodiumMg);
      return this;
    }

    @JsonSetter(
        value = "sugar_g",
        nulls = Nulls.SKIP
    )
    public Builder sugarG(Optional<Integer> sugarG) {
      this.sugarG = sugarG;
      return this;
    }

    public Builder sugarG(Integer sugarG) {
      this.sugarG = Optional.of(sugarG);
      return this;
    }

    @JsonSetter(
        value = "trans_fat_g",
        nulls = Nulls.SKIP
    )
    public Builder transFatG(Optional<Integer> transFatG) {
      this.transFatG = transFatG;
      return this;
    }

    public Builder transFatG(Integer transFatG) {
      this.transFatG = Optional.of(transFatG);
      return this;
    }

    @JsonSetter(
        value = "water_ml",
        nulls = Nulls.SKIP
    )
    public Builder waterMl(Optional<Integer> waterMl) {
      this.waterMl = waterMl;
      return this;
    }

    public Builder waterMl(Integer waterMl) {
      this.waterMl = Optional.of(waterMl);
      return this;
    }

    public Macros build() {
      return new Macros(alcoholG, carbsG, cholesterolMg, energyKcal, fatG, fiberG, proteinG, sodiumMg, sugarG, transFatG, waterMl);
    }
  }
}
