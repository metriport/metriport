/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Elevation.Builder.class
)
public final class Elevation {
  private final Optional<Integer> gainMeters;

  private final Optional<Integer> minMeters;

  private final Optional<Integer> maxMeters;

  private Elevation(Optional<Integer> gainMeters, Optional<Integer> minMeters,
      Optional<Integer> maxMeters) {
    this.gainMeters = gainMeters;
    this.minMeters = minMeters;
    this.maxMeters = maxMeters;
  }

  @JsonProperty("gain_meters")
  public Optional<Integer> getGainMeters() {
    return gainMeters;
  }

  @JsonProperty("min_meters")
  public Optional<Integer> getMinMeters() {
    return minMeters;
  }

  @JsonProperty("max_meters")
  public Optional<Integer> getMaxMeters() {
    return maxMeters;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Elevation && equalTo((Elevation) other);
  }

  private boolean equalTo(Elevation other) {
    return gainMeters.equals(other.gainMeters) && minMeters.equals(other.minMeters) && maxMeters.equals(other.maxMeters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.gainMeters, this.minMeters, this.maxMeters);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> gainMeters = Optional.empty();

    private Optional<Integer> minMeters = Optional.empty();

    private Optional<Integer> maxMeters = Optional.empty();

    private Builder() {
    }

    public Builder from(Elevation other) {
      gainMeters(other.getGainMeters());
      minMeters(other.getMinMeters());
      maxMeters(other.getMaxMeters());
      return this;
    }

    @JsonSetter(
        value = "gain_meters",
        nulls = Nulls.SKIP
    )
    public Builder gainMeters(Optional<Integer> gainMeters) {
      this.gainMeters = gainMeters;
      return this;
    }

    public Builder gainMeters(Integer gainMeters) {
      this.gainMeters = Optional.of(gainMeters);
      return this;
    }

    @JsonSetter(
        value = "min_meters",
        nulls = Nulls.SKIP
    )
    public Builder minMeters(Optional<Integer> minMeters) {
      this.minMeters = minMeters;
      return this;
    }

    public Builder minMeters(Integer minMeters) {
      this.minMeters = Optional.of(minMeters);
      return this;
    }

    @JsonSetter(
        value = "max_meters",
        nulls = Nulls.SKIP
    )
    public Builder maxMeters(Optional<Integer> maxMeters) {
      this.maxMeters = maxMeters;
      return this;
    }

    public Builder maxMeters(Integer maxMeters) {
      this.maxMeters = Optional.of(maxMeters);
      return this;
    }

    public Elevation build() {
      return new Elevation(gainMeters, minMeters, maxMeters);
    }
  }
}
