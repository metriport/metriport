/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = HeartRate.Builder.class
)
public final class HeartRate {
  private final Optional<Integer> minBpm;

  private final Optional<Integer> maxBpm;

  private final Optional<Integer> avgBpm;

  private final Optional<Integer> restingBpm;

  private final Optional<List<Sample>> samplesBpm;

  private HeartRate(Optional<Integer> minBpm, Optional<Integer> maxBpm, Optional<Integer> avgBpm,
      Optional<Integer> restingBpm, Optional<List<Sample>> samplesBpm) {
    this.minBpm = minBpm;
    this.maxBpm = maxBpm;
    this.avgBpm = avgBpm;
    this.restingBpm = restingBpm;
    this.samplesBpm = samplesBpm;
  }

  @JsonProperty("min_bpm")
  public Optional<Integer> getMinBpm() {
    return minBpm;
  }

  @JsonProperty("max_bpm")
  public Optional<Integer> getMaxBpm() {
    return maxBpm;
  }

  @JsonProperty("avg_bpm")
  public Optional<Integer> getAvgBpm() {
    return avgBpm;
  }

  @JsonProperty("resting_bpm")
  public Optional<Integer> getRestingBpm() {
    return restingBpm;
  }

  @JsonProperty("samples_bpm")
  public Optional<List<Sample>> getSamplesBpm() {
    return samplesBpm;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof HeartRate && equalTo((HeartRate) other);
  }

  private boolean equalTo(HeartRate other) {
    return minBpm.equals(other.minBpm) && maxBpm.equals(other.maxBpm) && avgBpm.equals(other.avgBpm) && restingBpm.equals(other.restingBpm) && samplesBpm.equals(other.samplesBpm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.minBpm, this.maxBpm, this.avgBpm, this.restingBpm, this.samplesBpm);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> minBpm = Optional.empty();

    private Optional<Integer> maxBpm = Optional.empty();

    private Optional<Integer> avgBpm = Optional.empty();

    private Optional<Integer> restingBpm = Optional.empty();

    private Optional<List<Sample>> samplesBpm = Optional.empty();

    private Builder() {
    }

    public Builder from(HeartRate other) {
      minBpm(other.getMinBpm());
      maxBpm(other.getMaxBpm());
      avgBpm(other.getAvgBpm());
      restingBpm(other.getRestingBpm());
      samplesBpm(other.getSamplesBpm());
      return this;
    }

    @JsonSetter(
        value = "min_bpm",
        nulls = Nulls.SKIP
    )
    public Builder minBpm(Optional<Integer> minBpm) {
      this.minBpm = minBpm;
      return this;
    }

    public Builder minBpm(Integer minBpm) {
      this.minBpm = Optional.of(minBpm);
      return this;
    }

    @JsonSetter(
        value = "max_bpm",
        nulls = Nulls.SKIP
    )
    public Builder maxBpm(Optional<Integer> maxBpm) {
      this.maxBpm = maxBpm;
      return this;
    }

    public Builder maxBpm(Integer maxBpm) {
      this.maxBpm = Optional.of(maxBpm);
      return this;
    }

    @JsonSetter(
        value = "avg_bpm",
        nulls = Nulls.SKIP
    )
    public Builder avgBpm(Optional<Integer> avgBpm) {
      this.avgBpm = avgBpm;
      return this;
    }

    public Builder avgBpm(Integer avgBpm) {
      this.avgBpm = Optional.of(avgBpm);
      return this;
    }

    @JsonSetter(
        value = "resting_bpm",
        nulls = Nulls.SKIP
    )
    public Builder restingBpm(Optional<Integer> restingBpm) {
      this.restingBpm = restingBpm;
      return this;
    }

    public Builder restingBpm(Integer restingBpm) {
      this.restingBpm = Optional.of(restingBpm);
      return this;
    }

    @JsonSetter(
        value = "samples_bpm",
        nulls = Nulls.SKIP
    )
    public Builder samplesBpm(Optional<List<Sample>> samplesBpm) {
      this.samplesBpm = samplesBpm;
      return this;
    }

    public Builder samplesBpm(List<Sample> samplesBpm) {
      this.samplesBpm = Optional.of(samplesBpm);
      return this;
    }

    public HeartRate build() {
      return new HeartRate(minBpm, maxBpm, avgBpm, restingBpm, samplesBpm);
    }
  }
}
