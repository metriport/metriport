/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Food.Builder.class
)
public final class Food {
  private final Optional<String> name;

  private final Optional<String> brand;

  private final Optional<Double> amount;

  private final Optional<String> unit;

  private final Optional<NutritionFacts> nutritionFacts;

  private Food(Optional<String> name, Optional<String> brand, Optional<Double> amount,
      Optional<String> unit, Optional<NutritionFacts> nutritionFacts) {
    this.name = name;
    this.brand = brand;
    this.amount = amount;
    this.unit = unit;
    this.nutritionFacts = nutritionFacts;
  }

  @JsonProperty("name")
  public Optional<String> getName() {
    return name;
  }

  @JsonProperty("brand")
  public Optional<String> getBrand() {
    return brand;
  }

  @JsonProperty("amount")
  public Optional<Double> getAmount() {
    return amount;
  }

  @JsonProperty("unit")
  public Optional<String> getUnit() {
    return unit;
  }

  @JsonProperty("nutrition_facts")
  public Optional<NutritionFacts> getNutritionFacts() {
    return nutritionFacts;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Food && equalTo((Food) other);
  }

  private boolean equalTo(Food other) {
    return name.equals(other.name) && brand.equals(other.brand) && amount.equals(other.amount) && unit.equals(other.unit) && nutritionFacts.equals(other.nutritionFacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.name, this.brand, this.amount, this.unit, this.nutritionFacts);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> name = Optional.empty();

    private Optional<String> brand = Optional.empty();

    private Optional<Double> amount = Optional.empty();

    private Optional<String> unit = Optional.empty();

    private Optional<NutritionFacts> nutritionFacts = Optional.empty();

    private Builder() {
    }

    public Builder from(Food other) {
      name(other.getName());
      brand(other.getBrand());
      amount(other.getAmount());
      unit(other.getUnit());
      nutritionFacts(other.getNutritionFacts());
      return this;
    }

    @JsonSetter(
        value = "name",
        nulls = Nulls.SKIP
    )
    public Builder name(Optional<String> name) {
      this.name = name;
      return this;
    }

    public Builder name(String name) {
      this.name = Optional.of(name);
      return this;
    }

    @JsonSetter(
        value = "brand",
        nulls = Nulls.SKIP
    )
    public Builder brand(Optional<String> brand) {
      this.brand = brand;
      return this;
    }

    public Builder brand(String brand) {
      this.brand = Optional.of(brand);
      return this;
    }

    @JsonSetter(
        value = "amount",
        nulls = Nulls.SKIP
    )
    public Builder amount(Optional<Double> amount) {
      this.amount = amount;
      return this;
    }

    public Builder amount(Double amount) {
      this.amount = Optional.of(amount);
      return this;
    }

    @JsonSetter(
        value = "unit",
        nulls = Nulls.SKIP
    )
    public Builder unit(Optional<String> unit) {
      this.unit = unit;
      return this;
    }

    public Builder unit(String unit) {
      this.unit = Optional.of(unit);
      return this;
    }

    @JsonSetter(
        value = "nutrition_facts",
        nulls = Nulls.SKIP
    )
    public Builder nutritionFacts(Optional<NutritionFacts> nutritionFacts) {
      this.nutritionFacts = nutritionFacts;
      return this;
    }

    public Builder nutritionFacts(NutritionFacts nutritionFacts) {
      this.nutritionFacts = Optional.of(nutritionFacts);
      return this;
    }

    public Food build() {
      return new Food(name, brand, amount, unit, nutritionFacts);
    }
  }
}
