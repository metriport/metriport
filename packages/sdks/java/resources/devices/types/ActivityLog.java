/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = ActivityLog.Builder.class
)
public final class ActivityLog {
  private final Metadata metadata;

  private final Optional<String> name;

  private final Optional<String> type;

  private final Optional<String> startTime;

  private final Optional<String> endTime;

  private final Optional<ActivityDurations> durations;

  private final Optional<EnergyExpenditure> energyExpenditure;

  private final Optional<ActivityMovement> movement;

  private final Optional<Location> location;

  private final Optional<Biometrics> biometrics;

  private ActivityLog(Metadata metadata, Optional<String> name, Optional<String> type,
      Optional<String> startTime, Optional<String> endTime, Optional<ActivityDurations> durations,
      Optional<EnergyExpenditure> energyExpenditure, Optional<ActivityMovement> movement,
      Optional<Location> location, Optional<Biometrics> biometrics) {
    this.metadata = metadata;
    this.name = name;
    this.type = type;
    this.startTime = startTime;
    this.endTime = endTime;
    this.durations = durations;
    this.energyExpenditure = energyExpenditure;
    this.movement = movement;
    this.location = location;
    this.biometrics = biometrics;
  }

  @JsonProperty("metadata")
  public Metadata getMetadata() {
    return metadata;
  }

  @JsonProperty("name")
  public Optional<String> getName() {
    return name;
  }

  @JsonProperty("type")
  public Optional<String> getType() {
    return type;
  }

  @JsonProperty("start_time")
  public Optional<String> getStartTime() {
    return startTime;
  }

  @JsonProperty("end_time")
  public Optional<String> getEndTime() {
    return endTime;
  }

  @JsonProperty("durations")
  public Optional<ActivityDurations> getDurations() {
    return durations;
  }

  @JsonProperty("energy_expenditure")
  public Optional<EnergyExpenditure> getEnergyExpenditure() {
    return energyExpenditure;
  }

  @JsonProperty("movement")
  public Optional<ActivityMovement> getMovement() {
    return movement;
  }

  @JsonProperty("location")
  public Optional<Location> getLocation() {
    return location;
  }

  @JsonProperty("biometrics")
  public Optional<Biometrics> getBiometrics() {
    return biometrics;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ActivityLog && equalTo((ActivityLog) other);
  }

  private boolean equalTo(ActivityLog other) {
    return metadata.equals(other.metadata) && name.equals(other.name) && type.equals(other.type) && startTime.equals(other.startTime) && endTime.equals(other.endTime) && durations.equals(other.durations) && energyExpenditure.equals(other.energyExpenditure) && movement.equals(other.movement) && location.equals(other.location) && biometrics.equals(other.biometrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.metadata, this.name, this.type, this.startTime, this.endTime, this.durations, this.energyExpenditure, this.movement, this.location, this.biometrics);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static MetadataStage builder() {
    return new Builder();
  }

  public interface MetadataStage {
    _FinalStage metadata(Metadata metadata);

    Builder from(ActivityLog other);
  }

  public interface _FinalStage {
    ActivityLog build();

    _FinalStage name(Optional<String> name);

    _FinalStage name(String name);

    _FinalStage type(Optional<String> type);

    _FinalStage type(String type);

    _FinalStage startTime(Optional<String> startTime);

    _FinalStage startTime(String startTime);

    _FinalStage endTime(Optional<String> endTime);

    _FinalStage endTime(String endTime);

    _FinalStage durations(Optional<ActivityDurations> durations);

    _FinalStage durations(ActivityDurations durations);

    _FinalStage energyExpenditure(Optional<EnergyExpenditure> energyExpenditure);

    _FinalStage energyExpenditure(EnergyExpenditure energyExpenditure);

    _FinalStage movement(Optional<ActivityMovement> movement);

    _FinalStage movement(ActivityMovement movement);

    _FinalStage location(Optional<Location> location);

    _FinalStage location(Location location);

    _FinalStage biometrics(Optional<Biometrics> biometrics);

    _FinalStage biometrics(Biometrics biometrics);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements MetadataStage, _FinalStage {
    private Metadata metadata;

    private Optional<Biometrics> biometrics = Optional.empty();

    private Optional<Location> location = Optional.empty();

    private Optional<ActivityMovement> movement = Optional.empty();

    private Optional<EnergyExpenditure> energyExpenditure = Optional.empty();

    private Optional<ActivityDurations> durations = Optional.empty();

    private Optional<String> endTime = Optional.empty();

    private Optional<String> startTime = Optional.empty();

    private Optional<String> type = Optional.empty();

    private Optional<String> name = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(ActivityLog other) {
      metadata(other.getMetadata());
      name(other.getName());
      type(other.getType());
      startTime(other.getStartTime());
      endTime(other.getEndTime());
      durations(other.getDurations());
      energyExpenditure(other.getEnergyExpenditure());
      movement(other.getMovement());
      location(other.getLocation());
      biometrics(other.getBiometrics());
      return this;
    }

    @Override
    @JsonSetter("metadata")
    public _FinalStage metadata(Metadata metadata) {
      this.metadata = metadata;
      return this;
    }

    @Override
    public _FinalStage biometrics(Biometrics biometrics) {
      this.biometrics = Optional.of(biometrics);
      return this;
    }

    @Override
    @JsonSetter(
        value = "biometrics",
        nulls = Nulls.SKIP
    )
    public _FinalStage biometrics(Optional<Biometrics> biometrics) {
      this.biometrics = biometrics;
      return this;
    }

    @Override
    public _FinalStage location(Location location) {
      this.location = Optional.of(location);
      return this;
    }

    @Override
    @JsonSetter(
        value = "location",
        nulls = Nulls.SKIP
    )
    public _FinalStage location(Optional<Location> location) {
      this.location = location;
      return this;
    }

    @Override
    public _FinalStage movement(ActivityMovement movement) {
      this.movement = Optional.of(movement);
      return this;
    }

    @Override
    @JsonSetter(
        value = "movement",
        nulls = Nulls.SKIP
    )
    public _FinalStage movement(Optional<ActivityMovement> movement) {
      this.movement = movement;
      return this;
    }

    @Override
    public _FinalStage energyExpenditure(EnergyExpenditure energyExpenditure) {
      this.energyExpenditure = Optional.of(energyExpenditure);
      return this;
    }

    @Override
    @JsonSetter(
        value = "energy_expenditure",
        nulls = Nulls.SKIP
    )
    public _FinalStage energyExpenditure(Optional<EnergyExpenditure> energyExpenditure) {
      this.energyExpenditure = energyExpenditure;
      return this;
    }

    @Override
    public _FinalStage durations(ActivityDurations durations) {
      this.durations = Optional.of(durations);
      return this;
    }

    @Override
    @JsonSetter(
        value = "durations",
        nulls = Nulls.SKIP
    )
    public _FinalStage durations(Optional<ActivityDurations> durations) {
      this.durations = durations;
      return this;
    }

    @Override
    public _FinalStage endTime(String endTime) {
      this.endTime = Optional.of(endTime);
      return this;
    }

    @Override
    @JsonSetter(
        value = "end_time",
        nulls = Nulls.SKIP
    )
    public _FinalStage endTime(Optional<String> endTime) {
      this.endTime = endTime;
      return this;
    }

    @Override
    public _FinalStage startTime(String startTime) {
      this.startTime = Optional.of(startTime);
      return this;
    }

    @Override
    @JsonSetter(
        value = "start_time",
        nulls = Nulls.SKIP
    )
    public _FinalStage startTime(Optional<String> startTime) {
      this.startTime = startTime;
      return this;
    }

    @Override
    public _FinalStage type(String type) {
      this.type = Optional.of(type);
      return this;
    }

    @Override
    @JsonSetter(
        value = "type",
        nulls = Nulls.SKIP
    )
    public _FinalStage type(Optional<String> type) {
      this.type = type;
      return this;
    }

    @Override
    public _FinalStage name(String name) {
      this.name = Optional.of(name);
      return this;
    }

    @Override
    @JsonSetter(
        value = "name",
        nulls = Nulls.SKIP
    )
    public _FinalStage name(Optional<String> name) {
      this.name = name;
      return this;
    }

    @Override
    public ActivityLog build() {
      return new ActivityLog(metadata, name, type, startTime, endTime, durations, energyExpenditure, movement, location, biometrics);
    }
  }
}
