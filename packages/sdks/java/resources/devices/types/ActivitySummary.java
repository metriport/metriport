/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = ActivitySummary.Builder.class
)
public final class ActivitySummary {
  private final Optional<ActivityDurations> durations;

  private final Optional<EnergyExpenditure> energyExpenditure;

  private final Optional<Biometrics> biometrics;

  private ActivitySummary(Optional<ActivityDurations> durations,
      Optional<EnergyExpenditure> energyExpenditure, Optional<Biometrics> biometrics) {
    this.durations = durations;
    this.energyExpenditure = energyExpenditure;
    this.biometrics = biometrics;
  }

  @JsonProperty("durations")
  public Optional<ActivityDurations> getDurations() {
    return durations;
  }

  @JsonProperty("energy_expenditure")
  public Optional<EnergyExpenditure> getEnergyExpenditure() {
    return energyExpenditure;
  }

  @JsonProperty("biometrics")
  public Optional<Biometrics> getBiometrics() {
    return biometrics;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ActivitySummary && equalTo((ActivitySummary) other);
  }

  private boolean equalTo(ActivitySummary other) {
    return durations.equals(other.durations) && energyExpenditure.equals(other.energyExpenditure) && biometrics.equals(other.biometrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.durations, this.energyExpenditure, this.biometrics);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<ActivityDurations> durations = Optional.empty();

    private Optional<EnergyExpenditure> energyExpenditure = Optional.empty();

    private Optional<Biometrics> biometrics = Optional.empty();

    private Builder() {
    }

    public Builder from(ActivitySummary other) {
      durations(other.getDurations());
      energyExpenditure(other.getEnergyExpenditure());
      biometrics(other.getBiometrics());
      return this;
    }

    @JsonSetter(
        value = "durations",
        nulls = Nulls.SKIP
    )
    public Builder durations(Optional<ActivityDurations> durations) {
      this.durations = durations;
      return this;
    }

    public Builder durations(ActivityDurations durations) {
      this.durations = Optional.of(durations);
      return this;
    }

    @JsonSetter(
        value = "energy_expenditure",
        nulls = Nulls.SKIP
    )
    public Builder energyExpenditure(Optional<EnergyExpenditure> energyExpenditure) {
      this.energyExpenditure = energyExpenditure;
      return this;
    }

    public Builder energyExpenditure(EnergyExpenditure energyExpenditure) {
      this.energyExpenditure = Optional.of(energyExpenditure);
      return this;
    }

    @JsonSetter(
        value = "biometrics",
        nulls = Nulls.SKIP
    )
    public Builder biometrics(Optional<Biometrics> biometrics) {
      this.biometrics = biometrics;
      return this;
    }

    public Builder biometrics(Biometrics biometrics) {
      this.biometrics = Optional.of(biometrics);
      return this;
    }

    public ActivitySummary build() {
      return new ActivitySummary(durations, energyExpenditure, biometrics);
    }
  }
}
