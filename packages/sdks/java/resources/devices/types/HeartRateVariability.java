/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = HeartRateVariability.Builder.class
)
public final class HeartRateVariability {
  private final Optional<HeartRateVariabilityMeasurement> rmssd;

  private final Optional<HeartRateVariabilityMeasurement> sdnn;

  private HeartRateVariability(Optional<HeartRateVariabilityMeasurement> rmssd,
      Optional<HeartRateVariabilityMeasurement> sdnn) {
    this.rmssd = rmssd;
    this.sdnn = sdnn;
  }

  @JsonProperty("rmssd")
  public Optional<HeartRateVariabilityMeasurement> getRmssd() {
    return rmssd;
  }

  @JsonProperty("sdnn")
  public Optional<HeartRateVariabilityMeasurement> getSdnn() {
    return sdnn;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof HeartRateVariability && equalTo((HeartRateVariability) other);
  }

  private boolean equalTo(HeartRateVariability other) {
    return rmssd.equals(other.rmssd) && sdnn.equals(other.sdnn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.rmssd, this.sdnn);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<HeartRateVariabilityMeasurement> rmssd = Optional.empty();

    private Optional<HeartRateVariabilityMeasurement> sdnn = Optional.empty();

    private Builder() {
    }

    public Builder from(HeartRateVariability other) {
      rmssd(other.getRmssd());
      sdnn(other.getSdnn());
      return this;
    }

    @JsonSetter(
        value = "rmssd",
        nulls = Nulls.SKIP
    )
    public Builder rmssd(Optional<HeartRateVariabilityMeasurement> rmssd) {
      this.rmssd = rmssd;
      return this;
    }

    public Builder rmssd(HeartRateVariabilityMeasurement rmssd) {
      this.rmssd = Optional.of(rmssd);
      return this;
    }

    @JsonSetter(
        value = "sdnn",
        nulls = Nulls.SKIP
    )
    public Builder sdnn(Optional<HeartRateVariabilityMeasurement> sdnn) {
      this.sdnn = sdnn;
      return this;
    }

    public Builder sdnn(HeartRateVariabilityMeasurement sdnn) {
      this.sdnn = Optional.of(sdnn);
      return this;
    }

    public HeartRateVariability build() {
      return new HeartRateVariability(rmssd, sdnn);
    }
  }
}
