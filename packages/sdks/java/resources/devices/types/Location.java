/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Location.Builder.class
)
public final class Location {
  private final Optional<LatLon> startLatLonDeg;

  private final Optional<LatLon> endLatLonDeg;

  private final Optional<String> polystring;

  private final Optional<String> city;

  private final Optional<String> country;

  private final Optional<String> region;

  private Location(Optional<LatLon> startLatLonDeg, Optional<LatLon> endLatLonDeg,
      Optional<String> polystring, Optional<String> city, Optional<String> country,
      Optional<String> region) {
    this.startLatLonDeg = startLatLonDeg;
    this.endLatLonDeg = endLatLonDeg;
    this.polystring = polystring;
    this.city = city;
    this.country = country;
    this.region = region;
  }

  @JsonProperty("start_lat_lon_deg")
  public Optional<LatLon> getStartLatLonDeg() {
    return startLatLonDeg;
  }

  @JsonProperty("end_lat_lon_deg")
  public Optional<LatLon> getEndLatLonDeg() {
    return endLatLonDeg;
  }

  @JsonProperty("polystring")
  public Optional<String> getPolystring() {
    return polystring;
  }

  @JsonProperty("city")
  public Optional<String> getCity() {
    return city;
  }

  @JsonProperty("country")
  public Optional<String> getCountry() {
    return country;
  }

  @JsonProperty("region")
  public Optional<String> getRegion() {
    return region;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Location && equalTo((Location) other);
  }

  private boolean equalTo(Location other) {
    return startLatLonDeg.equals(other.startLatLonDeg) && endLatLonDeg.equals(other.endLatLonDeg) && polystring.equals(other.polystring) && city.equals(other.city) && country.equals(other.country) && region.equals(other.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.startLatLonDeg, this.endLatLonDeg, this.polystring, this.city, this.country, this.region);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<LatLon> startLatLonDeg = Optional.empty();

    private Optional<LatLon> endLatLonDeg = Optional.empty();

    private Optional<String> polystring = Optional.empty();

    private Optional<String> city = Optional.empty();

    private Optional<String> country = Optional.empty();

    private Optional<String> region = Optional.empty();

    private Builder() {
    }

    public Builder from(Location other) {
      startLatLonDeg(other.getStartLatLonDeg());
      endLatLonDeg(other.getEndLatLonDeg());
      polystring(other.getPolystring());
      city(other.getCity());
      country(other.getCountry());
      region(other.getRegion());
      return this;
    }

    @JsonSetter(
        value = "start_lat_lon_deg",
        nulls = Nulls.SKIP
    )
    public Builder startLatLonDeg(Optional<LatLon> startLatLonDeg) {
      this.startLatLonDeg = startLatLonDeg;
      return this;
    }

    public Builder startLatLonDeg(LatLon startLatLonDeg) {
      this.startLatLonDeg = Optional.of(startLatLonDeg);
      return this;
    }

    @JsonSetter(
        value = "end_lat_lon_deg",
        nulls = Nulls.SKIP
    )
    public Builder endLatLonDeg(Optional<LatLon> endLatLonDeg) {
      this.endLatLonDeg = endLatLonDeg;
      return this;
    }

    public Builder endLatLonDeg(LatLon endLatLonDeg) {
      this.endLatLonDeg = Optional.of(endLatLonDeg);
      return this;
    }

    @JsonSetter(
        value = "polystring",
        nulls = Nulls.SKIP
    )
    public Builder polystring(Optional<String> polystring) {
      this.polystring = polystring;
      return this;
    }

    public Builder polystring(String polystring) {
      this.polystring = Optional.of(polystring);
      return this;
    }

    @JsonSetter(
        value = "city",
        nulls = Nulls.SKIP
    )
    public Builder city(Optional<String> city) {
      this.city = city;
      return this;
    }

    public Builder city(String city) {
      this.city = Optional.of(city);
      return this;
    }

    @JsonSetter(
        value = "country",
        nulls = Nulls.SKIP
    )
    public Builder country(Optional<String> country) {
      this.country = country;
      return this;
    }

    public Builder country(String country) {
      this.country = Optional.of(country);
      return this;
    }

    @JsonSetter(
        value = "region",
        nulls = Nulls.SKIP
    )
    public Builder region(Optional<String> region) {
      this.region = region;
      return this;
    }

    public Builder region(String region) {
      this.region = Optional.of(region);
      return this;
    }

    public Location build() {
      return new Location(startLatLonDeg, endLatLonDeg, polystring, city, country, region);
    }
  }
}
