/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Respiration.Builder.class
)
public final class Respiration {
  private final Optional<Integer> vo2Max;

  private final Optional<BloodOxygen> spo2;

  private final Optional<Integer> avgBreathsPerMinute;

  private final Optional<Integer> peakFlowLMin;

  private final Optional<Integer> forcedVolumeL;

  private final Optional<List<Sample>> samplesBreathsPerMinute;

  private Respiration(Optional<Integer> vo2Max, Optional<BloodOxygen> spo2,
      Optional<Integer> avgBreathsPerMinute, Optional<Integer> peakFlowLMin,
      Optional<Integer> forcedVolumeL, Optional<List<Sample>> samplesBreathsPerMinute) {
    this.vo2Max = vo2Max;
    this.spo2 = spo2;
    this.avgBreathsPerMinute = avgBreathsPerMinute;
    this.peakFlowLMin = peakFlowLMin;
    this.forcedVolumeL = forcedVolumeL;
    this.samplesBreathsPerMinute = samplesBreathsPerMinute;
  }

  @JsonProperty("vo2_max")
  public Optional<Integer> getVo2Max() {
    return vo2Max;
  }

  @JsonProperty("spo2")
  public Optional<BloodOxygen> getSpo2() {
    return spo2;
  }

  @JsonProperty("avg_breaths_per_minute")
  public Optional<Integer> getAvgBreathsPerMinute() {
    return avgBreathsPerMinute;
  }

  @JsonProperty("peak_flow_L_min")
  public Optional<Integer> getPeakFlowLMin() {
    return peakFlowLMin;
  }

  @JsonProperty("forced_volume_L")
  public Optional<Integer> getForcedVolumeL() {
    return forcedVolumeL;
  }

  @JsonProperty("samples_breaths_per_minute")
  public Optional<List<Sample>> getSamplesBreathsPerMinute() {
    return samplesBreathsPerMinute;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Respiration && equalTo((Respiration) other);
  }

  private boolean equalTo(Respiration other) {
    return vo2Max.equals(other.vo2Max) && spo2.equals(other.spo2) && avgBreathsPerMinute.equals(other.avgBreathsPerMinute) && peakFlowLMin.equals(other.peakFlowLMin) && forcedVolumeL.equals(other.forcedVolumeL) && samplesBreathsPerMinute.equals(other.samplesBreathsPerMinute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.vo2Max, this.spo2, this.avgBreathsPerMinute, this.peakFlowLMin, this.forcedVolumeL, this.samplesBreathsPerMinute);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> vo2Max = Optional.empty();

    private Optional<BloodOxygen> spo2 = Optional.empty();

    private Optional<Integer> avgBreathsPerMinute = Optional.empty();

    private Optional<Integer> peakFlowLMin = Optional.empty();

    private Optional<Integer> forcedVolumeL = Optional.empty();

    private Optional<List<Sample>> samplesBreathsPerMinute = Optional.empty();

    private Builder() {
    }

    public Builder from(Respiration other) {
      vo2Max(other.getVo2Max());
      spo2(other.getSpo2());
      avgBreathsPerMinute(other.getAvgBreathsPerMinute());
      peakFlowLMin(other.getPeakFlowLMin());
      forcedVolumeL(other.getForcedVolumeL());
      samplesBreathsPerMinute(other.getSamplesBreathsPerMinute());
      return this;
    }

    @JsonSetter(
        value = "vo2_max",
        nulls = Nulls.SKIP
    )
    public Builder vo2Max(Optional<Integer> vo2Max) {
      this.vo2Max = vo2Max;
      return this;
    }

    public Builder vo2Max(Integer vo2Max) {
      this.vo2Max = Optional.of(vo2Max);
      return this;
    }

    @JsonSetter(
        value = "spo2",
        nulls = Nulls.SKIP
    )
    public Builder spo2(Optional<BloodOxygen> spo2) {
      this.spo2 = spo2;
      return this;
    }

    public Builder spo2(BloodOxygen spo2) {
      this.spo2 = Optional.of(spo2);
      return this;
    }

    @JsonSetter(
        value = "avg_breaths_per_minute",
        nulls = Nulls.SKIP
    )
    public Builder avgBreathsPerMinute(Optional<Integer> avgBreathsPerMinute) {
      this.avgBreathsPerMinute = avgBreathsPerMinute;
      return this;
    }

    public Builder avgBreathsPerMinute(Integer avgBreathsPerMinute) {
      this.avgBreathsPerMinute = Optional.of(avgBreathsPerMinute);
      return this;
    }

    @JsonSetter(
        value = "peak_flow_L_min",
        nulls = Nulls.SKIP
    )
    public Builder peakFlowLMin(Optional<Integer> peakFlowLMin) {
      this.peakFlowLMin = peakFlowLMin;
      return this;
    }

    public Builder peakFlowLMin(Integer peakFlowLMin) {
      this.peakFlowLMin = Optional.of(peakFlowLMin);
      return this;
    }

    @JsonSetter(
        value = "forced_volume_L",
        nulls = Nulls.SKIP
    )
    public Builder forcedVolumeL(Optional<Integer> forcedVolumeL) {
      this.forcedVolumeL = forcedVolumeL;
      return this;
    }

    public Builder forcedVolumeL(Integer forcedVolumeL) {
      this.forcedVolumeL = Optional.of(forcedVolumeL);
      return this;
    }

    @JsonSetter(
        value = "samples_breaths_per_minute",
        nulls = Nulls.SKIP
    )
    public Builder samplesBreathsPerMinute(Optional<List<Sample>> samplesBreathsPerMinute) {
      this.samplesBreathsPerMinute = samplesBreathsPerMinute;
      return this;
    }

    public Builder samplesBreathsPerMinute(List<Sample> samplesBreathsPerMinute) {
      this.samplesBreathsPerMinute = Optional.of(samplesBreathsPerMinute);
      return this;
    }

    public Respiration build() {
      return new Respiration(vo2Max, spo2, avgBreathsPerMinute, peakFlowLMin, forcedVolumeL, samplesBreathsPerMinute);
    }
  }
}
