/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Nutrition.Builder.class
)
public final class Nutrition implements IMetriportData {
  private final Metadata metadata;

  private final Optional<NutritionFacts> summary;

  private final Optional<List<Food>> foods;

  private Nutrition(Metadata metadata, Optional<NutritionFacts> summary,
      Optional<List<Food>> foods) {
    this.metadata = metadata;
    this.summary = summary;
    this.foods = foods;
  }

  @JsonProperty("metadata")
  @Override
  public Metadata getMetadata() {
    return metadata;
  }

  @JsonProperty("summary")
  public Optional<NutritionFacts> getSummary() {
    return summary;
  }

  @JsonProperty("foods")
  public Optional<List<Food>> getFoods() {
    return foods;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Nutrition && equalTo((Nutrition) other);
  }

  private boolean equalTo(Nutrition other) {
    return metadata.equals(other.metadata) && summary.equals(other.summary) && foods.equals(other.foods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.metadata, this.summary, this.foods);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static MetadataStage builder() {
    return new Builder();
  }

  public interface MetadataStage {
    _FinalStage metadata(Metadata metadata);

    Builder from(Nutrition other);
  }

  public interface _FinalStage {
    Nutrition build();

    _FinalStage summary(Optional<NutritionFacts> summary);

    _FinalStage summary(NutritionFacts summary);

    _FinalStage foods(Optional<List<Food>> foods);

    _FinalStage foods(List<Food> foods);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements MetadataStage, _FinalStage {
    private Metadata metadata;

    private Optional<List<Food>> foods = Optional.empty();

    private Optional<NutritionFacts> summary = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(Nutrition other) {
      metadata(other.getMetadata());
      summary(other.getSummary());
      foods(other.getFoods());
      return this;
    }

    @Override
    @JsonSetter("metadata")
    public _FinalStage metadata(Metadata metadata) {
      this.metadata = metadata;
      return this;
    }

    @Override
    public _FinalStage foods(List<Food> foods) {
      this.foods = Optional.of(foods);
      return this;
    }

    @Override
    @JsonSetter(
        value = "foods",
        nulls = Nulls.SKIP
    )
    public _FinalStage foods(Optional<List<Food>> foods) {
      this.foods = foods;
      return this;
    }

    @Override
    public _FinalStage summary(NutritionFacts summary) {
      this.summary = Optional.of(summary);
      return this;
    }

    @Override
    @JsonSetter(
        value = "summary",
        nulls = Nulls.SKIP
    )
    public _FinalStage summary(Optional<NutritionFacts> summary) {
      this.summary = summary;
      return this;
    }

    @Override
    public Nutrition build() {
      return new Nutrition(metadata, summary, foods);
    }
  }
}
