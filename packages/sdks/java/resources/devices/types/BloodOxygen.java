/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = BloodOxygen.Builder.class
)
public final class BloodOxygen {
  private final Optional<Double> minPct;

  private final Optional<Double> maxPct;

  private final Optional<Double> avgPct;

  private final Optional<Double> stdDev;

  private BloodOxygen(Optional<Double> minPct, Optional<Double> maxPct, Optional<Double> avgPct,
      Optional<Double> stdDev) {
    this.minPct = minPct;
    this.maxPct = maxPct;
    this.avgPct = avgPct;
    this.stdDev = stdDev;
  }

  @JsonProperty("min_pct")
  public Optional<Double> getMinPct() {
    return minPct;
  }

  @JsonProperty("max_pct")
  public Optional<Double> getMaxPct() {
    return maxPct;
  }

  @JsonProperty("avg_pct")
  public Optional<Double> getAvgPct() {
    return avgPct;
  }

  @JsonProperty("std_dev")
  public Optional<Double> getStdDev() {
    return stdDev;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BloodOxygen && equalTo((BloodOxygen) other);
  }

  private boolean equalTo(BloodOxygen other) {
    return minPct.equals(other.minPct) && maxPct.equals(other.maxPct) && avgPct.equals(other.avgPct) && stdDev.equals(other.stdDev);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.minPct, this.maxPct, this.avgPct, this.stdDev);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Double> minPct = Optional.empty();

    private Optional<Double> maxPct = Optional.empty();

    private Optional<Double> avgPct = Optional.empty();

    private Optional<Double> stdDev = Optional.empty();

    private Builder() {
    }

    public Builder from(BloodOxygen other) {
      minPct(other.getMinPct());
      maxPct(other.getMaxPct());
      avgPct(other.getAvgPct());
      stdDev(other.getStdDev());
      return this;
    }

    @JsonSetter(
        value = "min_pct",
        nulls = Nulls.SKIP
    )
    public Builder minPct(Optional<Double> minPct) {
      this.minPct = minPct;
      return this;
    }

    public Builder minPct(Double minPct) {
      this.minPct = Optional.of(minPct);
      return this;
    }

    @JsonSetter(
        value = "max_pct",
        nulls = Nulls.SKIP
    )
    public Builder maxPct(Optional<Double> maxPct) {
      this.maxPct = maxPct;
      return this;
    }

    public Builder maxPct(Double maxPct) {
      this.maxPct = Optional.of(maxPct);
      return this;
    }

    @JsonSetter(
        value = "avg_pct",
        nulls = Nulls.SKIP
    )
    public Builder avgPct(Optional<Double> avgPct) {
      this.avgPct = avgPct;
      return this;
    }

    public Builder avgPct(Double avgPct) {
      this.avgPct = Optional.of(avgPct);
      return this;
    }

    @JsonSetter(
        value = "std_dev",
        nulls = Nulls.SKIP
    )
    public Builder stdDev(Optional<Double> stdDev) {
      this.stdDev = stdDev;
      return this;
    }

    public Builder stdDev(Double stdDev) {
      this.stdDev = Optional.of(stdDev);
      return this;
    }

    public BloodOxygen build() {
      return new BloodOxygen(minPct, maxPct, avgPct, stdDev);
    }
  }
}
