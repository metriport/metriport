/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = ConnectedUserInfo.Builder.class
)
public final class ConnectedUserInfo {
  private final String metriportUserId;

  private final String appUserId;

  private final Optional<List<String>> connectedProviders;

  private ConnectedUserInfo(String metriportUserId, String appUserId,
      Optional<List<String>> connectedProviders) {
    this.metriportUserId = metriportUserId;
    this.appUserId = appUserId;
    this.connectedProviders = connectedProviders;
  }

  @JsonProperty("metriportUserId")
  public String getMetriportUserId() {
    return metriportUserId;
  }

  @JsonProperty("appUserId")
  public String getAppUserId() {
    return appUserId;
  }

  @JsonProperty("connectedProviders")
  public Optional<List<String>> getConnectedProviders() {
    return connectedProviders;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ConnectedUserInfo && equalTo((ConnectedUserInfo) other);
  }

  private boolean equalTo(ConnectedUserInfo other) {
    return metriportUserId.equals(other.metriportUserId) && appUserId.equals(other.appUserId) && connectedProviders.equals(other.connectedProviders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.metriportUserId, this.appUserId, this.connectedProviders);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static MetriportUserIdStage builder() {
    return new Builder();
  }

  public interface MetriportUserIdStage {
    AppUserIdStage metriportUserId(String metriportUserId);

    Builder from(ConnectedUserInfo other);
  }

  public interface AppUserIdStage {
    _FinalStage appUserId(String appUserId);
  }

  public interface _FinalStage {
    ConnectedUserInfo build();

    _FinalStage connectedProviders(Optional<List<String>> connectedProviders);

    _FinalStage connectedProviders(List<String> connectedProviders);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements MetriportUserIdStage, AppUserIdStage, _FinalStage {
    private String metriportUserId;

    private String appUserId;

    private Optional<List<String>> connectedProviders = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(ConnectedUserInfo other) {
      metriportUserId(other.getMetriportUserId());
      appUserId(other.getAppUserId());
      connectedProviders(other.getConnectedProviders());
      return this;
    }

    @Override
    @JsonSetter("metriportUserId")
    public AppUserIdStage metriportUserId(String metriportUserId) {
      this.metriportUserId = metriportUserId;
      return this;
    }

    @Override
    @JsonSetter("appUserId")
    public _FinalStage appUserId(String appUserId) {
      this.appUserId = appUserId;
      return this;
    }

    @Override
    public _FinalStage connectedProviders(List<String> connectedProviders) {
      this.connectedProviders = Optional.of(connectedProviders);
      return this;
    }

    @Override
    @JsonSetter(
        value = "connectedProviders",
        nulls = Nulls.SKIP
    )
    public _FinalStage connectedProviders(Optional<List<String>> connectedProviders) {
      this.connectedProviders = connectedProviders;
      return this;
    }

    @Override
    public ConnectedUserInfo build() {
      return new ConnectedUserInfo(metriportUserId, appUserId, connectedProviders);
    }
  }
}
