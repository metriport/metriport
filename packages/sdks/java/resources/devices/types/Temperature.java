/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Temperature.Builder.class
)
public final class Temperature {
  private final Optional<TemperatureMeasurement> core;

  private final Optional<Double> deltaCelcius;

  private final Optional<TemperatureMeasurement> skin;

  private Temperature(Optional<TemperatureMeasurement> core, Optional<Double> deltaCelcius,
      Optional<TemperatureMeasurement> skin) {
    this.core = core;
    this.deltaCelcius = deltaCelcius;
    this.skin = skin;
  }

  @JsonProperty("core")
  public Optional<TemperatureMeasurement> getCore() {
    return core;
  }

  @JsonProperty("delta_celcius")
  public Optional<Double> getDeltaCelcius() {
    return deltaCelcius;
  }

  @JsonProperty("skin")
  public Optional<TemperatureMeasurement> getSkin() {
    return skin;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Temperature && equalTo((Temperature) other);
  }

  private boolean equalTo(Temperature other) {
    return core.equals(other.core) && deltaCelcius.equals(other.deltaCelcius) && skin.equals(other.skin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.core, this.deltaCelcius, this.skin);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<TemperatureMeasurement> core = Optional.empty();

    private Optional<Double> deltaCelcius = Optional.empty();

    private Optional<TemperatureMeasurement> skin = Optional.empty();

    private Builder() {
    }

    public Builder from(Temperature other) {
      core(other.getCore());
      deltaCelcius(other.getDeltaCelcius());
      skin(other.getSkin());
      return this;
    }

    @JsonSetter(
        value = "core",
        nulls = Nulls.SKIP
    )
    public Builder core(Optional<TemperatureMeasurement> core) {
      this.core = core;
      return this;
    }

    public Builder core(TemperatureMeasurement core) {
      this.core = Optional.of(core);
      return this;
    }

    @JsonSetter(
        value = "delta_celcius",
        nulls = Nulls.SKIP
    )
    public Builder deltaCelcius(Optional<Double> deltaCelcius) {
      this.deltaCelcius = deltaCelcius;
      return this;
    }

    public Builder deltaCelcius(Double deltaCelcius) {
      this.deltaCelcius = Optional.of(deltaCelcius);
      return this;
    }

    @JsonSetter(
        value = "skin",
        nulls = Nulls.SKIP
    )
    public Builder skin(Optional<TemperatureMeasurement> skin) {
      this.skin = skin;
      return this;
    }

    public Builder skin(TemperatureMeasurement skin) {
      this.skin = Optional.of(skin);
      return this;
    }

    public Temperature build() {
      return new Temperature(core, deltaCelcius, skin);
    }
  }
}
