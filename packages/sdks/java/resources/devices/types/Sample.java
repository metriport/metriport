/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Sample.Builder.class
)
public final class Sample {
  private final String time;

  private final int value;

  private final Optional<Double> stdDev;

  private final Optional<SourceInfo> dataSource;

  private Sample(String time, int value, Optional<Double> stdDev, Optional<SourceInfo> dataSource) {
    this.time = time;
    this.value = value;
    this.stdDev = stdDev;
    this.dataSource = dataSource;
  }

  @JsonProperty("time")
  public String getTime() {
    return time;
  }

  @JsonProperty("value")
  public int getValue() {
    return value;
  }

  @JsonProperty("std_dev")
  public Optional<Double> getStdDev() {
    return stdDev;
  }

  @JsonProperty("data_source")
  public Optional<SourceInfo> getDataSource() {
    return dataSource;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Sample && equalTo((Sample) other);
  }

  private boolean equalTo(Sample other) {
    return time.equals(other.time) && value == other.value && stdDev.equals(other.stdDev) && dataSource.equals(other.dataSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.time, this.value, this.stdDev, this.dataSource);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TimeStage builder() {
    return new Builder();
  }

  public interface TimeStage {
    ValueStage time(String time);

    Builder from(Sample other);
  }

  public interface ValueStage {
    _FinalStage value(int value);
  }

  public interface _FinalStage {
    Sample build();

    _FinalStage stdDev(Optional<Double> stdDev);

    _FinalStage stdDev(Double stdDev);

    _FinalStage dataSource(Optional<SourceInfo> dataSource);

    _FinalStage dataSource(SourceInfo dataSource);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TimeStage, ValueStage, _FinalStage {
    private String time;

    private int value;

    private Optional<SourceInfo> dataSource = Optional.empty();

    private Optional<Double> stdDev = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(Sample other) {
      time(other.getTime());
      value(other.getValue());
      stdDev(other.getStdDev());
      dataSource(other.getDataSource());
      return this;
    }

    @Override
    @JsonSetter("time")
    public ValueStage time(String time) {
      this.time = time;
      return this;
    }

    @Override
    @JsonSetter("value")
    public _FinalStage value(int value) {
      this.value = value;
      return this;
    }

    @Override
    public _FinalStage dataSource(SourceInfo dataSource) {
      this.dataSource = Optional.of(dataSource);
      return this;
    }

    @Override
    @JsonSetter(
        value = "data_source",
        nulls = Nulls.SKIP
    )
    public _FinalStage dataSource(Optional<SourceInfo> dataSource) {
      this.dataSource = dataSource;
      return this;
    }

    @Override
    public _FinalStage stdDev(Double stdDev) {
      this.stdDev = Optional.of(stdDev);
      return this;
    }

    @Override
    @JsonSetter(
        value = "std_dev",
        nulls = Nulls.SKIP
    )
    public _FinalStage stdDev(Optional<Double> stdDev) {
      this.stdDev = stdDev;
      return this;
    }

    @Override
    public Sample build() {
      return new Sample(time, value, stdDev, dataSource);
    }
  }
}
