/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Aminos.Builder.class
)
public final class Aminos {
  private final Optional<Integer> alanineG;

  private final Optional<Integer> arginineG;

  private final Optional<Integer> asparagineG;

  private final Optional<Integer> asparticAcidG;

  private final Optional<Integer> cysteineG;

  private final Optional<Integer> glutamineG;

  private final Optional<Integer> glutamicAcidG;

  private final Optional<Integer> glycineG;

  private final Optional<Integer> histidineG;

  private final Optional<Integer> isoleucineG;

  private final Optional<Integer> leucineG;

  private final Optional<Integer> lysineG;

  private final Optional<Integer> methionineG;

  private final Optional<Integer> phenylalanineG;

  private final Optional<Integer> prolineG;

  private final Optional<Integer> serineG;

  private final Optional<Integer> threonineG;

  private final Optional<Integer> tryptophanG;

  private final Optional<Integer> tyrosineG;

  private final Optional<Integer> valineG;

  private Aminos(Optional<Integer> alanineG, Optional<Integer> arginineG,
      Optional<Integer> asparagineG, Optional<Integer> asparticAcidG, Optional<Integer> cysteineG,
      Optional<Integer> glutamineG, Optional<Integer> glutamicAcidG, Optional<Integer> glycineG,
      Optional<Integer> histidineG, Optional<Integer> isoleucineG, Optional<Integer> leucineG,
      Optional<Integer> lysineG, Optional<Integer> methionineG, Optional<Integer> phenylalanineG,
      Optional<Integer> prolineG, Optional<Integer> serineG, Optional<Integer> threonineG,
      Optional<Integer> tryptophanG, Optional<Integer> tyrosineG, Optional<Integer> valineG) {
    this.alanineG = alanineG;
    this.arginineG = arginineG;
    this.asparagineG = asparagineG;
    this.asparticAcidG = asparticAcidG;
    this.cysteineG = cysteineG;
    this.glutamineG = glutamineG;
    this.glutamicAcidG = glutamicAcidG;
    this.glycineG = glycineG;
    this.histidineG = histidineG;
    this.isoleucineG = isoleucineG;
    this.leucineG = leucineG;
    this.lysineG = lysineG;
    this.methionineG = methionineG;
    this.phenylalanineG = phenylalanineG;
    this.prolineG = prolineG;
    this.serineG = serineG;
    this.threonineG = threonineG;
    this.tryptophanG = tryptophanG;
    this.tyrosineG = tyrosineG;
    this.valineG = valineG;
  }

  @JsonProperty("alanine_g")
  public Optional<Integer> getAlanineG() {
    return alanineG;
  }

  @JsonProperty("arginine_g")
  public Optional<Integer> getArginineG() {
    return arginineG;
  }

  @JsonProperty("asparagine_g")
  public Optional<Integer> getAsparagineG() {
    return asparagineG;
  }

  @JsonProperty("aspartic_acid_g")
  public Optional<Integer> getAsparticAcidG() {
    return asparticAcidG;
  }

  @JsonProperty("cysteine_g")
  public Optional<Integer> getCysteineG() {
    return cysteineG;
  }

  @JsonProperty("glutamine_g")
  public Optional<Integer> getGlutamineG() {
    return glutamineG;
  }

  @JsonProperty("glutamic_acid_g")
  public Optional<Integer> getGlutamicAcidG() {
    return glutamicAcidG;
  }

  @JsonProperty("glycine_g")
  public Optional<Integer> getGlycineG() {
    return glycineG;
  }

  @JsonProperty("histidine_g")
  public Optional<Integer> getHistidineG() {
    return histidineG;
  }

  @JsonProperty("isoleucine_g")
  public Optional<Integer> getIsoleucineG() {
    return isoleucineG;
  }

  @JsonProperty("leucine_g")
  public Optional<Integer> getLeucineG() {
    return leucineG;
  }

  @JsonProperty("lysine_g")
  public Optional<Integer> getLysineG() {
    return lysineG;
  }

  @JsonProperty("methionine_g")
  public Optional<Integer> getMethionineG() {
    return methionineG;
  }

  @JsonProperty("phenylalanine_g")
  public Optional<Integer> getPhenylalanineG() {
    return phenylalanineG;
  }

  @JsonProperty("proline_g")
  public Optional<Integer> getProlineG() {
    return prolineG;
  }

  @JsonProperty("serine_g")
  public Optional<Integer> getSerineG() {
    return serineG;
  }

  @JsonProperty("threonine_g")
  public Optional<Integer> getThreonineG() {
    return threonineG;
  }

  @JsonProperty("tryptophan_g")
  public Optional<Integer> getTryptophanG() {
    return tryptophanG;
  }

  @JsonProperty("tyrosine_g")
  public Optional<Integer> getTyrosineG() {
    return tyrosineG;
  }

  @JsonProperty("valine_g")
  public Optional<Integer> getValineG() {
    return valineG;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Aminos && equalTo((Aminos) other);
  }

  private boolean equalTo(Aminos other) {
    return alanineG.equals(other.alanineG) && arginineG.equals(other.arginineG) && asparagineG.equals(other.asparagineG) && asparticAcidG.equals(other.asparticAcidG) && cysteineG.equals(other.cysteineG) && glutamineG.equals(other.glutamineG) && glutamicAcidG.equals(other.glutamicAcidG) && glycineG.equals(other.glycineG) && histidineG.equals(other.histidineG) && isoleucineG.equals(other.isoleucineG) && leucineG.equals(other.leucineG) && lysineG.equals(other.lysineG) && methionineG.equals(other.methionineG) && phenylalanineG.equals(other.phenylalanineG) && prolineG.equals(other.prolineG) && serineG.equals(other.serineG) && threonineG.equals(other.threonineG) && tryptophanG.equals(other.tryptophanG) && tyrosineG.equals(other.tyrosineG) && valineG.equals(other.valineG);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.alanineG, this.arginineG, this.asparagineG, this.asparticAcidG, this.cysteineG, this.glutamineG, this.glutamicAcidG, this.glycineG, this.histidineG, this.isoleucineG, this.leucineG, this.lysineG, this.methionineG, this.phenylalanineG, this.prolineG, this.serineG, this.threonineG, this.tryptophanG, this.tyrosineG, this.valineG);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> alanineG = Optional.empty();

    private Optional<Integer> arginineG = Optional.empty();

    private Optional<Integer> asparagineG = Optional.empty();

    private Optional<Integer> asparticAcidG = Optional.empty();

    private Optional<Integer> cysteineG = Optional.empty();

    private Optional<Integer> glutamineG = Optional.empty();

    private Optional<Integer> glutamicAcidG = Optional.empty();

    private Optional<Integer> glycineG = Optional.empty();

    private Optional<Integer> histidineG = Optional.empty();

    private Optional<Integer> isoleucineG = Optional.empty();

    private Optional<Integer> leucineG = Optional.empty();

    private Optional<Integer> lysineG = Optional.empty();

    private Optional<Integer> methionineG = Optional.empty();

    private Optional<Integer> phenylalanineG = Optional.empty();

    private Optional<Integer> prolineG = Optional.empty();

    private Optional<Integer> serineG = Optional.empty();

    private Optional<Integer> threonineG = Optional.empty();

    private Optional<Integer> tryptophanG = Optional.empty();

    private Optional<Integer> tyrosineG = Optional.empty();

    private Optional<Integer> valineG = Optional.empty();

    private Builder() {
    }

    public Builder from(Aminos other) {
      alanineG(other.getAlanineG());
      arginineG(other.getArginineG());
      asparagineG(other.getAsparagineG());
      asparticAcidG(other.getAsparticAcidG());
      cysteineG(other.getCysteineG());
      glutamineG(other.getGlutamineG());
      glutamicAcidG(other.getGlutamicAcidG());
      glycineG(other.getGlycineG());
      histidineG(other.getHistidineG());
      isoleucineG(other.getIsoleucineG());
      leucineG(other.getLeucineG());
      lysineG(other.getLysineG());
      methionineG(other.getMethionineG());
      phenylalanineG(other.getPhenylalanineG());
      prolineG(other.getProlineG());
      serineG(other.getSerineG());
      threonineG(other.getThreonineG());
      tryptophanG(other.getTryptophanG());
      tyrosineG(other.getTyrosineG());
      valineG(other.getValineG());
      return this;
    }

    @JsonSetter(
        value = "alanine_g",
        nulls = Nulls.SKIP
    )
    public Builder alanineG(Optional<Integer> alanineG) {
      this.alanineG = alanineG;
      return this;
    }

    public Builder alanineG(Integer alanineG) {
      this.alanineG = Optional.of(alanineG);
      return this;
    }

    @JsonSetter(
        value = "arginine_g",
        nulls = Nulls.SKIP
    )
    public Builder arginineG(Optional<Integer> arginineG) {
      this.arginineG = arginineG;
      return this;
    }

    public Builder arginineG(Integer arginineG) {
      this.arginineG = Optional.of(arginineG);
      return this;
    }

    @JsonSetter(
        value = "asparagine_g",
        nulls = Nulls.SKIP
    )
    public Builder asparagineG(Optional<Integer> asparagineG) {
      this.asparagineG = asparagineG;
      return this;
    }

    public Builder asparagineG(Integer asparagineG) {
      this.asparagineG = Optional.of(asparagineG);
      return this;
    }

    @JsonSetter(
        value = "aspartic_acid_g",
        nulls = Nulls.SKIP
    )
    public Builder asparticAcidG(Optional<Integer> asparticAcidG) {
      this.asparticAcidG = asparticAcidG;
      return this;
    }

    public Builder asparticAcidG(Integer asparticAcidG) {
      this.asparticAcidG = Optional.of(asparticAcidG);
      return this;
    }

    @JsonSetter(
        value = "cysteine_g",
        nulls = Nulls.SKIP
    )
    public Builder cysteineG(Optional<Integer> cysteineG) {
      this.cysteineG = cysteineG;
      return this;
    }

    public Builder cysteineG(Integer cysteineG) {
      this.cysteineG = Optional.of(cysteineG);
      return this;
    }

    @JsonSetter(
        value = "glutamine_g",
        nulls = Nulls.SKIP
    )
    public Builder glutamineG(Optional<Integer> glutamineG) {
      this.glutamineG = glutamineG;
      return this;
    }

    public Builder glutamineG(Integer glutamineG) {
      this.glutamineG = Optional.of(glutamineG);
      return this;
    }

    @JsonSetter(
        value = "glutamic_acid_g",
        nulls = Nulls.SKIP
    )
    public Builder glutamicAcidG(Optional<Integer> glutamicAcidG) {
      this.glutamicAcidG = glutamicAcidG;
      return this;
    }

    public Builder glutamicAcidG(Integer glutamicAcidG) {
      this.glutamicAcidG = Optional.of(glutamicAcidG);
      return this;
    }

    @JsonSetter(
        value = "glycine_g",
        nulls = Nulls.SKIP
    )
    public Builder glycineG(Optional<Integer> glycineG) {
      this.glycineG = glycineG;
      return this;
    }

    public Builder glycineG(Integer glycineG) {
      this.glycineG = Optional.of(glycineG);
      return this;
    }

    @JsonSetter(
        value = "histidine_g",
        nulls = Nulls.SKIP
    )
    public Builder histidineG(Optional<Integer> histidineG) {
      this.histidineG = histidineG;
      return this;
    }

    public Builder histidineG(Integer histidineG) {
      this.histidineG = Optional.of(histidineG);
      return this;
    }

    @JsonSetter(
        value = "isoleucine_g",
        nulls = Nulls.SKIP
    )
    public Builder isoleucineG(Optional<Integer> isoleucineG) {
      this.isoleucineG = isoleucineG;
      return this;
    }

    public Builder isoleucineG(Integer isoleucineG) {
      this.isoleucineG = Optional.of(isoleucineG);
      return this;
    }

    @JsonSetter(
        value = "leucine_g",
        nulls = Nulls.SKIP
    )
    public Builder leucineG(Optional<Integer> leucineG) {
      this.leucineG = leucineG;
      return this;
    }

    public Builder leucineG(Integer leucineG) {
      this.leucineG = Optional.of(leucineG);
      return this;
    }

    @JsonSetter(
        value = "lysine_g",
        nulls = Nulls.SKIP
    )
    public Builder lysineG(Optional<Integer> lysineG) {
      this.lysineG = lysineG;
      return this;
    }

    public Builder lysineG(Integer lysineG) {
      this.lysineG = Optional.of(lysineG);
      return this;
    }

    @JsonSetter(
        value = "methionine_g",
        nulls = Nulls.SKIP
    )
    public Builder methionineG(Optional<Integer> methionineG) {
      this.methionineG = methionineG;
      return this;
    }

    public Builder methionineG(Integer methionineG) {
      this.methionineG = Optional.of(methionineG);
      return this;
    }

    @JsonSetter(
        value = "phenylalanine_g",
        nulls = Nulls.SKIP
    )
    public Builder phenylalanineG(Optional<Integer> phenylalanineG) {
      this.phenylalanineG = phenylalanineG;
      return this;
    }

    public Builder phenylalanineG(Integer phenylalanineG) {
      this.phenylalanineG = Optional.of(phenylalanineG);
      return this;
    }

    @JsonSetter(
        value = "proline_g",
        nulls = Nulls.SKIP
    )
    public Builder prolineG(Optional<Integer> prolineG) {
      this.prolineG = prolineG;
      return this;
    }

    public Builder prolineG(Integer prolineG) {
      this.prolineG = Optional.of(prolineG);
      return this;
    }

    @JsonSetter(
        value = "serine_g",
        nulls = Nulls.SKIP
    )
    public Builder serineG(Optional<Integer> serineG) {
      this.serineG = serineG;
      return this;
    }

    public Builder serineG(Integer serineG) {
      this.serineG = Optional.of(serineG);
      return this;
    }

    @JsonSetter(
        value = "threonine_g",
        nulls = Nulls.SKIP
    )
    public Builder threonineG(Optional<Integer> threonineG) {
      this.threonineG = threonineG;
      return this;
    }

    public Builder threonineG(Integer threonineG) {
      this.threonineG = Optional.of(threonineG);
      return this;
    }

    @JsonSetter(
        value = "tryptophan_g",
        nulls = Nulls.SKIP
    )
    public Builder tryptophanG(Optional<Integer> tryptophanG) {
      this.tryptophanG = tryptophanG;
      return this;
    }

    public Builder tryptophanG(Integer tryptophanG) {
      this.tryptophanG = Optional.of(tryptophanG);
      return this;
    }

    @JsonSetter(
        value = "tyrosine_g",
        nulls = Nulls.SKIP
    )
    public Builder tyrosineG(Optional<Integer> tyrosineG) {
      this.tyrosineG = tyrosineG;
      return this;
    }

    public Builder tyrosineG(Integer tyrosineG) {
      this.tyrosineG = Optional.of(tyrosineG);
      return this;
    }

    @JsonSetter(
        value = "valine_g",
        nulls = Nulls.SKIP
    )
    public Builder valineG(Optional<Integer> valineG) {
      this.valineG = valineG;
      return this;
    }

    public Builder valineG(Integer valineG) {
      this.valineG = Optional.of(valineG);
      return this;
    }

    public Aminos build() {
      return new Aminos(alanineG, arginineG, asparagineG, asparticAcidG, cysteineG, glutamineG, glutamicAcidG, glycineG, histidineG, isoleucineG, leucineG, lysineG, methionineG, phenylalanineG, prolineG, serineG, threonineG, tryptophanG, tyrosineG, valineG);
    }
  }
}
