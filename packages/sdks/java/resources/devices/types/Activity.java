/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Activity.Builder.class
)
public final class Activity implements IMetriportData {
  private final Metadata metadata;

  private final Optional<ActivitySummary> summary;

  private final Optional<List<ActivityLog>> activityLogs;

  private Activity(Metadata metadata, Optional<ActivitySummary> summary,
      Optional<List<ActivityLog>> activityLogs) {
    this.metadata = metadata;
    this.summary = summary;
    this.activityLogs = activityLogs;
  }

  @JsonProperty("metadata")
  @Override
  public Metadata getMetadata() {
    return metadata;
  }

  @JsonProperty("summary")
  public Optional<ActivitySummary> getSummary() {
    return summary;
  }

  @JsonProperty("activity_logs")
  public Optional<List<ActivityLog>> getActivityLogs() {
    return activityLogs;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Activity && equalTo((Activity) other);
  }

  private boolean equalTo(Activity other) {
    return metadata.equals(other.metadata) && summary.equals(other.summary) && activityLogs.equals(other.activityLogs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.metadata, this.summary, this.activityLogs);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static MetadataStage builder() {
    return new Builder();
  }

  public interface MetadataStage {
    _FinalStage metadata(Metadata metadata);

    Builder from(Activity other);
  }

  public interface _FinalStage {
    Activity build();

    _FinalStage summary(Optional<ActivitySummary> summary);

    _FinalStage summary(ActivitySummary summary);

    _FinalStage activityLogs(Optional<List<ActivityLog>> activityLogs);

    _FinalStage activityLogs(List<ActivityLog> activityLogs);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements MetadataStage, _FinalStage {
    private Metadata metadata;

    private Optional<List<ActivityLog>> activityLogs = Optional.empty();

    private Optional<ActivitySummary> summary = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(Activity other) {
      metadata(other.getMetadata());
      summary(other.getSummary());
      activityLogs(other.getActivityLogs());
      return this;
    }

    @Override
    @JsonSetter("metadata")
    public _FinalStage metadata(Metadata metadata) {
      this.metadata = metadata;
      return this;
    }

    @Override
    public _FinalStage activityLogs(List<ActivityLog> activityLogs) {
      this.activityLogs = Optional.of(activityLogs);
      return this;
    }

    @Override
    @JsonSetter(
        value = "activity_logs",
        nulls = Nulls.SKIP
    )
    public _FinalStage activityLogs(Optional<List<ActivityLog>> activityLogs) {
      this.activityLogs = activityLogs;
      return this;
    }

    @Override
    public _FinalStage summary(ActivitySummary summary) {
      this.summary = Optional.of(summary);
      return this;
    }

    @Override
    @JsonSetter(
        value = "summary",
        nulls = Nulls.SKIP
    )
    public _FinalStage summary(Optional<ActivitySummary> summary) {
      this.summary = summary;
      return this;
    }

    @Override
    public Activity build() {
      return new Activity(metadata, summary, activityLogs);
    }
  }
}
