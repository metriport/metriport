/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = SleepDurations.Builder.class
)
public final class SleepDurations {
  private final Optional<Integer> totalSeconds;

  private final Optional<Integer> awakeSeconds;

  private final Optional<Integer> deepSeconds;

  private final Optional<Integer> remSeconds;

  private final Optional<Integer> lightSeconds;

  private final Optional<Integer> inBedSeconds;

  private final Optional<Integer> timeToFallAsleepSeconds;

  private final Optional<Integer> noDataSeconds;

  private SleepDurations(Optional<Integer> totalSeconds, Optional<Integer> awakeSeconds,
      Optional<Integer> deepSeconds, Optional<Integer> remSeconds, Optional<Integer> lightSeconds,
      Optional<Integer> inBedSeconds, Optional<Integer> timeToFallAsleepSeconds,
      Optional<Integer> noDataSeconds) {
    this.totalSeconds = totalSeconds;
    this.awakeSeconds = awakeSeconds;
    this.deepSeconds = deepSeconds;
    this.remSeconds = remSeconds;
    this.lightSeconds = lightSeconds;
    this.inBedSeconds = inBedSeconds;
    this.timeToFallAsleepSeconds = timeToFallAsleepSeconds;
    this.noDataSeconds = noDataSeconds;
  }

  @JsonProperty("total_seconds")
  public Optional<Integer> getTotalSeconds() {
    return totalSeconds;
  }

  @JsonProperty("awake_seconds")
  public Optional<Integer> getAwakeSeconds() {
    return awakeSeconds;
  }

  @JsonProperty("deep_seconds")
  public Optional<Integer> getDeepSeconds() {
    return deepSeconds;
  }

  @JsonProperty("rem_seconds")
  public Optional<Integer> getRemSeconds() {
    return remSeconds;
  }

  @JsonProperty("light_seconds")
  public Optional<Integer> getLightSeconds() {
    return lightSeconds;
  }

  @JsonProperty("in_bed_seconds")
  public Optional<Integer> getInBedSeconds() {
    return inBedSeconds;
  }

  @JsonProperty("time_to_fall_asleep_seconds")
  public Optional<Integer> getTimeToFallAsleepSeconds() {
    return timeToFallAsleepSeconds;
  }

  @JsonProperty("no_data_seconds")
  public Optional<Integer> getNoDataSeconds() {
    return noDataSeconds;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SleepDurations && equalTo((SleepDurations) other);
  }

  private boolean equalTo(SleepDurations other) {
    return totalSeconds.equals(other.totalSeconds) && awakeSeconds.equals(other.awakeSeconds) && deepSeconds.equals(other.deepSeconds) && remSeconds.equals(other.remSeconds) && lightSeconds.equals(other.lightSeconds) && inBedSeconds.equals(other.inBedSeconds) && timeToFallAsleepSeconds.equals(other.timeToFallAsleepSeconds) && noDataSeconds.equals(other.noDataSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.totalSeconds, this.awakeSeconds, this.deepSeconds, this.remSeconds, this.lightSeconds, this.inBedSeconds, this.timeToFallAsleepSeconds, this.noDataSeconds);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> totalSeconds = Optional.empty();

    private Optional<Integer> awakeSeconds = Optional.empty();

    private Optional<Integer> deepSeconds = Optional.empty();

    private Optional<Integer> remSeconds = Optional.empty();

    private Optional<Integer> lightSeconds = Optional.empty();

    private Optional<Integer> inBedSeconds = Optional.empty();

    private Optional<Integer> timeToFallAsleepSeconds = Optional.empty();

    private Optional<Integer> noDataSeconds = Optional.empty();

    private Builder() {
    }

    public Builder from(SleepDurations other) {
      totalSeconds(other.getTotalSeconds());
      awakeSeconds(other.getAwakeSeconds());
      deepSeconds(other.getDeepSeconds());
      remSeconds(other.getRemSeconds());
      lightSeconds(other.getLightSeconds());
      inBedSeconds(other.getInBedSeconds());
      timeToFallAsleepSeconds(other.getTimeToFallAsleepSeconds());
      noDataSeconds(other.getNoDataSeconds());
      return this;
    }

    @JsonSetter(
        value = "total_seconds",
        nulls = Nulls.SKIP
    )
    public Builder totalSeconds(Optional<Integer> totalSeconds) {
      this.totalSeconds = totalSeconds;
      return this;
    }

    public Builder totalSeconds(Integer totalSeconds) {
      this.totalSeconds = Optional.of(totalSeconds);
      return this;
    }

    @JsonSetter(
        value = "awake_seconds",
        nulls = Nulls.SKIP
    )
    public Builder awakeSeconds(Optional<Integer> awakeSeconds) {
      this.awakeSeconds = awakeSeconds;
      return this;
    }

    public Builder awakeSeconds(Integer awakeSeconds) {
      this.awakeSeconds = Optional.of(awakeSeconds);
      return this;
    }

    @JsonSetter(
        value = "deep_seconds",
        nulls = Nulls.SKIP
    )
    public Builder deepSeconds(Optional<Integer> deepSeconds) {
      this.deepSeconds = deepSeconds;
      return this;
    }

    public Builder deepSeconds(Integer deepSeconds) {
      this.deepSeconds = Optional.of(deepSeconds);
      return this;
    }

    @JsonSetter(
        value = "rem_seconds",
        nulls = Nulls.SKIP
    )
    public Builder remSeconds(Optional<Integer> remSeconds) {
      this.remSeconds = remSeconds;
      return this;
    }

    public Builder remSeconds(Integer remSeconds) {
      this.remSeconds = Optional.of(remSeconds);
      return this;
    }

    @JsonSetter(
        value = "light_seconds",
        nulls = Nulls.SKIP
    )
    public Builder lightSeconds(Optional<Integer> lightSeconds) {
      this.lightSeconds = lightSeconds;
      return this;
    }

    public Builder lightSeconds(Integer lightSeconds) {
      this.lightSeconds = Optional.of(lightSeconds);
      return this;
    }

    @JsonSetter(
        value = "in_bed_seconds",
        nulls = Nulls.SKIP
    )
    public Builder inBedSeconds(Optional<Integer> inBedSeconds) {
      this.inBedSeconds = inBedSeconds;
      return this;
    }

    public Builder inBedSeconds(Integer inBedSeconds) {
      this.inBedSeconds = Optional.of(inBedSeconds);
      return this;
    }

    @JsonSetter(
        value = "time_to_fall_asleep_seconds",
        nulls = Nulls.SKIP
    )
    public Builder timeToFallAsleepSeconds(Optional<Integer> timeToFallAsleepSeconds) {
      this.timeToFallAsleepSeconds = timeToFallAsleepSeconds;
      return this;
    }

    public Builder timeToFallAsleepSeconds(Integer timeToFallAsleepSeconds) {
      this.timeToFallAsleepSeconds = Optional.of(timeToFallAsleepSeconds);
      return this;
    }

    @JsonSetter(
        value = "no_data_seconds",
        nulls = Nulls.SKIP
    )
    public Builder noDataSeconds(Optional<Integer> noDataSeconds) {
      this.noDataSeconds = noDataSeconds;
      return this;
    }

    public Builder noDataSeconds(Integer noDataSeconds) {
      this.noDataSeconds = Optional.of(noDataSeconds);
      return this;
    }

    public SleepDurations build() {
      return new SleepDurations(totalSeconds, awakeSeconds, deepSeconds, remSeconds, lightSeconds, inBedSeconds, timeToFallAsleepSeconds, noDataSeconds);
    }
  }
}
