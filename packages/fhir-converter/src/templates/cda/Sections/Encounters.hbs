{{!-- 
  // ------------------------------------------------------------------------------------------------- 
  // Copyright (c) 2022-present Metriport Inc.   
  //  
  // Licensed under AGPLv3. See LICENSE in the repo root for license information.
  //  
  // This file incorporates work covered by the following copyright and  
  // permission notice:  
  //  
  //     Copyright (c) Microsoft Corporation. All rights reserved. 
  //  
  //     Permission to use, copy, modify, and/or distribute this software  
  //     for any purpose with or without fee is hereby granted, provided  
  //     that the above copyright notice and this permission notice appear  
  //     in all copies.  
  //  
  //     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL  
  //     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED  
  //     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE  
  //     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR  
  //     CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS  
  //     OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,  
  //     NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN  
  //     CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  
  // -------------------------------------------------------------------------------------------------
--}}
{{#with (optionalEvaluate 'Utils/ReasonForVisit.hbs' msg=msg) as |reasonCodes|}}
    {{#if (contains (toString (toJsonString ../msg)) '2.16.840.1.113883.10.20.22.2.22')}}
        {{#with (getFirstCdaSectionsByTemplateId ../msg '2.16.840.1.113883.10.20.22.2.22.1' '2.16.840.1.113883.10.20.22.2.22') as |encounters|}}
                {{#with (multipleToArray this.[2_16_840_1_113883_10_20_22_2_22_1].entry this.[2_16_840_1_113883_10_20_22_2_22].entry) as |encounterEntries|}}
                    {{#each encounterEntries as |encounterEntry|}}
                        {{#if encounterEntry.encounter}}
                            {{>Resources/Encounter.hbs encounter=encounterEntry.encounter reasonCodes=reasonCodes ID=(generateUUID (toJsonString encounterEntry))}},

                            {{#with (evaluate 'Utils/GeneratePatientId.hbs' obj=@metriportPatientId) as |patientId|}}
                                {{>References/Encounter/subject.hbs ID=(generateUUID (toJsonString encounterEntry)) REF=(concat 'Patient/' patientId.Id)}},
                            {{/with}}
                        {{/if}}

                        {{#if encounterEntry.encounter.performer.assignedEntity}}
                            {{#with (evaluate 'Utils/GeneratePractitionerId.hbs' obj=encounterEntry.encounter.performer.assignedEntity) as |practitionerId|}}
                                {{>Resources/Practitioner.hbs practitioner=encounterEntry.encounter.performer.assignedEntity ID=practitionerId.Id}},
                                {{>References/Encounter/participant.individual.hbs ID=(generateUUID (toJsonString encounterEntry)) REF=(concat 'Practitioner/' practitionerId.Id)}},
                            {{/with}}
                        {{/if}}

                        {{#if encounterEntry.encounter.performer.assignedEntity.representedOrganization}}
                            {{#with (evaluate 'Utils/GenerateOrganizationId.hbs' obj=encounterEntry.encounter.performer.assignedEntity.representedOrganization) as |orgId|}}
                                {{>Resources/Organization.hbs org=encounterEntry.encounter.performer.assignedEntity ID=orgId.Id}},
                                {{>References/Encounter/serviceProvider.hbs ID=(generateUUID (toJsonString encounterEntry)) REF=(concat 'Organization/' orgId.Id)}},
                            {{/with}}
                        {{/if}}

                        {{#each (toArray encounterEntry.encounter.participant) as |participantEntry|}}
                            {{#if (eq participantEntry.typeCode 'LOC')}}
                                {{#if (contains (toJsonString participantEntry.participantRole.templateId) '"2.16.840.1.113883.10.20.22.4.32"')}}
                                    {{#with (evaluate 'Utils/GenerateLocationId.hbs' location=participantEntry.participantRole) as |locationId|}}
                                        {{>Resources/Location.hbs location=participantEntry.participantRole playingEntity=participantEntry.participantRole.playingEntity ID=locationId.Id}},
                                        {{>References/Encounter/location.location.hbs ID=(generateUUID (toJsonString encounterEntry)) REF=(concat 'Location/' locationId.Id)}},          
                                    {{/with}}          
                                {{/if}}                
                            {{/if}}
                        {{/each}}
                    
                        {{#each (toArray encounterEntry.encounter.entryRelationship)}}
                            {{#each (toArray this.act.entryRelationship) as |condEntry|}}
                                {{#if condEntry.observation}}
                                    {{>Resources/Condition.hbs conditionEntry=condEntry.observation ID=(generateUUID (toJsonString condEntry.observation))}},
                                    {{#with (evaluate 'Utils/GeneratePatientId.hbs' obj=@metriportPatientId) as |patientId|}}
                                        {{>References/Condition/subject.hbs ID=(generateUUID (toJsonString condEntry.observation)) REF=(concat 'Patient/' patientId.Id)}},
                                    {{/with}}
                                    {{#if condEntry.observation.author.assignedAuthor}}
                                        {{#with (evaluate 'Utils/GeneratePractitionerId.hbs' obj=condEntry.observation.author.assignedAuthor) as |practitionerId|}}
                                            {{>Resources/Practitioner.hbs practitioner=condEntry.observation.author.assignedAuthor ID=practitionerId.Id}},
                                            {{>References/Condition/recorder.hbs ID=(generateUUID (toJsonString condEntry.observation)) REF=(concat 'Practitioner/' practitionerId.Id)}},
                                        {{/with}}
                                    {{/if}}

                                    {{>References/Encounter/diagnosis.condition.hbs ID=(generateUUID (toJsonString encounterEntry)) REF=(concat 'Condition/' (generateUUID (toJsonString condEntry.observation)))}},
                                {{/if}}
                            {{/each}}
                        {{/each}}
                    {{/each}}
                {{/with}}
            {{/with}}
    {{/if}}
{{/with}}