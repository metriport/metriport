{{!-- 
  // ------------------------------------------------------------------------------------------------- 
  // Copyright (c) 2022-present Metriport Inc.   
  //  
  // Licensed under AGPLv3. See LICENSE in the repo root for license information.
  //  
  // This file incorporates work covered by the following copyright and  
  // permission notice:  
  //  
  //     Copyright (c) Microsoft Corporation. All rights reserved. 
  //  
  //     Permission to use, copy, modify, and/or distribute this software  
  //     for any purpose with or without fee is hereby granted, provided  
  //     that the above copyright notice and this permission notice appear  
  //     in all copies.  
  //  
  //     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL  
  //     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED  
  //     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE  
  //     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR  
  //     CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS  
  //     OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,  
  //     NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN  
  //     CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  
  // -------------------------------------------------------------------------------------------------
--}}
{{#if (contains (toString (toJsonString msg)) '2.16.840.1.113883.10.20.22.2.3')}}
    {{#with (getFirstCdaSectionsByTemplateId msg '2.16.840.1.113883.10.20.22.2.3.1' '2.16.840.1.113883.10.20.22.2.3')}}
        {{#with (coalesce 2_16_840_1_113883_10_20_22_2_3_1.code 2_16_840_1_113883_10_20_22_2_3.code) as |categoryCode|}}
            {{#each (multipleToArray ../2_16_840_1_113883_10_20_22_2_3_1.entry ../2_16_840_1_113883_10_20_22_2_3.entry) as |drEntry|}}
                {{#if drEntry.organizer}}
                    {{>Resources/DiagnosticReport.hbs diagReport=drEntry.organizer categoryCode=categoryCode ID=(generateUUID (toJsonString drEntry.organizer))}},
                    {{#with (evaluate 'Utils/GeneratePatientId.hbs' obj=@metriportPatientId) as |patientId|}}
                        {{>References/DiagnosticReport/subject.hbs ID=(generateUUID (toJsonString drEntry.organizer)) REF=(concat 'Patient/' patientId.Id)}},
                        {{#if @encompassingEncounterIds}} 
                            {{>References/DiagnosticReport/encounter.hbs ID=(generateUUID (toJsonString drEntry.organizer)) REF=(concat 'Encounter/' @encompassingEncounterIds.newId)}}
                        {{/if}}
                    {{/with}}
                
                    {{#if drEntry.organizer.performer}}
                        {{#if drEntry.organizer.performer.assignedEntity}}
                            {{!-- should we use author.assignedAuthor or performer.assignedEntity? Not sure which one is generally fuller  --}}
                            {{#with (evaluate 'Utils/GeneratePractitionerId.hbs' obj=drEntry.organizer.performer.assignedEntity) as |practitionerId|}}
                                {{>Resources/Practitioner.hbs practitioner=drEntry.organizer.performer.assignedEntity ID=practitionerId.Id}},
                                {{>References/DiagnosticReport/performer.hbs ID=(generateUUID (toJsonString drEntry.organizer)) REF=(concat 'Practitioner/' practitionerId.Id)}}
                            {{/with}}
                            {{#if drEntry.organizer.performer.assignedEntity.representedOrganization}}
                                {{#with (evaluate 'Utils/GenerateOrganizationId.hbs' obj=drEntry.organizer.performer.assignedEntity.representedOrganization) as |orgId|}}
                                    {{>Resources/Organization.hbs org=drEntry.organizer.performer.assignedEntity.representedOrganization ID=orgId.Id}},
                                    {{>References/DiagnosticReport/performer.hbs ID=(generateUUID (toJsonString drEntry.organizer)) REF=(concat 'Organization/' orgId.Id)}},
                                {{/with}}
                            {{/if}}
                        {{/if}}
                    {{else if drEntry.organizer.author}}
                        {{#if drEntry.organizer.author.assignedAuthor}}
                            {{#with (evaluate 'Utils/GeneratePractitionerId.hbs' obj=drEntry.organizer.author.assignedAuthor) as |practitionerId|}}
                                {{>Resources/Practitioner.hbs practitioner=drEntry.organizer.author.assignedAuthor ID=practitionerId.Id}},
                                {{>References/DiagnosticReport/performer.hbs ID=(generateUUID (toJsonString drEntry.organizer)) REF=(concat 'Practitioner/' practitionerId.Id)}}
                            {{/with}}
                            {{#if drEntry.organizer.author.assignedAuthor.representedOrganization}}
                                {{#with (evaluate 'Utils/GenerateOrganizationId.hbs' obj=drEntry.organizer.author.assignedAuthor.representedOrganization) as |orgId|}}
                                    {{>Resources/Organization.hbs org=drEntry.organizer.author.assignedAuthor.representedOrganization ID=orgId.Id}},
                                    {{>References/DiagnosticReport/performer.hbs ID=(generateUUID (toJsonString drEntry.organizer)) REF=(concat 'Organization/' orgId.Id)}},
                                {{/with}}
                            {{/if}}
                        {{/if}}
                    {{/if}}

                    {{#each (toArray drEntry.organizer.component) as |obsEntry|}}
                        {{#if obsEntry.observation}}
                            {{#if (not obsEntry.observation.value._b64)}}
                                {{>Resources/Observation.hbs observationCategory="laboratory" observationEntry=obsEntry.observation ID=(generateUUID (toJsonString obsEntry.observation))}},                   
                                {{>References/DiagnosticReport/result.hbs ID=(generateUUID (toJsonString drEntry.organizer)) REF=(concat 'Observation/' (generateUUID (toJsonString obsEntry.observation)))}},
                                {{#with (evaluate 'Utils/GeneratePatientId.hbs' obj=@metriportPatientId) as |patientId|}}
                                    {{>References/Observation/subject.hbs ID=(generateUUID (toJsonString obsEntry.observation)) REF=(concat 'Patient/' patientId.Id)}},
                                {{/with}}
                                {{#if obsEntry.observation.author.assignedAuthor}}
                                    {{#with (evaluate 'Utils/GeneratePractitionerId.hbs' obj=obsEntry.observation.author.assignedAuthor) as |practitionerId|}}
                                        {{>Resources/Practitioner.hbs practitioner=obsEntry.observation.author.assignedAuthor ID=practitionerId.Id}},
                                        {{>References/Observation/performer.hbs ID=(generateUUID (toJsonString obsEntry.observation)) REF=(concat 'Practitioner/' practitionerId.Id )}},                           
                                    {{/with}}
                                    {{#if obsEntry.observation.author.assignedAuthor.representedOrganization}}
                                        {{#with (evaluate 'Utils/GenerateOrganizationId.hbs' obj=obsEntry.observation.author.assignedAuthor.representedOrganization) as |orgId|}}
                                            {{>Resources/Organization.hbs org=obsEntry.observation.author.assignedAuthor.representedOrganization ID=orgId.Id}},
                                            {{>References/Observation/performer.hbs ID=(generateUUID (toJsonString obsEntry.observation)) REF=(concat 'Organization/' orgId.Id)}},
                                        {{/with}}
                                    {{/if}}
                                {{!-- else should use author from top level --}}
                                {{else if drEntry.organizer.performer.assignedEntity}}
                                    {{#with (evaluate 'Utils/GeneratePractitionerId.hbs' obj=drEntry.organizer.performer.assignedEntity) as |practitionerId|}}
                                        {{>Resources/Practitioner.hbs practitioner=drEntry.organizer.performer.assignedEntity ID=practitionerId.Id}},
                                        {{>References/Observation/performer.hbs ID=(generateUUID (toJsonString obsEntry.observation)) REF=(concat 'Practitioner/' practitionerId.Id)}}
                                    {{/with}}
                                    {{#if drEntry.organizer.performer.assignedEntity.representedOrganization}}
                                        {{#with (evaluate 'Utils/GenerateOrganizationId.hbs' obj=drEntry.organizer.performer.assignedEntity.representedOrganization) as |orgId|}}
                                            {{>Resources/Organization.hbs org=drEntry.organizer.performer.assignedEntity.representedOrganization ID=orgId.Id}},
                                            {{>References/Observation/performer.hbs ID=(generateUUID (toJsonString obsEntry.observation)) REF=(concat 'Organization/' orgId.Id)}},
                                        {{/with}}
                                    {{/if}}
                                {{/if}}
                            {{/if}}
                        {{/if}}
                        {{#if obsEntry.procedure}}
                            {{>Resources/Procedure.hbs procedureEntry=obsEntry.procedure ID=(generateUUID (toJsonString obsEntry.procedure))}}
                            {{#with (evaluate 'Utils/GeneratePatientId.hbs' obj=@metriportPatientId) as |patientId|}}
                                {{>References/Procedure/subject.hbs ID=(generateUUID (toJsonString obsEntry.procedure)) REF=(concat 'Patient/' patientId.Id)}},
                            {{/with}}

                            {{#if drEntry.organizer.performer.assignedEntity}}
                                {{#with (evaluate 'Utils/GeneratePractitionerId.hbs' obj=drEntry.organizer.performer.assignedEntity) as |practitionerId|}}
                                    {{>References/Procedure/performer.actor.hbs ID=(generateUUID (toJsonString obsEntry.procedure)) REF=(concat 'Practitioner/' practitionerId.Id)}}
                                {{/with}}

                                {{#if drEntry.organizer.performer.assignedEntity.representedOrganization}}
                                    {{#with (evaluate 'Utils/GenerateOrganizationId.hbs' obj=drEntry.organizer.performer.assignedEntity.representedOrganization) as |orgId|}}
                                        {{>References/Procedure/performer.actor.hbs ID=(generateUUID (toJsonString obsEntry.procedure)) REF=(concat 'Organization/' orgId.Id)}},
                                    {{/with}}
                                {{/if}}
                            {{else if drEntry.organizer.author.assignedAuthor}}
                                {{#with (evaluate 'Utils/GeneratePractitionerId.hbs' obj=drEntry.organizer.author.assignedAuthor) as |practitionerId|}}
                                    {{>References/Procedure/performer.actor.hbs ID=(generateUUID (toJsonString obsEntry.procedure)) REF=(concat 'Practitioner/' practitionerId.Id)}},
                                {{/with}}

                                {{#if drEntry.organizer.author.assignedAuthor.representedOrganization}}
                                    {{#with (evaluate 'Utils/GenerateOrganizationId.hbs' obj=drEntry.organizer.author.assignedAuthor.representedOrganization) as |orgId|}}
                                        {{>References/Procedure/performer.actor.hbs ID=(generateUUID (toJsonString obsEntry.procedure)) REF=(concat 'Organization/' orgId.Id)}},
                                    {{/with}}
                                {{/if}}
                            {{/if}}
                            {{#if obsEntry.procedure.text._b64}}
                                {{>References/Procedure/report.hbs ID=(generateUUID (toJsonString obsEntry.procedure)) REF=(concat 'DiagnosticReport/' (generateUUID (toJsonString drEntry.organizer)))}}
                                {{>References/DiagnosticReport/assessment.hbs text=(base64Decode obsEntry.procedure.text._b64) ID=(generateUUID (toJsonString drEntry.organizer))}}
                            {{/if}}
                        {{/if}}
                    {{/each}}
                {{/if}}
            {{/each}}
        {{/with}}
    {{/with}}
{{/if}}