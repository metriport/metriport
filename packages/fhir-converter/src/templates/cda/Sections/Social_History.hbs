{{!-- 
  // ------------------------------------------------------------------------------------------------- 
  // Copyright (c) 2022-present Metriport Inc.   
  //  
  // Licensed under AGPLv3. See LICENSE in the repo root for license information.
  //  
  // This file incorporates work covered by the following copyright and  
  // permission notice:  
  //  
  //     Copyright (c) Microsoft Corporation. All rights reserved. 
  //  
  //     Permission to use, copy, modify, and/or distribute this software  
  //     for any purpose with or without fee is hereby granted, provided  
  //     that the above copyright notice and this permission notice appear  
  //     in all copies.  
  //  
  //     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL  
  //     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED  
  //     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE  
  //     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR  
  //     CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS  
  //     OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,  
  //     NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN  
  //     CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  
  // -------------------------------------------------------------------------------------------------
--}}
{{#if (contains (toString (toJsonString msg)) '2.16.840.1.113883.10.20.22.2.17')}}
    {{#with (getFirstCdaSectionsByTemplateId msg '2.16.840.1.113883.10.20.22.2.17')}}
        	{{#each (toArray 2_16_840_1_113883_10_20_22_2_17.entry) as |obsEntry|}}
            	{{>Resources/Observation.hbs observationCategory="social-history" observationEntry=obsEntry.observation ID=(generateUUID (toJsonString obsEntry.observation))}} 
                {{#with (evaluate 'Utils/GeneratePatientId.hbs' obj=@metriportPatientId) as |patientId|}}
					{{>References/Observation/subject.hbs ID=(generateUUID (toJsonString obsEntry.observation)) REF=(concat 'Patient/' patientId.Id)}},
				{{/with}}
                {{>Utils/ProcessObservationAuthors.hbs observation=obsEntry.observation observationJson=(toJsonString obsEntry.observation)}}

                {{!-- LEVEL 2: Process first level of nested observations --}}
                {{#each (toArray obsEntry.observation.entryRelationship) as |nestedEntry|}}
                    {{#if nestedEntry.observation}}
                        {{>Resources/Observation.hbs observationCategory="social-history" observationEntry=nestedEntry.observation ID=(generateUUID (toJsonString nestedEntry.observation))}},
                        {{#with (evaluate 'Utils/GeneratePatientId.hbs' obj=@metriportPatientId) as |patientId|}}
                            {{>References/Observation/subject.hbs ID=(generateUUID (toJsonString nestedEntry.observation)) REF=(concat 'Patient/' patientId.Id)}},
                        {{/with}}
                        {{>Utils/ProcessObservationAuthors.hbs observation=nestedEntry.observation observationJson=(toJsonString nestedEntry.observation)}}
                        {{!-- Create bidirectional references between parent and this observation --}}
                        {{>References/Observation/hasMember.hbs ID=(generateUUID (toJsonString obsEntry.observation)) REF=(concat 'Observation/' (generateUUID (toJsonString nestedEntry.observation)))}},
                        {{>References/Observation/derivedFrom.hbs ID=(generateUUID (toJsonString nestedEntry.observation)) REF=(concat 'Observation/' (generateUUID (toJsonString obsEntry.observation)))}},

                        {{!-- LEVEL 3: Process second level of nested observations --}}
                        {{#each (toArray nestedEntry.observation.entryRelationship) as |doubleNestedEntry|}}
                            {{#if doubleNestedEntry.observation}}
                                {{>Resources/Observation.hbs observationCategory="social-history" observationEntry=doubleNestedEntry.observation ID=(generateUUID (toJsonString doubleNestedEntry.observation))}},
                                {{#with (evaluate 'Utils/GeneratePatientId.hbs' obj=@metriportPatientId) as |patientId|}}
                                    {{>References/Observation/subject.hbs ID=(generateUUID (toJsonString doubleNestedEntry.observation)) REF=(concat 'Patient/' patientId.Id)}},
                                {{/with}}
                                {{>Utils/ProcessObservationAuthors.hbs observation=doubleNestedEntry.observation observationJson=(toJsonString doubleNestedEntry.observation)}}

                                {{!-- Create bidirectional references between parent and this observation --}}
                                {{>References/Observation/hasMember.hbs ID=(generateUUID (toJsonString nestedEntry.observation)) REF=(concat 'Observation/' (generateUUID (toJsonString doubleNestedEntry.observation)))}},
                                {{>References/Observation/derivedFrom.hbs ID=(generateUUID (toJsonString doubleNestedEntry.observation)) REF=(concat 'Observation/' (generateUUID (toJsonString nestedEntry.observation)))}},
                            {{/if}}
                        {{/each}}
                    {{/if}}
                {{/each}}
            {{/each}}
        {{/with}}
{{/if}}