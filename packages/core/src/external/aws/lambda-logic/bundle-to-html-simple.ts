import {
  Bundle,
  Condition,
  Medication,
  MedicationStatement,
  Observation,
  Patient,
} from "@medplum/fhirtypes";
import dayjs from "dayjs";
import { Brief } from "../../../command/ai-brief/brief";
import {
  createBrief,
  createSection,
  formatDateForDisplay,
  ISO_DATE,
} from "./bundle-to-html-shared";

const HCC_V28_CODES: string[] = [
  "A0104",
  "A0105",
  "A021",
  "A0223",
  "A0224",
  "A065",
  "A072",
  "A207",
  "A227",
  "A267",
  "A310",
  "A312",
  "A327",
  "A3681",
  "A392",
  "A393",
  "A394",
  "A3983",
  "A3984",
  "A400",
  "A401",
  "A403",
  "A408",
  "A409",
  "A4101",
  "A4102",
  "A411",
  "A412",
  "A413",
  "A414",
  "A4150",
  "A4151",
  "A4152",
  "A4153",
  "A4154",
  "A4159",
  "A4181",
  "A4189",
  "A419",
  "A427",
  "A480",
  "A481",
  "A483",
  "A5055",
  "A5440",
  "A5441",
  "A5442",
  "A5443",
  "A5449",
  "A5485",
  "A5486",
  "A666",
  "A6923",
  "A8100",
  "A8101",
  "A8109",
  "A811",
  "A812",
  "A8181",
  "A8182",
  "A8183",
  "A8189",
  "A819",
  "B007",
  "B0082",
  "B0112",
  "B0224",
  "B0682",
  "B180",
  "B181",
  "B182",
  "B188",
  "B189",
  "B20",
  "B250",
  "B251",
  "B252",
  "B258",
  "B259",
  "B2685",
  "B3324",
  "B371",
  "B377",
  "B377",
  "B3781",
  "B4282",
  "B440",
  "B441",
  "B442",
  "B447",
  "B4481",
  "B4489",
  "B449",
  "B450",
  "B451",
  "B452",
  "B453",
  "B457",
  "B458",
  "B459",
  "B460",
  "B461",
  "B462",
  "B463",
  "B464",
  "B465",
  "B468",
  "B469",
  "B484",
  "B488",
  "B582",
  "B583",
  "B59",
  "B9735",
  "C01",
  "C020",
  "C021",
  "C022",
  "C023",
  "C024",
  "C028",
  "C029",
  "C030",
  "C031",
  "C039",
  "C040",
  "C041",
  "C048",
  "C049",
  "C050",
  "C051",
  "C052",
  "C058",
  "C059",
  "C060",
  "C061",
  "C062",
  "C0680",
  "C0689",
  "C069",
  "C07",
  "C080",
  "C081",
  "C089",
  "C090",
  "C091",
  "C098",
  "C099",
  "C100",
  "C101",
  "C102",
  "C103",
  "C104",
  "C108",
  "C109",
  "C110",
  "C111",
  "C112",
  "C113",
  "C118",
  "C119",
  "C12",
  "C130",
  "C131",
  "C132",
  "C138",
  "C139",
  "C140",
  "C142",
  "C148",
  "C153",
  "C154",
  "C155",
  "C158",
  "C159",
  "C160",
  "C161",
  "C162",
  "C163",
  "C164",
  "C165",
  "C166",
  "C168",
  "C169",
  "C170",
  "C171",
  "C172",
  "C173",
  "C178",
  "C179",
  "C180",
  "C181",
  "C182",
  "C183",
  "C184",
  "C185",
  "C186",
  "C187",
  "C188",
  "C189",
  "C19",
  "C20",
  "C210",
  "C211",
  "C212",
  "C218",
  "C220",
  "C221",
  "C222",
  "C223",
  "C224",
  "C227",
  "C228",
  "C229",
  "C23",
  "C240",
  "C241",
  "C248",
  "C249",
  "C250",
  "C251",
  "C252",
  "C253",
  "C254",
  "C257",
  "C258",
  "C259",
  "C260",
  "C261",
  "C269",
  "C300",
  "C301",
  "C310",
  "C311",
  "C312",
  "C313",
  "C318",
  "C319",
  "C320",
  "C321",
  "C322",
  "C323",
  "C328",
  "C329",
  "C33",
  "C3400",
  "C3401",
  "C3402",
  "C3410",
  "C3411",
  "C3412",
  "C342",
  "C3430",
  "C3431",
  "C3432",
  "C3480",
  "C3481",
  "C3482",
  "C3490",
  "C3491",
  "C3492",
  "C37",
  "C380",
  "C381",
  "C382",
  "C383",
  "C384",
  "C388",
  "C390",
  "C399",
  "C4000",
  "C4001",
  "C4002",
  "C4010",
  "C4011",
  "C4012",
  "C4020",
  "C4021",
  "C4022",
  "C4030",
  "C4031",
  "C4032",
  "C4080",
  "C4081",
  "C4082",
  "C4090",
  "C4091",
  "C4092",
  "C410",
  "C411",
  "C412",
  "C413",
  "C414",
  "C419",
  "C430",
  "C4310",
  "C43111",
  "C43112",
  "C43121",
  "C43122",
  "C4320",
  "C4321",
  "C4322",
  "C4330",
  "C4331",
  "C4339",
  "C434",
  "C4351",
  "C4352",
  "C4359",
  "C4360",
  "C4361",
  "C4362",
  "C4370",
  "C4371",
  "C4372",
  "C438",
  "C439",
  "C450",
  "C451",
  "C452",
  "C457",
  "C459",
  "C460",
  "C461",
  "C462",
  "C463",
  "C464",
  "C4650",
  "C4651",
  "C4652",
  "C467",
  "C469",
  "C470",
  "C4710",
  "C4711",
  "C4712",
  "C4720",
  "C4721",
  "C4722",
  "C473",
  "C474",
  "C475",
  "C476",
  "C478",
  "C479",
  "C480",
  "C481",
  "C482",
  "C488",
  "C490",
  "C4910",
  "C4911",
  "C4912",
  "C4920",
  "C4921",
  "C4922",
  "C493",
  "C494",
  "C495",
  "C496",
  "C498",
  "C499",
  "C49A0",
  "C49A1",
  "C49A2",
  "C49A3",
  "C49A4",
  "C49A5",
  "C49A9",
  "C4A0",
  "C4A10",
  "C4A111",
  "C4A112",
  "C4A121",
  "C4A122",
  "C4A20",
  "C4A21",
  "C4A22",
  "C4A30",
  "C4A31",
  "C4A39",
  "C4A4",
  "C4A51",
  "C4A52",
  "C4A59",
  "C4A60",
  "C4A61",
  "C4A62",
  "C4A70",
  "C4A71",
  "C4A72",
  "C4A8",
  "C4A9",
  "C50011",
  "C50012",
  "C50019",
  "C50021",
  "C50022",
  "C50029",
  "C50111",
  "C50112",
  "C50119",
  "C50121",
  "C50122",
  "C50129",
  "C50211",
  "C50212",
  "C50219",
  "C50221",
  "C50222",
  "C50229",
  "C50311",
  "C50312",
  "C50319",
  "C50321",
  "C50322",
  "C50329",
  "C50411",
  "C50412",
  "C50419",
  "C50421",
  "C50422",
  "C50429",
  "C50511",
  "C50512",
  "C50519",
  "C50521",
  "C50522",
  "C50529",
  "C50611",
  "C50612",
  "C50619",
  "C50621",
  "C50622",
  "C50629",
  "C50811",
  "C50812",
  "C50819",
  "C50821",
  "C50822",
  "C50829",
  "C50911",
  "C50912",
  "C50919",
  "C50921",
  "C50922",
  "C50929",
  "C510",
  "C511",
  "C512",
  "C518",
  "C519",
  "C52",
  "C530",
  "C531",
  "C538",
  "C539",
  "C540",
  "C541",
  "C542",
  "C543",
  "C548",
  "C549",
  "C55",
  "C561",
  "C562",
  "C563",
  "C569",
  "C5700",
  "C5701",
  "C5702",
  "C5710",
  "C5711",
  "C5712",
  "C5720",
  "C5721",
  "C5722",
  "C573",
  "C574",
  "C577",
  "C578",
  "C579",
  "C58",
  "C600",
  "C601",
  "C602",
  "C608",
  "C609",
  "C61",
  "C6200",
  "C6201",
  "C6202",
  "C6210",
  "C6211",
  "C6212",
  "C6290",
  "C6291",
  "C6292",
  "C6300",
  "C6301",
  "C6302",
  "C6310",
  "C6311",
  "C6312",
  "C632",
  "C637",
  "C638",
  "C639",
  "C641",
  "C642",
  "C649",
  "C651",
  "C652",
  "C659",
  "C661",
  "C662",
  "C669",
  "C670",
  "C671",
  "C672",
  "C673",
  "C674",
  "C675",
  "C676",
  "C677",
  "C678",
  "C679",
  "C680",
  "C681",
  "C688",
  "C689",
  "C6900",
  "C6901",
  "C6902",
  "C6910",
  "C6911",
  "C6912",
  "C6920",
  "C6921",
  "C6922",
  "C6930",
  "C6931",
  "C6932",
  "C6940",
  "C6941",
  "C6942",
  "C6950",
  "C6951",
  "C6952",
  "C6960",
  "C6961",
  "C6962",
  "C6980",
  "C6981",
  "C6982",
  "C6990",
  "C6991",
  "C6992",
  "C700",
  "C701",
  "C709",
  "C710",
  "C711",
  "C712",
  "C713",
  "C714",
  "C715",
  "C716",
  "C717",
  "C718",
  "C719",
  "C720",
  "C721",
  "C7220",
  "C7221",
  "C7222",
  "C7230",
  "C7231",
  "C7232",
  "C7240",
  "C7241",
  "C7242",
  "C7250",
  "C7259",
  "C729",
  "C73",
  "C7400",
  "C7401",
  "C7402",
  "C7410",
  "C7411",
  "C7412",
  "C7490",
  "C7491",
  "C7492",
  "C750",
  "C751",
  "C752",
  "C753",
  "C754",
  "C755",
  "C758",
  "C759",
  "C760",
  "C761",
  "C762",
  "C763",
  "C7640",
  "C7641",
  "C7642",
  "C7650",
  "C7651",
  "C7652",
  "C768",
  "C770",
  "C771",
  "C772",
  "C773",
  "C774",
  "C775",
  "C778",
  "C779",
  "C7800",
  "C7801",
  "C7802",
  "C781",
  "C782",
  "C7830",
  "C7839",
  "C784",
  "C785",
  "C786",
  "C787",
  "C7880",
  "C7889",
  "C7900",
  "C7901",
  "C7902",
  "C7910",
  "C7911",
  "C7919",
  "C792",
  "C7931",
  "C7932",
  "C7940",
  "C7949",
  "C7951",
  "C7952",
  "C7960",
  "C7961",
  "C7962",
  "C7963",
  "C7970",
  "C7971",
  "C7972",
  "C7981",
  "C7982",
  "C7989",
  "C799",
  "C7A00",
  "C7A010",
  "C7A011",
  "C7A012",
  "C7A019",
  "C7A020",
  "C7A021",
  "C7A022",
  "C7A023",
  "C7A024",
  "C7A025",
  "C7A026",
  "C7A029",
  "C7A090",
  "C7A091",
  "C7A092",
  "C7A093",
  "C7A094",
  "C7A095",
  "C7A096",
  "C7A098",
  "C7A1",
  "C7A8",
  "C7B00",
  "C7B01",
  "C7B02",
  "C7B03",
  "C7B04",
  "C7B09",
  "C7B1",
  "C7B8",
  "C800",
  "C801",
  "C802",
  "C8100",
  "C8101",
  "C8102",
  "C8103",
  "C8104",
  "C8105",
  "C8106",
  "C8107",
  "C8108",
  "C8109",
  "C810A",
  "C8110",
  "C8111",
  "C8112",
  "C8113",
  "C8114",
  "C8115",
  "C8116",
  "C8117",
  "C8118",
  "C8119",
  "C811A",
  "C8120",
  "C8121",
  "C8122",
  "C8123",
  "C8124",
  "C8125",
  "C8126",
  "C8127",
  "C8128",
  "C8209",
  "C820A",
  "C8210",
  "C8211",
  "C8212",
  "C8213",
  "C8214",
  "C8215",
  "C8216",
  "C8217",
  "C8218",
  "C8219",
  "C821A",
  "C8220",
  "C8221",
  "C8222",
  "C8223",
  "C8224",
  "C8225",
  "C8226",
  "C8227",
  "C8228",
  "C8229",
  "C822A",
  "C8230",
  "C8231",
  "C8232",
  "C8233",
  "C8234",
  "C8235",
  "C8236",
  "C8237",
  "C8238",
  "C8239",
  "C823A",
  "C8240",
  "C8241",
  "C8242",
  "C8243",
  "C8244",
  "C8245",
  "C8246",
  "C8247",
  "C8248",
  "C8249",
  "C824A",
  "C8250",
  "C8251",
  "C8252",
  "C8253",
  "C8254",
  "C8255",
  "C8256",
  "C8257",
  "C8258",
  "C8259",
  "C825A",
  "C8260",
  "C8261",
  "C8262",
  "C8263",
  "C8264",
  "C8265",
  "C8266",
  "C8267",
  "C8268",
  "C8269",
  "C826A",
  "C8280",
  "C8281",
  "C8282",
  "C8283",
  "C8284",
  "C8285",
  "C8286",
  "C8287",
  "C8288",
  "C8289",
  "C828A",
  "C8290",
  "C8291",
  "C8292",
  "C8293",
  "C8294",
  "C8295",
  "C8296",
  "C8297",
  "C8298",
  "C8299",
  "C829A",
  "C8300",
  "C8301",
  "C8302",
  "C8303",
  "C8304",
  "C8305",
  "C8306",
  "C8307",
  "C8308",
  "C8309",
  "C830A",
  "C8310",
  "C8311",
  "C8312",
  "C8313",
  "C8314",
  "C8315",
  "C8316",
  "C8317",
  "C8318",
  "C8319",
  "C831A",
  "C8330",
  "C8331",
  "C8332",
  "C8333",
  "C8334",
  "C8335",
  "C8336",
  "C8337",
  "C8338",
  "C8339",
  "C83390",
  "C83398",
  "C833A",
  "C8350",
  "C8351",
  "C8352",
  "C8353",
  "C8354",
  "C8355",
  "C8356",
  "C8357",
  "C8358",
  "C8359",
  "C835A",
  "C8370",
  "C8371",
  "C8372",
  "C8373",
  "C8374",
  "C8375",
  "C8376",
  "C8377",
  "C8378",
  "C8379",
  "C837A",
  "C8380",
  "C8381",
  "C8382",
  "C8383",
  "C8384",
  "C8385",
  "C8386",
  "C8387",
  "C8388",
  "C8389",
  "C838A",
  "C8390",
  "C8391",
  "C8392",
  "C8393",
  "C8394",
  "C8395",
  "C8396",
  "C8397",
  "C8398",
  "C8399",
  "C839A",
  "C8400",
  "C8401",
  "C8402",
  "C8403",
  "C8404",
  "C8405",
  "C8406",
  "C8407",
  "C8408",
  "C8409",
  "C840A",
  "C8410",
  "C8411",
  "C8412",
  "C8413",
  "C8414",
  "C8415",
  "C8416",
  "C8417",
  "C8418",
  "C8419",
  "C841A",
  "C8440",
  "C8441",
  "C8442",
  "C8443",
  "C8444",
  "C8445",
  "C8446",
  "C8447",
  "C8448",
  "C8449",
  "C844A",
  "C8460",
  "C8461",
  "C8462",
  "C8463",
  "C8464",
  "C8465",
  "C8466",
  "C8467",
  "C8468",
  "C8469",
  "C846A",
  "C8470",
  "C8471",
  "C8472",
  "C8473",
  "C8474",
  "C8475",
  "C8476",
  "C8477",
  "C8478",
  "C8479",
  "C847A",
  "C847B",
  "C8490",
  "C8491",
  "C8492",
  "C8493",
  "C8494",
  "C8495",
  "C8496",
  "C8497",
  "C8498",
  "C8499",
  "C849A",
  "C84A0",
  "C84A1",
  "C84A2",
  "C84A3",
  "C84A4",
  "C84A5",
  "C84A6",
  "C84A7",
  "C84A8",
  "C84A9",
  "C84AA",
  "C84Z0",
  "C84Z1",
  "C84Z2",
  "C84Z3",
  "C84Z4",
  "C84Z5",
  "C84Z6",
  "C84Z7",
  "C84Z8",
  "C84Z9",
  "C84ZA",
  "C8510",
  "C8511",
  "C8512",
  "C8513",
  "C8514",
  "C8515",
  "C8516",
  "C8517",
  "C8518",
  "C8519",
  "C851A",
  "C8520",
  "C8521",
  "C8522",
  "C8523",
  "C8524",
  "C8525",
  "C8526",
  "C8527",
  "C8528",
  "C8529",
  "C852A",
  "C8580",
  "C8581",
  "C8582",
  "C8583",
  "C8584",
  "C8585",
  "C8586",
  "C8587",
  "C8588",
  "C8589",
  "C858A",
  "C8590",
  "C8591",
  "C8592",
  "C8593",
  "C8594",
  "C8595",
  "C8596",
  "C8597",
  "C8598",
  "C8599",
  "C859A",
  "C860",
  "C8600",
  "C8601",
  "C861",
  "C8610",
  "C8611",
  "C862",
  "C8620",
  "C8621",
  "C863",
  "C8630",
  "C8631",
  "C864",
  "C8640",
  "C8641",
  "C865",
  "C8650",
  "C8651",
  "C866",
  "C8660",
  "C8661",
  "C880",
  "C8800",
  "C8801",
  "C882",
  "C8820",
  "C8821",
  "C883",
  "C8830",
  "C8831",
  "C884",
  "C8840",
  "C8841",
  "C888",
  "C8880",
  "C8881",
  "C889",
  "C8890",
  "C8891",
  "C9000",
  "C9001",
  "C9002",
  "C9010",
  "C9011",
  "C9012",
  "C9020",
  "C9021",
  "C9022",
  "C9030",
  "C9031",
  "C9032",
  "C9100",
  "C9101",
  "C9102",
  "C9110",
  "C9111",
  "C9112",
  "C9130",
  "C9131",
  "C9132",
  "C9140",
  "C9141",
  "C9142",
  "C9150",
  "C9151",
  "C9152",
  "C9160",
  "C9161",
  "C9162",
  "C9190",
  "C9191",
  "C9192",
  "C91A0",
  "C91A1",
  "C91A2",
  "C91Z0",
  "C91Z1",
  "C91Z2",
  "C9200",
  "C9201",
  "C9202",
  "C9210",
  "C9211",
  "C9212",
  "C9220",
  "C9221",
  "C9222",
  "C9230",
  "C9231",
  "C9232",
  "C9240",
  "C9241",
  "C9242",
  "C9250",
  "C9251",
  "C9252",
  "C9260",
  "C9261",
  "C9262",
  "C9290",
  "C9291",
  "C9292",
  "C92A0",
  "C92A1",
  "C92A2",
  "C92Z0",
  "C92Z1",
  "C92Z2",
  "C9300",
  "C9301",
  "C9302",
  "C9310",
  "C9311",
  "C9312",
  "C9330",
  "C9331",
  "C9332",
  "C9390",
  "C9391",
  "C9392",
  "C93Z0",
  "C93Z1",
  "C93Z2",
  "C9400",
  "C9401",
  "C9402",
  "C9420",
  "C9421",
  "C9422",
  "C9430",
  "C9431",
  "C9432",
  "C9440",
  "C9441",
  "C9442",
  "C946",
  "C9480",
  "C9481",
  "C9482",
  "C9500",
  "C9501",
  "C9502",
  "C9510",
  "C9511",
  "C9512",
  "C9590",
  "C9591",
  "C9592",
  "C960",
  "C9620",
  "C9621",
  "C9622",
  "C9629",
  "C964",
  "C965",
  "C966",
  "C969",
  "C96A",
  "C96Z",
  "D030",
  "D0310",
  "D03111",
  "D03112",
  "D03121",
  "D03122",
  "D0320",
  "D0321",
  "D0322",
  "D0330",
  "D0339",
  "D034",
  "D0351",
  "D0352",
  "D0359",
  "D0360",
  "D0361",
  "D0362",
  "D0370",
  "D0371",
  "D0372",
  "D038",
  "D039",
  "D1802",
  "D320",
  "D321",
  "D329",
  "D330",
  "D331",
  "D332",
  "D333",
  "D334",
  "D337",
  "D339",
  "D352",
  "D353",
  "D354",
  "D3A00",
  "D3A010",
  "D3A011",
  "D3A012",
  "D3A019",
  "D3A020",
  "D3A021",
  "D3A022",
  "D3A023",
  "D3A024",
  "D3A025",
  "D3A026",
  "D3A029",
  "D3A090",
  "D3A091",
  "D3A092",
  "D3A093",
  "D3A094",
  "D3A095",
  "D3A096",
  "D3A098",
  "D3A8",
  "D420",
  "D421",
  "D429",
  "D430",
  "D431",
  "D432",
  "D433",
  "D434",
  "D438",
  "D439",
  "D443",
  "D444",
  "D445",
  "D446",
  "D447",
  "D45",
  "D460",
  "D461",
  "D4620",
  "D4621",
  "D4622",
  "D464",
  "D469",
  "D46A",
  "D46B",
  "D46C",
  "D46Z",
  "D471",
  "D473",
  "D474",
  "D479",
  "D47Z1",
  "D47Z2",
  "D47Z9",
  "D496",
  "D561",
  "D562",
  "D565",
  "D5700",
  "D5701",
  "D5702",
  "D5703",
  "D5704",
  "D5709",
  "D571",
  "D5720",
  "D57211",
  "D57212",
  "D57213",
  "D57214",
  "D57218",
  "D57219",
  "D5740",
  "D57411",
  "D57412",
  "D57413",
  "D57414",
  "D57418",
  "D57419",
  "D5742",
  "D57431",
  "D57432",
  "D57433",
  "D57434",
  "D57438",
  "D57439",
  "D5744",
  "D57451",
  "D57452",
  "D57453",
  "D57454",
  "D57458",
  "D57459",
  "D5780",
  "D57811",
  "D57812",
  "D57813",
  "D57814",
  "D57818",
  "D57819",
  "D5910",
  "D5911",
  "D5912",
  "D5913",
  "D5919",
  "D5930",
  "D5931",
  "D5932",
  "D5939",
  "D594",
  "D595",
  "D596",
  "D598",
  "D599",
  "D600",
  "D608",
  "D609",
  "D6101",
  "D6102",
  "D6103",
  "D6109",
  "D612",
  "D613",
  "D61818",
  "D6182",
  "D6189",
  "D640",
  "D641",
  "D643",
  "D644",
  "D66",
  "D67",
  "D6800",
  "D6801",
  "D68020",
  "D68021",
  "D68022",
  "D68023",
  "D68029",
  "D6803",
  "D6804",
  "D6809",
  "D681",
  "D682",
  "D68311",
  "D691",
  "D693",
  "D6941",
  "D6942",
  "D6949",
  "D700",
  "D704",
  "D71",
  "D720",
  "D7581",
  "D7584",
  "D761",
  "D763",
  "D800",
  "D802",
  "D803",
  "D804",
  "D805",
  "D810",
  "D811",
  "D812",
  "D8130",
  "D8131",
  "D8132",
  "D8139",
  "D814",
  "D815",
  "D816",
  "D817",
  "D8182",
  "D8189",
  "D819",
  "D820",
  "D821",
  "D830",
  "D831",
  "D832",
  "D838",
  "D839",
  "D841",
  "D863",
  "D8686",
  "D8687",
  "D89810",
  "D89811",
  "D89812",
  "D89813",
  "D8984",
  "E035",
  "E0800",
  "E0801",
  "E0810",
  "E0811",
  "E0821",
  "E0822",
  "E0829",
  "E08311",
  "E08311",
  "E08319",
  "E083211",
  "E083211",
  "E083212",
  "E083212",
  "E083213",
  "E083213",
  "E083219",
  "E083219",
  "E083291",
  "E083292",
  "E083293",
  "E083299",
  "E083311",
  "E083311",
  "E083312",
  "E083312",
  "E083313",
  "E083313",
  "E083319",
  "E083319",
  "E083391",
  "E083392",
  "E083393",
  "E083399",
  "E083411",
  "E083411",
  "E083412",
  "E103412",
  "E103413",
  "E103413",
  "E103419",
  "E103419",
  "E103491",
  "E103492",
  "E103493",
  "E103499",
  "E103511",
  "E103511",
  "E103512",
  "E103512",
  "E103513",
  "E103513",
  "E103519",
  "E103519",
  "E103521",
  "E103521",
  "E103522",
  "E103522",
  "E103523",
  "E103523",
  "E103529",
  "E103529",
  "E103531",
  "E103531",
  "E103532",
  "E103532",
  "E103533",
  "E103533",
  "E103539",
  "E103539",
  "E103541",
  "E103541",
  "E103542",
  "E103542",
  "E103543",
  "E103543",
  "E103549",
  "E103549",
  "E103551",
  "E103551",
  "E103552",
  "E103552",
  "E103553",
  "E103553",
  "E103559",
  "E103559",
  "E103591",
  "E103591",
  "E103592",
  "E103592",
  "E103593",
  "E103593",
  "E103599",
  "E103599",
  "E1036",
  "E1037X1",
  "E1037X2",
  "E1037X3",
  "E1037X9",
  "E1039",
  "E1040",
  "E1041",
  "E1042",
  "E1043",
  "E1044",
  "E1049",
  "E1051",
  "E1052",
  "E1052",
  "E1059",
  "E10610",
  "E10618",
  "E10620",
  "E10621",
  "E10621",
  "E10622",
  "E10622",
  "E10628",
  "E10630",
  "E10638",
  "E10641",
  "E10649",
  "E1065",
  "E1069",
  "E108",
  "E109",
  "E1100",
  "E1101",
  "E1110",
  "E1111",
  "E1121",
  "E1122",
  "E1129",
  "E11311",
  "E11311",
  "E11319",
  "E113211",
  "E113211",
  "E113212",
  "E113212",
  "E113213",
  "E113213",
  "E113219",
  "E113219",
  "E113291",
  "E113292",
  "E113293",
  "E113299",
  "E113311",
  "E113311",
  "E113312",
  "E113312",
  "E113313",
  "E113313",
  "E113319",
  "E113319",
  "E113391",
  "E113392",
  "E113393",
  "E113399",
  "E113411",
  "E113411",
  "E113412",
  "E113412",
  "E113413",
  "E113413",
  "E113419",
  "E113419",
  "E113491",
  "E113492",
  "E113493",
  "E113499",
  "E113511",
  "E113511",
  "E113512",
  "E113512",
  "E113513",
  "E113513",
  "E113519",
  "E113519",
  "E113521",
  "E113521",
  "E113522",
  "E113522",
  "E113523",
  "E113523",
  "E113529",
  "E113529",
  "E113531",
  "E113531",
  "E113532",
  "E113532",
  "E113533",
  "E113533",
  "E113539",
  "E113539",
  "E113541",
  "E113541",
  "E113542",
  "E113542",
  "E113543",
  "E113543",
  "E113549",
  "E113549",
  "E113551",
  "E113551",
  "E113552",
  "E113552",
  "E113553",
  "E113553",
  "E113559",
  "E113559",
  "E113591",
  "E113591",
  "E113592",
  "E113592",
  "E113593",
  "E113593",
  "E113599",
  "E113599",
  "E1136",
  "E1137X1",
  "E1137X2",
  "E1137X3",
  "E1137X9",
  "E1139",
  "E1140",
  "E1141",
  "E1142",
  "E1143",
  "E1144",
  "E1149",
  "E1151",
  "E1152",
  "E1152",
  "E1159",
  "E11610",
  "E11618",
  "E11620",
  "E11621",
  "E11621",
  "E11622",
  "E11622",
  "E11628",
  "E11630",
  "E11638",
  "E11641",
  "E11649",
  "E1165",
  "E1169",
  "E118",
  "E119",
  "E1300",
  "E1301",
  "E1310",
  "E1311",
  "E1321",
  "E1322",
  "E1329",
  "E13311",
  "E13311",
  "E13319",
  "E133211",
  "E133211",
  "E133212",
  "E133212",
  "E133213",
  "E133213",
  "E133219",
  "E133219",
  "E133291",
  "E133292",
  "E133293",
  "E133299",
  "E133311",
  "E133311",
  "E133312",
  "E133312",
  "E133313",
  "E133313",
  "E133319",
  "E133319",
  "E133391",
  "E133392",
  "E133393",
  "E133399",
  "E133411",
  "E133411",
  "E133412",
  "E133412",
  "E133413",
  "E133413",
  "E133419",
  "E133419",
  "E133491",
  "E133492",
  "E133493",
  "E133499",
  "E133511",
  "E133511",
  "E133512",
  "E133512",
  "E133513",
  "E133513",
  "E133519",
  "E133519",
  "E133521",
  "E133521",
  "E133522",
  "E133522",
  "E133523",
  "E133523",
  "E133529",
  "E133529",
  "E133531",
  "E133531",
  "E133532",
  "E133532",
  "E133533",
  "E133533",
  "E133539",
  "E133539",
  "E133541",
  "E133541",
  "E133542",
  "E133542",
  "E133543",
  "E133543",
  "E133549",
  "E133549",
  "E133551",
  "E133551",
  "E133552",
  "E133552",
  "E133553",
  "E133553",
  "E133559",
  "E133559",
  "E133591",
  "E133591",
  "E133592",
  "E133592",
  "E133593",
  "E133593",
  "E133599",
  "E133599",
  "E1336",
  "E1337X1",
  "E1337X2",
  "E1337X3",
  "E1337X9",
  "E1339",
  "E1340",
  "E1341",
  "E1342",
  "E1343",
  "E1344",
  "E1349",
  "E1351",
  "E1352",
  "E1352",
  "E1359",
  "E13610",
  "E13618",
  "E13620",
  "E13621",
  "E13621",
  "E13622",
  "E13622",
  "E13628",
  "E13630",
  "E13638",
  "E13641",
  "E13649",
  "E1365",
  "E1369",
  "E138",
  "E139",
  "E220",
  "E240",
  "E271",
  "E310",
  "E311",
  "E3120",
  "E3121",
  "E3122",
  "E3123",
  "E318",
  "E319",
  "E340",
  "E3400",
  "E3401",
  "E3409",
  "E6601",
  "E662",
  "E66813",
  "E7253",
  "E7400",
  "E7401",
  "E7402",
  "E7403",
  "E7404",
  "E7405",
  "E7409",
  "E7521",
  "E7522",
  "E7601",
  "E7602",
  "E7603",
  "E761",
  "E76210",
  "E76211",
  "E76219",
  "E7622",
  "E7629",
  "E763",
  "E791",
  "E800",
  "E801",
  "E8020",
  "E8021",
  "E8029",
  "E803",
  "E8300",
  "E8301",
  "E8309",
  "E8331",
  "E840",
  "E8411",
  "E8419",
  "E848",
  "E849",
  "E850",
  "E851",
  "E852",
  "E853",
  "E854",
  "E8581",
  "E8582",
  "E8589",
  "E859",
  "E8801",
  "E8889",
  "F0150",
  "F01511",
  "F01518",
  "F0152",
  "F0153",
  "F0154",
  "F01A0",
  "F01A11",
  "F01A18",
  "F01A2",
  "F01A3",
  "F01A4",
  "F01B0",
  "F01B11",
  "F01B18",
  "F01B2",
  "F01B3",
  "F01B4",
  "F01C0",
  "F01C11",
  "F01C18",
  "F01C2",
  "F01C3",
  "F01C4",
  "F0280",
  "F02811",
  "F02818",
  "F0282",
  "F0283",
  "F0284",
  "F02A0",
  "F02A11",
  "F02A18",
  "F02A2",
  "F02A3",
  "F02A4",
  "F02B0",
  "F02B11",
  "F02B18",
  "F02B2",
  "F02B3",
  "F02B4",
  "F02C0",
  "F02C11",
  "F02C18",
  "F02C2",
  "F02C3",
  "F02C4",
  "F0390",
  "F03911",
  "F03918",
  "F0392",
  "F0393",
  "F0394",
  "F03A0",
  "F03A11",
  "F03A18",
  "F03A2",
  "F03A3",
  "F03A4",
  "F03B0",
  "F03B11",
  "F03B18",
  "F03B2",
  "F03B3",
  "F03B4",
  "F03C0",
  "F03C11",
  "F03C18",
  "F03C2",
  "F03C3",
  "F03C4",
  "F10130",
  "F10131",
  "F10132",
  "F10139",
  "F1014",
  "F10150",
  "F10151",
  "F10159",
  "F10180",
  "F10181",
  "F10182",
  "F10188",
  "F1020",
  "F1021",
  "F10220",
  "F10221",
  "F10229",
  "F10230",
  "F10231",
  "F10232",
  "F10239",
  "F1024",
  "F10250",
  "F10251",
  "F10259",
  "F1026",
  "F1027",
  "F10280",
  "F10281",
  "F10282",
  "F10288",
  "F1029",
  "F10930",
  "F10931",
  "F10932",
  "F10939",
  "F1094",
  "F10950",
  "F10951",
  "F10959",
  "F1096",
  "F1097",
  "F10980",
  "F10981",
  "F10982",
  "F10988",
  "F1110",
  "F1111",
  "F11120",
  "F11121",
  "F11122",
  "F11129",
  "F1113",
  "F1114",
  "F11150",
  "F11151",
  "F11159",
  "F11181",
  "F11182",
  "F11188",
  "F1119",
  "F1120",
  "F1121",
  "F11220",
  "F11221",
  "F11222",
  "F11229",
  "F1123",
  "F1124",
  "F11250",
  "F11251",
  "F11259",
  "F11281",
  "F11282",
  "F11288",
  "F1129",
  "F11920",
  "F11921",
  "F11922",
  "F11929",
  "F1193",
  "F1194",
  "F11950",
  "F11951",
  "F11959",
  "F11981",
  "F11982",
  "F11988",
  "F1199",
  "F1213",
  "F12150",
  "F12151",
  "F12159",
  "F12180",
  "F12188",
  "F1220",
  "F1221",
  "F12220",
  "F12221",
  "F12222",
  "F12229",
  "F1223",
  "F12250",
  "F12251",
  "F12259",
  "F12280",
  "F12288",
  "F1229",
  "F1293",
  "F12950",
  "F12951",
  "F12959",
  "F12980",
  "F12988",
  "F1310",
  "F1311",
  "F13120",
  "F13121",
  "F13129",
  "F13130",
  "F13131",
  "F13132",
  "F13139",
  "F1314",
  "F13150",
  "F13151",
  "F13159",
  "F13180",
  "F13181",
  "F13182",
  "F13188",
  "F1319",
  "F1320",
  "F1321",
  "F13220",
  "F13221",
  "F13229",
  "F13230",
  "F13231",
  "F13232",
  "F13239",
  "F1324",
  "F13250",
  "F13251",
  "F13259",
  "F1326",
  "F1327",
  "F13280",
  "F13281",
  "F13282",
  "F13288",
  "F1329",
  "F13920",
  "F13921",
  "F13929",
  "F13930",
  "F13931",
  "F13932",
  "F13939",
  "F1394",
  "F13950",
  "F13951",
  "F13959",
  "F1396",
  "F1397",
  "F13980",
  "F13981",
  "F13982",
  "F13988",
  "F1399",
  "F1410",
  "F1411",
  "F14120",
  "F14121",
  "F14122",
  "F14129",
  "F1413",
  "F1414",
  "F14150",
  "F14151",
  "F14159",
  "F14180",
  "F14181",
  "F14182",
  "F14188",
  "F1419",
  "F1420",
  "F1421",
  "F14220",
  "F14221",
  "F14222",
  "F14229",
  "F1423",
  "F1424",
  "F14250",
  "F14251",
  "F14259",
  "F14280",
  "F14281",
  "F14282",
  "F14288",
  "F1429",
  "F14920",
  "F14921",
  "F14922",
  "F14929",
  "F1493",
  "F1494",
  "F14950",
  "F14951",
  "F14959",
  "F14980",
  "F14981",
  "F14982",
  "F14988",
  "F1499",
  "F1510",
  "F1511",
  "F15120",
  "F15121",
  "F15122",
  "F15129",
  "F1513",
  "F1514",
  "F15150",
  "F15151",
  "F15159",
  "F15180",
  "F15181",
  "F15182",
  "F15188",
  "F1519",
  "F1520",
  "F1521",
  "F15220",
  "F15221",
  "F15222",
  "F15229",
  "F1523",
  "F1524",
  "F15250",
  "F15251",
  "F15259",
  "F15280",
  "F15281",
  "F15282",
  "F15288",
  "F1529",
  "F15920",
  "F15921",
  "F15922",
  "F15929",
  "F1593",
  "F1594",
  "F15950",
  "F15951",
  "F15959",
  "F15980",
  "F15981",
  "F15982",
  "F15988",
  "F1599",
  "F1610",
  "F1611",
  "F16120",
  "F16121",
  "F16122",
  "F16129",
  "F1614",
  "F16150",
  "F16151",
  "F16159",
  "F16180",
  "F16183",
  "F16188",
  "F1619",
  "F1620",
  "F1621",
  "F16220",
  "F16221",
  "F16229",
  "F1624",
  "F16250",
  "F16251",
  "F16259",
  "F16280",
  "F16283",
  "F16288",
  "F1629",
  "F16920",
  "F16921",
  "F16929",
  "F1694",
  "F16950",
  "F16951",
  "F16959",
  "F16980",
  "F16983",
  "F16988",
  "F1699",
  "F1810",
  "F1811",
  "F18120",
  "F18121",
  "F18129",
  "F1814",
  "F18150",
  "F18151",
  "F18159",
  "F1817",
  "F18180",
  "F18188",
  "F1819",
  "F1820",
  "F1821",
  "F18220",
  "F18221",
  "F18229",
  "F1824",
  "F18250",
  "F18251",
  "F18259",
  "F1827",
  "F18280",
  "F18288",
  "F1829",
  "F18920",
  "F18921",
  "F18929",
  "F1894",
  "F18950",
  "F18951",
  "F18959",
  "F1897",
  "F18980",
  "F18988",
  "F1899",
  "F1910",
  "F1911",
  "F19120",
  "F19121",
  "F19122",
  "F19129",
  "F19130",
  "F19131",
  "F19132",
  "F19139",
  "F1914",
  "F19150",
  "F19151",
  "F19159",
  "F1916",
  "F1917",
  "F19180",
  "F19181",
  "F19182",
  "F19188",
  "F1919",
  "F1920",
  "F1921",
  "F19220",
  "F19221",
  "F19222",
  "F19229",
  "F19230",
  "F19231",
  "F19232",
  "F19239",
  "F1924",
  "F19250",
  "F19251",
  "F19259",
  "F1926",
  "F1927",
  "F19280",
  "F19281",
  "F19282",
  "F19288",
  "F1929",
  "F19920",
  "F19921",
  "F19922",
  "F19929",
  "F19930",
  "F19931",
  "F19932",
  "F19939",
  "F1994",
  "F19950",
  "F19951",
  "F19959",
  "F1996",
  "F1997",
  "F19980",
  "F19981",
  "F19982",
  "F19988",
  "F1999",
  "F200",
  "F201",
  "F202",
  "F203",
  "F205",
  "F2081",
  "F2089",
  "F209",
  "F21",
  "F22",
  "F23",
  "F24",
  "F250",
  "F251",
  "F258",
  "F259",
  "F28",
  "F29",
  "F3010",
  "F3011",
  "F3012",
  "F3013",
  "F302",
  "F303",
  "F308",
  "F309",
  "F310",
  "F3110",
  "F3111",
  "F3112",
  "F3113",
  "F312",
  "F3130",
  "F3131",
  "F3132",
  "F314",
  "F315",
  "F3160",
  "F3161",
  "F3162",
  "F3163",
  "F3164",
  "F3171",
  "F3173",
  "F3175",
  "F3177",
  "F3181",
  "F3189",
  "F319",
  "F321",
  "F322",
  "F323",
  "F331",
  "F332",
  "F333",
  "F440",
  "F441",
  "F4481",
  "F481",
  "F5000",
  "F5001",
  "F50010",
  "F50011",
  "F50012",
  "F50013",
  "F50014",
  "F50019",
  "F5002",
  "F50020",
  "F50021",
  "F50022",
  "F50023",
  "F50024",
  "F50029",
  "F502",
  "F5020",
  "F5021",
  "F5022",
  "F5023",
  "F5024",
  "F5025",
  "F531",
  "F600",
  "F601",
  "F602",
  "F603",
  "F604",
  "F605",
  "F606",
  "F607",
  "F6081",
  "F6089",
  "F609",
  "G041",
  "G0482",
  "G0489",
  "G0491",
  "G054",
  "G10",
  "G110",
  "G1110",
  "G1111",
  "G1119",
  "G112",
  "G113",
  "G114",
  "G115",
  "G116",
  "G118",
  "G119",
  "G120",
  "G121",
  "G1220",
  "G1221",
  "G1222",
  "G1223",
  "G1224",
  "G1225",
  "G1229",
  "G128",
  "G129",
  "G14",
  "G20A1",
  "G20A2",
  "G20B1",
  "G20B2",
  "G20C",
  "G213",
  "G214",
  "G218",
  "G219",
  "G230",
  "G231",
  "G232",
  "G233",
  "G238",
  "G239",
  "G300",
  "G301",
  "G308",
  "G309",
  "G3101",
  "G3109",
  "G3180",
  "G3181",
  "G3182",
  "G3183",
  "G3186",
  "G320",
  "G3281",
  "G35",
  "G360",
  "G361",
  "G368",
  "G369",
  "G370",
  "G371",
  "G372",
  "G373",
  "G374",
  "G375",
  "G3781",
  "G3789",
  "G379",
  "G40001",
  "G40009",
  "G40011",
  "G40019",
  "G40101",
  "G40109",
  "G40111",
  "G40119",
  "G40201",
  "G40209",
  "G40211",
  "G40219",
  "G40301",
  "G40309",
  "G40311",
  "G40319",
  "G40401",
  "G40409",
  "G40411",
  "G40419",
  "G4042",
  "G40501",
  "G40509",
  "G40801",
  "G40802",
  "G40803",
  "G40804",
  "G40811",
  "G40812",
  "G40813",
  "G40814",
  "G40821",
  "G40822",
  "G40823",
  "G40824",
  "G40833",
  "G40834",
  "G40841",
  "G40842",
  "G40843",
  "G40844",
  "G4089",
  "G40901",
  "G40909",
  "G40911",
  "G40919",
  "G40A01",
  "G40A09",
  "G40A11",
  "G40A19",
  "G40B01",
  "G40B09",
  "G40B11",
  "G40B19",
  "G40C01",
  "G40C09",
  "G40C11",
  "G40C19",
  "G546",
  "G547",
  "G6181",
  "G6182",
  "G7000",
  "G7001",
  "G701",
  "G702",
  "G7080",
  "G7081",
  "G7089",
  "G709",
  "G7100",
  "G7101",
  "G7102",
  "G71031",
  "G71032",
  "G71033",
  "G710340",
  "G710341",
  "G710342",
  "G710349",
  "G71035",
  "G71038",
  "G71039",
  "G7109",
  "G7111",
  "G7120",
  "G7121",
  "G71220",
  "G71228",
  "G7129",
  "G7241",
  "G731",
  "G733",
  "G800",
  "G801",
  "G802",
  "G803",
  "G804",
  "G808",
  "G809",
  "G8100",
  "G8101",
  "G8102",
  "G8103",
  "G8104",
  "G8110",
  "G8111",
  "G8112",
  "G8113",
  "G8114",
  "G8190",
  "G8191",
  "G8192",
  "G8193",
  "G8194",
  "G8220",
  "G8221",
  "G8222",
  "G8250",
  "G8251",
  "G8252",
  "G8253",
  "G8254",
  "G830",
  "G8310",
  "G8311",
  "G8312",
  "G8313",
  "G8314",
  "G8320",
  "G8321",
  "G8322",
  "G8323",
  "G8324",
  "G8330",
  "G8331",
  "G8332",
  "G8333",
  "G8334",
  "G834",
  "G835",
  "G8381",
  "G8382",
  "G8383",
  "G8384",
  "G8389",
  "G839",
  "G901",
  "G903",
  "G90B",
  "G910",
  "G911",
  "G912",
  "G913",
  "G914",
  "G918",
  "G919",
  "G931",
  "G9342",
  "G9343",
  "G9344",
  "G9345",
  "G935",
  "G936",
  "G937",
  "G950",
  "G9511",
  "G9519",
  "G9520",
  "G9529",
  "G9581",
  "G9589",
  "G959",
  "G992",
  "H348110",
  "H348111",
  "H348112",
  "H348120",
  "H348121",
  "H348122",
  "H348130",
  "H348131",
  "H348132",
  "H348190",
  "H348191",
  "H348192",
  "H348310",
  "H348311",
  "H348312",
  "H348320",
  "H348321",
  "H348322",
  "H348330",
  "H348331",
  "H348332",
  "H348390",
  "H348391",
  "H348392",
  "H353210",
  "H353211",
  "H353212",
  "H353213",
  "H353220",
  "H353221",
  "H353222",
  "H353223",
  "H353230",
  "H353231",
  "H353232",
  "H353233",
  "H353290",
  "H353291",
  "H353292",
  "H353293",
  "H36811",
  "H36812",
  "H36813",
  "H36819",
  "H36821",
  "H36821",
  "H36822",
  "H36822",
  "H36823",
  "H36823",
  "H36829",
  "H36829",
  "H4310",
  "H4311",
  "H4312",
  "H4313",
  "I0981",
  "I110",
  "I120",
  "I130",
  "I1311",
  "I132",
  "I132",
  "I200",
  "I2101",
  "I2102",
  "I2109",
  "I2111",
  "I2119",
  "I2121",
  "I2129",
  "I213",
  "I214",
  "I219",
  "I21A1",
  "I21A9",
  "I21B",
  "I220",
  "I221",
  "I222",
  "I228",
  "I229",
  "I230",
  "I231",
  "I232",
  "I233",
  "I234",
  "I235",
  "I236",
  "I237",
  "I238",
  "I240",
  "I241",
  "I2481",
  "I2489",
  "I249",
  "I25110",
  "I25700",
  "I25710",
  "I25720",
  "I25730",
  "I25750",
  "I25760",
  "I25790",
  "I2601",
  "I2602",
  "I2603",
  "I2604",
  "I2609",
  "I2690",
  "I2692",
  "I2693",
  "I2694",
  "I2695",
  "I2696",
  "I2699",
  "I270",
  "I271",
  "I2720",
  "I2721",
  "I2722",
  "I2723",
  "I2724",
  "I2729",
  "I2781",
  "I2782",
  "I2783",
  "I2789",
  "I279",
  "I280",
  "I281",
  "I288",
  "I289",
  "I3131",
  "I420",
  "I421",
  "I422",
  "I423",
  "I424",
  "I425",
  "I426",
  "I428",
  "I429",
  "I43",
  "I442",
  "I462",
  "I468",
  "I469",
  "I470",
  "I4720",
  "I4721",
  "I4729",
  "I479",
  "I480",
  "I4811",
  "I4819",
  "I4820",
  "I4821",
  "I483",
  "I484",
  "I4891",
  "I4892",
  "I4901",
  "I4902",
  "I492",
  "I495",
  "I501",
  "I5020",
  "I5021",
  "I5022",
  "I5023",
  "I5030",
  "I5031",
  "I5032",
  "I5033",
  "I5040",
  "I5041",
  "I5042",
  "I5043",
  "I50810",
  "I50811",
  "I50812",
  "I50813",
  "I50814",
  "I5082",
  "I5083",
  "I5084",
  "I5089",
  "I509",
  "I511",
  "I512",
  "I514",
  "I515",
  "I6000",
  "I6001",
  "I6002",
  "I6010",
  "I6011",
  "I6012",
  "I602",
  "I6030",
  "I6031",
  "I6032",
  "I604",
  "I6050",
  "I6051",
  "I6052",
  "I606",
  "I607",
  "I608",
  "I609",
  "I610",
  "I611",
  "I612",
  "I613",
  "I614",
  "I615",
  "I616",
  "I618",
  "I619",
  "I6200",
  "I6201",
  "I6202",
  "I6203",
  "I621",
  "I629",
  "I6300",
  "I63011",
  "I63012",
  "I63013",
  "I63019",
  "I6302",
  "I63031",
  "I63032",
  "I63033",
  "I63039",
  "I6309",
  "I6310",
  "I63111",
  "I63112",
  "I63113",
  "I63119",
  "I6312",
  "I63131",
  "I63132",
  "I63133",
  "I63139",
  "I6319",
  "I6320",
  "I63211",
  "I63212",
  "I63213",
  "I63219",
  "I6322",
  "I63231",
  "I63232",
  "I63233",
  "I63239",
  "I6329",
  "I6330",
  "I63311",
  "I63312",
  "I63313",
  "I63319",
  "I63321",
  "I63322",
  "I63323",
  "I63329",
  "I63331",
  "I63332",
  "I63333",
  "I63339",
  "I63341",
  "I63342",
  "I63343",
  "I63349",
  "I6339",
  "I6340",
  "I63411",
  "I63412",
  "I63413",
  "I63419",
  "I63421",
  "I63422",
  "I63423",
  "I63429",
  "I63431",
  "I63432",
  "I63433",
  "I63439",
  "I63441",
  "I63442",
  "I63443",
  "I63449",
  "I6349",
  "I6350",
  "I63511",
  "I63512",
  "I63513",
  "I63519",
  "I63521",
  "I63522",
  "I63523",
  "I63529",
  "I63531",
  "I63532",
  "I63533",
  "I63539",
  "I63541",
  "I63542",
  "I63543",
  "I63549",
  "I6359",
  "I636",
  "I6381",
  "I6389",
  "I639",
  "I673",
  "I69031",
  "I69032",
  "I69033",
  "I69034",
  "I69039",
  "I69041",
  "I69042",
  "I69043",
  "I69044",
  "I69049",
  "I69051",
  "I69052",
  "I69053",
  "I69054",
  "I69059",
  "I69061",
  "I69062",
  "I69063",
  "I69064",
  "I69065",
  "I69069",
  "I69131",
  "I69132",
  "I69133",
  "I69134",
  "I69139",
  "I69141",
  "I69142",
  "I69143",
  "I69144",
  "I69149",
  "I69151",
  "I69152",
  "I69153",
  "I69154",
  "I69159",
  "I69161",
  "I69162",
  "I69163",
  "I69164",
  "I69165",
  "I69169",
  "I69231",
  "I69232",
  "I69233",
  "I69234",
  "I69239",
  "I69241",
  "I69242",
  "I69243",
  "I69244",
  "I69249",
  "I69251",
  "I69252",
  "I69253",
  "I69254",
  "I69259",
  "I69261",
  "I69262",
  "I69263",
  "I69264",
  "I69265",
  "I69269",
  "I69331",
  "I69332",
  "I69333",
  "I69334",
  "I69339",
  "I69349",
  "I69351",
  "I69352",
  "I69353",
  "I69354",
  "I69359",
  "I69361",
  "I69362",
  "I69363",
  "I69364",
  "I69365",
  "I69369",
  "I69831",
  "I69832",
  "I69833",
  "I69834",
  "I69839",
  "I69841",
  "I69842",
  "I69843",
  "I69844",
  "I69849",
  "I69851",
  "I69852",
  "I69853",
  "I69854",
  "I69859",
  "I69861",
  "I69862",
  "I69863",
  "I69864",
  "I69865",
  "I69869",
  "I69931",
  "I69932",
  "I69933",
  "I69934",
  "I69939",
  "I69941",
  "I69942",
  "I69943",
  "I69944",
  "I69949",
  "I69951",
  "I69952",
  "I69953",
  "I69954",
  "I69959",
  "I69961",
  "I69962",
  "I69963",
  "I69964",
  "I69965",
  "I69969",
  "I70221",
  "I70222",
  "I70223",
  "I70228",
  "I70229",
  "I70231",
  "I70231",
  "I70232",
  "I70232",
  "I70233",
  "I70233",
  "I70234",
  "I70234",
  "I70235",
  "I70235",
  "I70238",
  "I70238",
  "I70239",
  "I70239",
  "I70241",
  "I70241",
  "I70242",
  "I70242",
  "I70243",
  "I70243",
  "I70244",
  "I70244",
  "I70245",
  "I70245",
  "I70248",
  "I70248",
  "I70249",
  "I70249",
  "I7025",
  "I7025",
  "I70261",
  "I70262",
  "I70263",
  "I70268",
  "I70269",
  "I70321",
  "I70322",
  "I70323",
  "I70328",
  "I70329",
  "I70331",
  "I70331",
  "I70332",
  "I70332",
  "I70333",
  "I70333",
  "I70334",
  "I70334",
  "I70335",
  "I70335",
  "I70338",
  "I70338",
  "I70339",
  "I70339",
  "I70341",
  "I70341",
  "I70342",
  "I70342",
  "I70343",
  "I70343",
  "I70344",
  "I70344",
  "I70345",
  "I70345",
  "I70348",
  "I70348",
  "I70349",
  "I70349",
  "I7035",
  "I7035",
  "I70361",
  "I70362",
  "I70363",
  "I70368",
  "I70369",
  "I70421",
  "I70422",
  "I70423",
  "I70428",
  "I70429",
  "I70431",
  "I70431",
  "I70432",
  "I70432",
  "I70433",
  "I70433",
  "I70434",
  "I70434",
  "I70435",
  "I70435",
  "I70438",
  "I70438",
  "I70439",
  "I70439",
  "I70441",
  "I70441",
  "I70442",
  "I70442",
  "I70443",
  "I70443",
  "I70444",
  "I70444",
  "I70445",
  "I70445",
  "I70448",
  "I70448",
  "I70449",
  "I70449",
  "I7045",
  "I7045",
  "I70461",
  "I70462",
  "I70463",
  "I70468",
  "I70469",
  "I70521",
  "I70522",
  "I70523",
  "I70528",
  "I70529",
  "I70531",
  "I70531",
  "I70532",
  "I70532",
  "I70533",
  "I70533",
  "I70534",
  "I70534",
  "I70535",
  "I70535",
  "I70538",
  "I70538",
  "I70539",
  "I70539",
  "I70541",
  "I70541",
  "I70542",
  "I70542",
  "I70543",
  "I70543",
  "I70544",
  "I70544",
  "I70545",
  "I70545",
  "I70548",
  "I70548",
  "I70549",
  "I70549",
  "I7055",
  "I7055",
  "I70561",
  "I70562",
  "I70563",
  "I70568",
  "I70569",
  "I70621",
  "I70622",
  "I70623",
  "I70628",
  "I70629",
  "I70631",
  "I70631",
  "I70632",
  "I70632",
  "I70633",
  "I70633",
  "I70634",
  "I70634",
  "I70635",
  "I70635",
  "I70638",
  "I70638",
  "I70639",
  "I70639",
  "I70641",
  "I70641",
  "I70642",
  "I70642",
  "I70643",
  "I70643",
  "I70644",
  "I70644",
  "I70645",
  "I70645",
  "I70648",
  "I70648",
  "I70649",
  "I70649",
  "I7065",
  "I7065",
  "I70661",
  "I70662",
  "I70663",
  "I70668",
  "I70669",
  "I70721",
  "I70722",
  "I70723",
  "I70728",
  "I70729",
  "I70731",
  "I70731",
  "I70732",
  "I70732",
  "I70733",
  "I70733",
  "I70734",
  "I70734",
  "I70735",
  "I70735",
  "I70738",
  "I70738",
  "I70739",
  "I70739",
  "I70741",
  "I70741",
  "I70742",
  "I70742",
  "I70743",
  "I70743",
  "I70744",
  "I70744",
  "I70745",
  "I70745",
  "I70748",
  "I70748",
  "I70749",
  "I70749",
  "I7075",
  "I7075",
  "I70761",
  "I70762",
  "I70763",
  "I70768",
  "I70769",
  "I7100",
  "I71010",
  "I71011",
  "I71012",
  "I71019",
  "I7102",
  "I7103",
  "I7110",
  "I7111",
  "I7112",
  "I7113",
  "I7130",
  "I7131",
  "I7132",
  "I7133",
  "I7150",
  "I7151",
  "I7152",
  "I718",
  "I7301",
  "I7401",
  "I7409",
  "I7410",
  "I7411",
  "I7419",
  "I742",
  "I743",
  "I744",
  "I745",
  "I748",
  "I749",
  "I75011",
  "I75012",
  "I75013",
  "I75019",
  "I75021",
  "I75022",
  "I75023",
  "I75029",
  "I7581",
  "I7589",
  "I76",
  "I7782",
  "I8010",
  "I8011",
  "I8012",
  "I8013",
  "I80201",
  "I80202",
  "I80203",
  "I80209",
  "I80211",
  "I80212",
  "I80213",
  "I80219",
  "I80221",
  "I80222",
  "I80223",
  "I80229",
  "I80231",
  "I80232",
  "I80233",
  "I80239",
  "I80241",
  "I80242",
  "I80243",
  "I80249",
  "I80251",
  "I80252",
  "I80253",
  "I80259",
  "I80291",
  "I80292",
  "I80293",
  "I80299",
  "I820",
  "I82210",
  "I82211",
  "I82220",
  "I82221",
  "I82290",
  "I82291",
  "I823",
  "I82401",
  "I82402",
  "I82403",
  "I82409",
  "I82411",
  "I82412",
  "I82413",
  "I82419",
  "I82421",
  "I82422",
  "I82423",
  "I82429",
  "I82431",
  "I82432",
  "I82433",
  "I82439",
  "I82441",
  "I82442",
  "I82443",
  "I82449",
  "I82451",
  "I82452",
  "I82453",
  "I82459",
  "I82461",
  "I82462",
  "I82463",
  "I82469",
  "I82491",
  "I82492",
  "I82493",
  "I82499",
  "I824Y1",
  "I824Y2",
  "I824Y3",
  "I824Y9",
  "I824Z1",
  "I824Z2",
  "I824Z3",
  "I824Z9",
  "I82501",
  "I82502",
  "I82503",
  "I82509",
  "I82511",
  "I82512",
  "I82513",
  "I82519",
  "I82521",
  "I82522",
  "I82523",
  "I82529",
  "I82531",
  "I82532",
  "I82533",
  "I82539",
  "I82541",
  "I82542",
  "I82543",
  "I82549",
  "I82551",
  "I82552",
  "I82553",
  "I82559",
  "I82561",
  "I82562",
  "I82563",
  "I82569",
  "I82591",
  "I82592",
  "I82593",
  "I82599",
  "I825Y1",
  "I825Y2",
  "I825Y3",
  "I825Y9",
  "I825Z1",
  "I825Z2",
  "I825Z3",
  "I825Z9",
  "I82621",
  "I82622",
  "I82623",
  "I82629",
  "I82721",
  "I82722",
  "I82723",
  "I82729",
  "I82A11",
  "I82A12",
  "I82A13",
  "I82A19",
  "I82A21",
  "I82A22",
  "I82A23",
  "I82A29",
  "I82B11",
  "I82B12",
  "I82B13",
  "I82B19",
  "I82B21",
  "I82B22",
  "I82B23",
  "I82B29",
  "I82C11",
  "I82C12",
  "I82C13",
  "I82C19",
  "I82C21",
  "I82C22",
  "I82C23",
  "I82C29",
  "I83001",
  "I83002",
  "I83003",
  "I83004",
  "I83005",
  "I83008",
  "I83009",
  "I83011",
  "I83012",
  "I83013",
  "I83014",
  "I83015",
  "I83018",
  "I83019",
  "I83021",
  "I83022",
  "I83023",
  "I83024",
  "I83025",
  "I83028",
  "I83029",
  "I83201",
  "I83202",
  "I83203",
  "I83204",
  "I83205",
  "I83208",
  "I83209",
  "I83211",
  "I83212",
  "I83213",
  "I83214",
  "I83215",
  "I83218",
  "I83219",
  "I83221",
  "I83222",
  "I83223",
  "I83224",
  "I83225",
  "I83228",
  "I83229",
  "I8500",
  "I8501",
  "I8510",
  "I8511",
  "I87011",
  "I87012",
  "I87013",
  "I87019",
  "I87031",
  "I87032",
  "I87033",
  "I87039",
  "I87311",
  "I87312",
  "I87313",
  "I87319",
  "I87331",
  "I87332",
  "I87333",
  "I87339",
  "I96",
  "J150",
  "J151",
  "J1520",
  "J15211",
  "J15212",
  "J1529",
  "J155",
  "J1561",
  "J1569",
  "J158",
  "J410",
  "J411",
  "J418",
  "J42",
  "J430",
  "J431",
  "J432",
  "J438",
  "J439",
  "J440",
  "J441",
  "J4481",
  "J4489",
  "J449",
  "J4550",
  "J4551",
  "J4552",
  "J470",
  "J471",
  "J479",
  "J4A0",
  "J4A8",
  "J4A9",
  "J60",
  "J61",
  "J620",
  "J628",
  "J630",
  "J631",
  "J632",
  "J633",
  "J634",
  "J635",
  "J636",
  "J64",
  "J65",
  "J660",
  "J661",
  "J662",
  "J668",
  "J670",
  "J671",
  "J672",
  "J673",
  "J674",
  "J675",
  "J676",
  "J677",
  "J678",
  "J679",
  "J680",
  "J681",
  "J682",
  "J683",
  "J684",
  "J688",
  "J689",
  "J690",
  "J691",
  "J698",
  "J80",
  "J810",
  "J8281",
  "J8401",
  "J8402",
  "J8403",
  "J8409",
  "J8410",
  "J84111",
  "J84112",
  "J84113",
  "J84114",
  "J84115",
  "J84116",
  "J84117",
  "J84170",
  "J84178",
  "J842",
  "J8481",
  "J8482",
  "J8489",
  "J849",
  "J850",
  "J851",
  "J852",
  "J853",
  "J860",
  "J869",
  "J910",
  "J9500",
  "J9501",
  "J9502",
  "J9503",
  "J9504",
  "J9509",
  "J95850",
  "J95851",
  "J95859",
  "J9600",
  "J9601",
  "J9602",
  "J9610",
  "J9611",
  "J9612",
  "J9620",
  "J9621",
  "J9622",
  "J9690",
  "J9691",
  "J9692",
  "J982",
  "J983",
  "J99",
  "K251",
  "K252",
  "K255",
  "K256",
  "K261",
  "K262",
  "K265",
  "K266",
  "K271",
  "K272",
  "K275",
  "K276",
  "K281",
  "K282",
  "K285",
  "K286",
  "K5000",
  "K50011",
  "K50012",
  "K50012",
  "K50013",
  "K50014",
  "K50018",
  "K50019",
  "K5010",
  "K50111",
  "K50112",
  "K50112",
  "K50113",
  "K50114",
  "K50118",
  "K50119",
  "K5080",
  "K50811",
  "K50812",
  "K50812",
  "K50813",
  "K50814",
  "K50818",
  "K50819",
  "K5090",
  "K50911",
  "K51312",
  "K51312",
  "K51313",
  "K51314",
  "K51318",
  "K51319",
  "K5140",
  "K51411",
  "K51412",
  "K51412",
  "K51413",
  "K51414",
  "K51418",
  "K51419",
  "K5150",
  "K51511",
  "K51512",
  "K51512",
  "K51513",
  "K51514",
  "K51518",
  "K51519",
  "K5180",
  "K51811",
  "K51812",
  "K51812",
  "K51813",
  "K51814",
  "K51818",
  "K51819",
  "K5190",
  "K51911",
  "K51912",
  "K51912",
  "K51913",
  "K51914",
  "K51918",
  "K51919",
  "K560",
  "K561",
  "K562",
  "K563",
  "K5641",
  "K5649",
  "K5650",
  "K5651",
  "K5652",
  "K56600",
  "K56601",
  "K56609",
  "K56690",
  "K56691",
  "K56699",
  "K567",
  "K5931",
  "K631",
  "K650",
  "K651",
  "K652",
  "K653",
  "K654",
  "K658",
  "K659",
  "K67",
  "K6812",
  "K6819",
  "K7010",
  "K7011",
  "K7030",
  "K7031",
  "K7040",
  "K7041",
  "K713",
  "K714",
  "K7150",
  "K7151",
  "K717",
  "K7210",
  "K7211",
  "K7290",
  "K7291",
  "K730",
  "K731",
  "K732",
  "K738",
  "K739",
  "K743",
  "K744",
  "K745",
  "K7460",
  "K7469",
  "K754",
  "K766",
  "K767",
  "K7681",
  "K7682",
  "K8301",
  "K8309",
  "K831",
  "K860",
  "K861",
  "K91850",
  "K91858",
  "K9400",
  "K9401",
  "K9402",
  "K9403",
  "K9409",
  "K9410",
  "K9411",
  "K9412",
  "K9413",
  "K9419",
  "K9420",
  "K9421",
  "K9422",
  "K9423",
  "K9429",
  "K9430",
  "K9431",
  "K9432",
  "K9433",
  "K9439",
  "L100",
  "L101",
  "L102",
  "L103",
  "L104",
  "L1081",
  "L1089",
  "L109",
  "L120",
  "L121",
  "L128",
  "L129",
  "L4050",
  "L4051",
  "L4052",
  "L4053",
  "L4054",
  "L4059",
  "L88",
  "L89000",
  "L89002",
  "L89003",
  "L89004",
  "L89010",
  "L89012",
  "L89013",
  "L89014",
  "L89020",
  "L89022",
  "L89023",
  "L89024",
  "L89100",
  "L89102",
  "L89103",
  "L89104",
  "L89110",
  "L89112",
  "L89113",
  "L89114",
  "L89120",
  "L89122",
  "L89123",
  "L89124",
  "L89130",
  "L89132",
  "L89133",
  "L89134",
  "L89140",
  "L89142",
  "L89143",
  "L89144",
  "L89150",
  "L89152",
  "L89153",
  "L89154",
  "L89200",
  "L89202",
  "L89203",
  "L89204",
  "L89210",
  "L89212",
  "L89213",
  "L89214",
  "L89220",
  "L89222",
  "L89223",
  "L89224",
  "L89300",
  "L89302",
  "L89303",
  "L89304",
  "L89310",
  "L89312",
  "L89313",
  "L89314",
  "L89320",
  "L89322",
  "L89323",
  "L89324",
  "L8942",
  "L8943",
  "L8944",
  "L8945",
  "L89500",
  "L89502",
  "L89503",
  "L89504",
  "L89510",
  "L89512",
  "L89513",
  "L89514",
  "L89520",
  "L89522",
  "L89523",
  "L89524",
  "L89600",
  "L89602",
  "L89603",
  "L89604",
  "L89610",
  "L89612",
  "L89613",
  "L89614",
  "L89620",
  "L89622",
  "L89623",
  "L89624",
  "L89810",
  "L89812",
  "L89813",
  "L89814",
  "L89890",
  "L89892",
  "L89893",
  "L89894",
  "L8992",
  "L8993",
  "L8994",
  "L8995",
  "L97101",
  "L97102",
  "L97103",
  "L97104",
  "L97105",
  "L97106",
  "L97108",
  "L97109",
  "L97111",
  "L97112",
  "L97113",
  "L97114",
  "L97115",
  "L97116",
  "L97118",
  "L97119",
  "L97121",
  "L97122",
  "L97123",
  "L97124",
  "L97125",
  "L97126",
  "L97128",
  "L97129",
  "L97201",
  "L97202",
  "L97203",
  "L97204",
  "L97205",
  "L97206",
  "L97208",
  "L97209",
  "L97211",
  "L97212",
  "L97213",
  "L97214",
  "L97215",
  "L97216",
  "L97218",
  "L97219",
  "L97221",
  "L97222",
  "L97223",
  "L97224",
  "L97225",
  "L97226",
  "L97228",
  "L97229",
  "L97301",
  "L97302",
  "L97303",
  "L97304",
  "L97305",
  "L97306",
  "L97308",
  "L97309",
  "L97311",
  "L97312",
  "L97313",
  "L97314",
  "L97315",
  "L97316",
  "L97318",
  "L97319",
  "L97321",
  "L97322",
  "L97323",
  "L97324",
  "L97325",
  "L97326",
  "L97328",
  "L97329",
  "L97401",
  "L97402",
  "L97403",
  "L97404",
  "L97405",
  "L97406",
  "L97408",
  "L97409",
  "L97411",
  "L97412",
  "L97413",
  "L97414",
  "L97415",
  "L97416",
  "L97418",
  "L97419",
  "L97421",
  "L97422",
  "L97423",
  "L97424",
  "L97425",
  "L97426",
  "L97428",
  "L97429",
  "L97501",
  "L97502",
  "L97503",
  "L97504",
  "L97505",
  "L97506",
  "L97508",
  "L97509",
  "L97511",
  "L97512",
  "L97513",
  "L97514",
  "L97515",
  "L97516",
  "L97518",
  "L97519",
  "L97521",
  "L97522",
  "L97523",
  "L97524",
  "L97525",
  "L97526",
  "L97528",
  "L97529",
  "L97801",
  "L97802",
  "L97803",
  "L97804",
  "L97805",
  "L97806",
  "L97808",
  "L97809",
  "L97811",
  "L97812",
  "L97813",
  "L97814",
  "L97815",
  "L97816",
  "L97818",
  "L97819",
  "L97821",
  "L97822",
  "L97823",
  "L97824",
  "L97825",
  "L97826",
  "L97828",
  "L97829",
  "L97901",
  "L97902",
  "L97903",
  "L97904",
  "L97905",
  "L97906",
  "L97908",
  "L97909",
  "L97911",
  "L97912",
  "L97913",
  "L97914",
  "L97915",
  "L97916",
  "L97918",
  "L97919",
  "L97921",
  "L97922",
  "L97923",
  "L97924",
  "L97925",
  "L97926",
  "L97928",
  "L97929",
  "L98411",
  "L98412",
  "L98413",
  "L98414",
  "L98415",
  "L98416",
  "L98418",
  "L98419",
  "L98421",
  "L98422",
  "L98423",
  "L98424",
  "L98425",
  "L98426",
  "L98428",
  "L98429",
  "L98491",
  "L98492",
  "L98493",
  "L98494",
  "L98495",
  "L98496",
  "L98498",
  "L98499",
  "M0000",
  "M00011",
  "M00012",
  "M00019",
  "M00021",
  "M00022",
  "M00029",
  "M00031",
  "M00032",
  "M00039",
  "M00041",
  "M00042",
  "M00049",
  "M00051",
  "M00052",
  "M00059",
  "M00061",
  "M00062",
  "M00069",
  "M00071",
  "M00072",
  "M00079",
  "M0008",
  "M0009",
  "M0010",
  "M00111",
  "M00112",
  "M00119",
  "M00121",
  "M00122",
  "M00129",
  "M00131",
  "M00132",
  "M00139",
  "M00141",
  "M00142",
  "M00149",
  "M00151",
  "M00152",
  "M00159",
  "M00161",
  "M00162",
  "M00169",
  "M00171",
  "M00172",
  "M00179",
  "M0018",
  "M0019",
  "M0020",
  "M00211",
  "M00212",
  "M00219",
  "M00221",
  "M00222",
  "M00229",
  "M00231",
  "M00232",
  "M00239",
  "M00241",
  "M00242",
  "M00249",
  "M00251",
  "M00252",
  "M00259",
  "M00261",
  "M00262",
  "M00269",
  "M00271",
  "M00272",
  "M00279",
  "M0028",
  "M0029",
  "M0080",
  "M00811",
  "M00812",
  "M00819",
  "M00821",
  "M00822",
  "M00829",
  "M00831",
  "M00832",
  "M00839",
  "M00841",
  "M00842",
  "M00849",
  "M00851",
  "M00852",
  "M00859",
  "M00861",
  "M00862",
  "M00869",
  "M00871",
  "M00872",
  "M00879",
  "M0088",
  "M0089",
  "M009",
  "M01X0",
  "M01X11",
  "M01X12",
  "M01X19",
  "M01X21",
  "M01X22",
  "M01X29",
  "M01X31",
  "M01X32",
  "M01X39",
  "M01X41",
  "M01X42",
  "M01X49",
  "M01X51",
  "M01X52",
  "M01X59",
  "M01X61",
  "M01X62",
  "M01X69",
  "M01X71",
  "M01X72",
  "M01X79",
  "M01X8",
  "M01X9",
  "M0210",
  "M02111",
  "M02112",
  "M02119",
  "M02121",
  "M02122",
  "M02129",
  "M02131",
  "M02132",
  "M02139",
  "M02141",
  "M02142",
  "M02149",
  "M02151",
  "M02152",
  "M02159",
  "M02161",
  "M02162",
  "M02169",
  "M02171",
  "M02172",
  "M02179",
  "M0218",
  "M0219",
  "M0230",
  "M02311",
  "M02312",
  "M02319",
  "M02321",
  "M02322",
  "M02329",
  "M02331",
  "M02332",
  "M02339",
  "M02341",
  "M02342",
  "M02349",
  "M02351",
  "M02352",
  "M02359",
  "M02361",
  "M02362",
  "M02369",
  "M02371",
  "M02372",
  "M02379",
  "M0238",
  "M0239",
  "M0280",
  "M02811",
  "M02812",
  "M02819",
  "M02821",
  "M02822",
  "M02829",
  "M02831",
  "M02832",
  "M02839",
  "M02841",
  "M02842",
  "M02849",
  "M02851",
  "M02852",
  "M02859",
  "M02861",
  "M02862",
  "M02869",
  "M02871",
  "M02872",
  "M02879",
  "M0288",
  "M0289",
  "M029",
  "M041",
  "M042",
  "M048",
  "M049",
  "M0500",
  "M05011",
  "M05012",
  "M05019",
  "M05021",
  "M05022",
  "M05029",
  "M05031",
  "M05032",
  "M05039",
  "M05041",
  "M05042",
  "M05049",
  "M05051",
  "M05052",
  "M05059",
  "M05061",
  "M05062",
  "M05069",
  "M05071",
  "M05072",
  "M05079",
  "M05731",
  "M05732",
  "M05739",
  "M05741",
  "M05742",
  "M05749",
  "M05751",
  "M05752",
  "M05759",
  "M05761",
  "M05762",
  "M05769",
  "M05771",
  "M05772",
  "M05779",
  "M0579",
  "M057A",
  "M0580",
  "M05811",
  "M05812",
  "M05819",
  "M05821",
  "M05822",
  "M05829",
  "M05831",
  "M05832",
  "M05839",
  "M05841",
  "M05842",
  "M05849",
  "M05851",
  "M05852",
  "M05859",
  "M05861",
  "M05862",
  "M05869",
  "M05871",
  "M05872",
  "M05879",
  "M0589",
  "M058A",
  "M059",
  "M0600",
  "M06011",
  "M06012",
  "M06019",
  "M06021",
  "M06022",
  "M06029",
  "M06031",
  "M06032",
  "M06039",
  "M06041",
  "M06042",
  "M06049",
  "M06051",
  "M06052",
  "M06059",
  "M06061",
  "M06062",
  "M06069",
  "M06071",
  "M06072",
  "M06079",
  "M0608",
  "M0609",
  "M060A",
  "M061",
  "M0620",
  "M06211",
  "M06212",
  "M06219",
  "M06221",
  "M06222",
  "M06229",
  "M06231",
  "M06232",
  "M06239",
  "M06241",
  "M06242",
  "M06249",
  "M06251",
  "M06252",
  "M06259",
  "M06261",
  "M06262",
  "M06269",
  "M06271",
  "M06272",
  "M06279",
  "M0628",
  "M0629",
  "M0630",
  "M06311",
  "M06312",
  "M06319",
  "M06321",
  "M06322",
  "M06329",
  "M06331",
  "M06332",
  "M06339",
  "M06341",
  "M06342",
  "M06349",
  "M06351",
  "M06352",
  "M06359",
  "M06361",
  "M06362",
  "M06369",
  "M06371",
  "M06372",
  "M06379",
  "M0638",
  "M0639",
  "M064",
  "M0680",
  "M06811",
  "M06812",
  "M06819",
  "M06821",
  "M06822",
  "M06829",
  "M06831",
  "M06832",
  "M06839",
  "M06841",
  "M06842",
  "M06849",
  "M06851",
  "M06852",
  "M06859",
  "M06861",
  "M06862",
  "M06869",
  "M06871",
  "M06872",
  "M06879",
  "M0688",
  "M0689",
  "M068A",
  "M069",
  "M0800",
  "M08011",
  "M08012",
  "M08019",
  "M08021",
  "M08022",
  "M08029",
  "M08031",
  "M08032",
  "M08039",
  "M08041",
  "M08042",
  "M08049",
  "M08051",
  "M08052",
  "M08059",
  "M08061",
  "M08062",
  "M08069",
  "M08071",
  "M08072",
  "M08079",
  "M0808",
  "M0809",
  "M080A",
  "M081",
  "M0820",
  "M08211",
  "M08212",
  "M08219",
  "M08221",
  "M08222",
  "M08229",
  "M08231",
  "M08232",
  "M08239",
  "M08241",
  "M08242",
  "M08249",
  "M08251",
  "M08252",
  "M08259",
  "M08261",
  "M08262",
  "M08269",
  "M08271",
  "M08272",
  "M08279",
  "M0828",
  "M0829",
  "M082A",
  "M083",
  "M0840",
  "M08411",
  "M08412",
  "M08419",
  "M08421",
  "M08422",
  "M08429",
  "M08431",
  "M08432",
  "M08439",
  "M08441",
  "M08442",
  "M08449",
  "M08451",
  "M08452",
  "M08459",
  "M08461",
  "M08462",
  "M08469",
  "M08471",
  "M08472",
  "M08479",
  "M0848",
  "M084A",
  "M0880",
  "M08811",
  "M08812",
  "M08819",
  "M08821",
  "M08822",
  "M08829",
  "M08831",
  "M08832",
  "M08839",
  "M08841",
  "M08842",
  "M08849",
  "M08851",
  "M08852",
  "M08859",
  "M08861",
  "M08862",
  "M08869",
  "M08871",
  "M08872",
  "M08879",
  "M0888",
  "M0889",
  "M0890",
  "M08911",
  "M08912",
  "M08919",
  "M08921",
  "M08922",
  "M08929",
  "M08931",
  "M08932",
  "M08939",
  "M08941",
  "M08942",
  "M08949",
  "M08951",
  "M08952",
  "M08959",
  "M08961",
  "M08962",
  "M08969",
  "M08971",
  "M08972",
  "M08979",
  "M0898",
  "M0899",
  "M089A",
  "M1200",
  "M12011",
  "M12012",
  "M12019",
  "M12021",
  "M12022",
  "M12029",
  "M12031",
  "M12032",
  "M12039",
  "M12041",
  "M12042",
  "M12049",
  "M12051",
  "M12052",
  "M12059",
  "M12061",
  "M12062",
  "M12069",
  "M12071",
  "M12072",
  "M12079",
  "M1208",
  "M1209",
  "M300",
  "M301",
  "M302",
  "M303",
  "M308",
  "M310",
  "M3110",
  "M3111",
  "M3119",
  "M312",
  "M3130",
  "M3131",
  "M314",
  "M315",
  "M316",
  "M317",
  "M318",
  "M319",
  "M3210",
  "M3211",
  "M3212",
  "M3213",
  "M3213",
  "M3214",
  "M3215",
  "M3219",
  "M328",
  "M329",
  "M3300",
  "M3301",
  "M3301",
  "M3302",
  "M3303",
  "M3309",
  "M3310",
  "M3311",
  "M3311",
  "M3312",
  "M3313",
  "M3319",
  "M3320",
  "M3321",
  "M3321",
  "M3322",
  "M3329",
  "M3390",
  "M3391",
  "M3391",
  "M3392",
  "M3393",
  "M3399",
  "M340",
  "M341",
  "M3481",
  "M3481",
  "M3482",
  "M3483",
  "M3489",
  "M349",
  "M3502",
  "M352",
  "M3581",
  "M360",
  "M450",
  "M451",
  "M452",
  "M453",
  "M454",
  "M455",
  "M456",
  "M457",
  "M458",
  "M459",
  "M45A0",
  "M45A1",
  "M45A2",
  "M45A3",
  "M45A4",
  "M45A5",
  "M45A6",
  "M45A7",
  "M45A8",
  "M45AB",
  "M4620",
  "M4621",
  "M4622",
  "M4623",
  "M4624",
  "M4625",
  "M4626",
  "M4627",
  "M4628",
  "M4630",
  "M4631",
  "M4632",
  "M4633",
  "M4634",
  "M4635",
  "M4636",
  "M4637",
  "M4638",
  "M4639",
  "M4850XA",
  "M4851XA",
  "M4852XA",
  "M4853XA",
  "M4854XA",
  "M4855XA",
  "M4856XA",
  "M4857XA",
  "M4858XA",
  "M488X1",
  "M488X2",
  "M488X3",
  "M488X4",
  "M488X5",
  "M488X6",
  "M488X7",
  "M488X8",
  "M488X9",
  "M726",
  "M80051A",
  "M80052A",
  "M80059A",
  "M8008XA",
  "M80851A",
  "M80852A",
  "M80859A",
  "M8088XA",
  "M84451A",
  "M84452A",
  "M84453A",
  "M84459A",
  "M84551A",
  "M84552A",
  "M84553A",
  "M84559A",
  "M84651A",
  "M84652A",
  "M84653A",
  "M84659A",
  "M84754A",
  "M84755A",
  "M84756A",
  "M84757A",
  "M84758A",
  "M84759A",
  "M8600",
  "M86011",
  "M86012",
  "M86019",
  "M86021",
  "M86022",
  "M86029",
  "M86031",
  "M86032",
  "M86039",
  "M86041",
  "M86042",
  "M86049",
  "M86051",
  "M86052",
  "M86059",
  "M86061",
  "M86062",
  "M86069",
  "M86071",
  "M86072",
  "M86079",
  "M8608",
  "M8609",
  "M8610",
  "M86111",
  "M86112",
  "M86119",
  "M86121",
  "M86122",
  "M86129",
  "M86131",
  "M86132",
  "M86139",
  "M86141",
  "M86142",
  "M86149",
  "M86151",
  "M86152",
  "M86159",
  "M86161",
  "M86162",
  "M86169",
  "M86171",
  "M86172",
  "M86179",
  "M8618",
  "M8619",
  "M8620",
  "M86211",
  "M86212",
  "M86219",
  "M86221",
  "M86222",
  "M86229",
  "M86231",
  "M86232",
  "M86239",
  "M86241",
  "M86242",
  "M86249",
  "M86251",
  "M86252",
  "M86259",
  "M86261",
  "M86262",
  "M86269",
  "M86271",
  "M86272",
  "M86279",
  "M8628",
  "M8629",
  "M8630",
  "M86311",
  "M86312",
  "M86319",
  "M86321",
  "M86322",
  "M86329",
  "M86331",
  "M86332",
  "M86339",
  "M86341",
  "M86342",
  "M86349",
  "M86351",
  "M86352",
  "M86359",
  "M86361",
  "M86362",
  "M86369",
  "M86371",
  "M86372",
  "M86379",
  "M8638",
  "M8639",
  "M8640",
  "M86411",
  "M86412",
  "M86419",
  "M86421",
  "M86422",
  "M86429",
  "M86431",
  "M86432",
  "M86439",
  "M86441",
  "M86442",
  "M86449",
  "M86451",
  "M86452",
  "M86459",
  "M86461",
  "M86462",
  "M86469",
  "M86471",
  "M86472",
  "M86479",
  "M8648",
  "M8649",
  "M8650",
  "M86511",
  "M86512",
  "M86519",
  "M86521",
  "M86522",
  "M86529",
  "M86531",
  "M86532",
  "M86539",
  "M86541",
  "M86542",
  "M86549",
  "M86551",
  "M86552",
  "M86559",
  "M86561",
  "M86562",
  "M86569",
  "M86571",
  "M86572",
  "M86579",
  "M8658",
  "M8659",
  "M8660",
  "M86611",
  "M86612",
  "M86619",
  "M86621",
  "M86622",
  "M86629",
  "M86631",
  "M86632",
  "M86639",
  "M86641",
  "M86642",
  "M86649",
  "M86651",
  "M86652",
  "M86659",
  "M86661",
  "M86662",
  "M86669",
  "M86671",
  "M86672",
  "M86679",
  "M8668",
  "M8669",
  "M868X0",
  "M868X1",
  "M868X2",
  "M868X3",
  "M868X4",
  "M868X5",
  "M868X6",
  "M868X7",
  "M868X8",
  "M868X9",
  "M869",
  "M8700",
  "M87011",
  "M87012",
  "M87019",
  "M87021",
  "M87022",
  "M87029",
  "M87031",
  "M87032",
  "M87033",
  "M87034",
  "M87035",
  "M87036",
  "M87037",
  "M87038",
  "M87039",
  "M87041",
  "M87042",
  "M87043",
  "M87044",
  "M87045",
  "M87046",
  "M87050",
  "M87051",
  "M87052",
  "M87059",
  "M87061",
  "M87062",
  "M87063",
  "M87064",
  "M87065",
  "M87066",
  "M87071",
  "M87072",
  "M87073",
  "M87074",
  "M87075",
  "M87076",
  "M87077",
  "M87078",
  "M87079",
  "M8708",
  "M8709",
  "M8720",
  "M87211",
  "M87212",
  "M87219",
  "M87221",
  "M87222",
  "M87229",
  "M87231",
  "M87232",
  "M87233",
  "M87234",
  "M87235",
  "M87236",
  "M87237",
  "M87238",
  "M87239",
  "M87241",
  "M87242",
  "M87243",
  "M87244",
  "M87245",
  "M87246",
  "M87250",
  "M87251",
  "M87252",
  "M87256",
  "M87261",
  "M87262",
  "M87263",
  "M87264",
  "M87265",
  "M87266",
  "M87271",
  "M87272",
  "M87273",
  "M87274",
  "M87275",
  "M87276",
  "M87277",
  "M87278",
  "M87279",
  "M8728",
  "M8729",
  "M8730",
  "M87311",
  "M87312",
  "M87319",
  "M87321",
  "M87322",
  "M87329",
  "M87331",
  "M87332",
  "M87333",
  "M87334",
  "M87335",
  "M87336",
  "M87337",
  "M87338",
  "M87339",
  "M87341",
  "M87342",
  "M87343",
  "M87344",
  "M87345",
  "M87346",
  "M87350",
  "M87351",
  "M87352",
  "M87353",
  "M87361",
  "M87362",
  "M87363",
  "M87364",
  "M87365",
  "M87366",
  "M87371",
  "M87372",
  "M87373",
  "M87374",
  "M87375",
  "M87376",
  "M87377",
  "M87378",
  "M87379",
  "M8738",
  "M8739",
  "M8780",
  "M87811",
  "M87812",
  "M87819",
  "M87821",
  "M87822",
  "M87829",
  "M87831",
  "M87832",
  "M87833",
  "M87834",
  "M87835",
  "M87836",
  "M87837",
  "M87838",
  "M87839",
  "M87841",
  "M87842",
  "M87843",
  "M87844",
  "M87845",
  "M87849",
  "M87850",
  "M87851",
  "M87852",
  "M87859",
  "M87861",
  "M87862",
  "M87863",
  "M87864",
  "M87865",
  "M87869",
  "M87871",
  "M87872",
  "M87873",
  "M87874",
  "M87875",
  "M87876",
  "M87877",
  "M87878",
  "M87879",
  "M8788",
  "M8789",
  "M879",
  "M8960",
  "M89611",
  "M89612",
  "M89619",
  "M89621",
  "M89622",
  "M89629",
  "M89631",
  "M89632",
  "M89639",
  "M89641",
  "M89642",
  "M89649",
  "M89651",
  "M89652",
  "M89659",
  "M89661",
  "M89662",
  "M89669",
  "M89671",
  "M89672",
  "M89679",
  "M8968",
  "M8969",
  "M9050",
  "M90511",
  "M90512",
  "M90519",
  "M90521",
  "M90522",
  "M90529",
  "M90531",
  "M90532",
  "M90539",
  "M90541",
  "M90542",
  "M90549",
  "M90551",
  "M90552",
  "M90559",
  "M90561",
  "M90562",
  "M90569",
  "M90571",
  "M90572",
  "M90579",
  "M9058",
  "M9059",
  "M9701XA",
  "M9702XA",
  "N1830",
  "N1831",
  "N1832",
  "N184",
  "N185",
  "N186",
  "N493",
  "N7682",
  "P0270",
  "P040",
  "P0411",
  "P0412",
  "P0413",
  "P0414",
  "P0415",
  "P0416",
  "P0417",
  "P0418",
  "P0419",
  "P041A",
  "P042",
  "P043",
  "P0440",
  "P0441",
  "P0442",
  "P0449",
  "P045",
  "P046",
  "P0481",
  "P0489",
  "P049",
  "P100",
  "P101",
  "P102",
  "P103",
  "P104",
  "P108",
  "P109",
  "P110",
  "P111",
  "P112",
  "P115",
  "P220",
  "P260",
  "P261",
  "P268",
  "P269",
  "P270",
  "P271",
  "P278",
  "P279",
  "P280",
  "P2810",
  "P2811",
  "P2819",
  "P285",
  "P2881",
  "P290",
  "P2981",
  "P360",
  "P3610",
  "P3619",
  "P362",
  "P3630",
  "P3639",
  "P364",
  "P365",
  "P368",
  "P369",
  "P520",
  "P521",
  "P5221",
  "P5222",
  "P523",
  "P524",
  "P525",
  "P526",
  "P528",
  "P529",
  "P550",
  "P551",
  "P558",
  "P559",
  "P560",
  "P5690",
  "P5699",
  "P570",
  "P578",
  "P579",
  "P771",
  "P772",
  "P773",
  "P779",
  "P780",
  "P90",
  "P910",
  "P911",
  "P912",
  "P913",
  "P914",
  "P915",
  "P9160",
  "P9161",
  "P9162",
  "P9163",
  "P91811",
  "P91819",
  "P91821",
  "P91822",
  "P91823",
  "P91829",
  "P9188",
  "P919",
  "P930",
  "P938",
  "P961",
  "P962",
  "Q000",
  "Q001",
  "Q002",
  "Q010",
  "Q011",
  "Q012",
  "Q018",
  "Q019",
  "Q02",
  "Q030",
  "Q031",
  "Q038",
  "Q039",
  "Q040",
  "Q041",
  "Q042",
  "Q043",
  "Q044",
  "Q045",
  "Q046",
  "Q048",
  "Q049",
  "Q050",
  "Q051",
  "Q052",
  "Q053",
  "Q054",
  "Q055",
  "Q056",
  "Q057",
  "Q058",
  "Q059",
  "Q060",
  "Q061",
  "Q062",
  "Q063",
  "Q064",
  "Q068",
  "Q069",
  "Q0700",
  "Q0701",
  "Q0702",
  "Q0703",
  "Q078",
  "Q079",
  "Q400",
  "Q410",
  "Q411",
  "Q412",
  "Q418",
  "Q419",
  "Q420",
  "Q421",
  "Q422",
  "Q423",
  "Q428",
  "Q429",
  "Q431",
  "Q432",
  "Q433",
  "Q442",
  "Q443",
  "Q4471",
  "Q8500",
  "Q8501",
  "Q8502",
  "Q8503",
  "Q8509",
  "Q851",
  "Q8581",
  "Q8582",
  "Q8583",
  "Q8589",
  "Q859",
  "R092",
  "R180",
  "R4020",
  "R402110",
  "R402111",
  "R402112",
  "R402113",
  "R402114",
  "R402120",
  "R402121",
  "R402122",
  "R402123",
  "R402124",
  "R402210",
  "R402211",
  "R402212",
  "R402213",
  "R402214",
  "R402220",
  "R402221",
  "R402222",
  "R402223",
  "R402224",
  "R402310",
  "R402311",
  "R402312",
  "R402313",
  "R402314",
  "R402320",
  "R402321",
  "R402322",
  "R402323",
  "R402324",
  "R402430",
  "R402431",
  "R402432",
  "R402433",
  "R402434",
  "R402440",
  "R402441",
  "R402442",
  "R402443",
  "R402444",
  "R402A",
  "R403",
  "R4588",
  "R532",
  "R5600",
  "R5601",
  "R561",
  "R569",
  "R570",
  "R571",
  "R578",
  "R579",
  "R6510",
  "R6511",
  "R6520",
  "R6521",
  "S020XXA",
  "S020XXB",
  "S02101A",
  "S02101B",
  "S02102A",
  "S02102B",
  "S02109A",
  "S02109B",
  "S02110A",
  "S02110B",
  "S02111A",
  "S02111B",
  "S02112A",
  "S02112B",
  "S02113A",
  "S02113B",
  "S02118A",
  "S02118B",
  "S02119A",
  "S02119B",
  "S0211AA",
  "S0211AB",
  "S0211BA",
  "S0211BB",
  "S0211CA",
  "S0211CB",
  "S0211DA",
  "S0211DB",
  "S0211EA",
  "S0211EB",
  "S0211FA",
  "S0211FB",
  "S0211GA",
  "S0211GB",
  "S0211HA",
  "S0211HB",
  "S02121A",
  "S02121B",
  "S02122A",
  "S02122B",
  "S02129A",
  "S02129B",
  "S0219XA",
  "S0219XB",
  "S0230XA",
  "S0230XB",
  "S0231XA",
  "S0231XB",
  "S0232XA",
  "S0232XB",
  "S02400A",
  "S02400B",
  "S02401A",
  "S02401B",
  "S02402A",
  "S02402B",
  "S0240AA",
  "S0240AB",
  "S0240BA",
  "S0240BB",
  "S0240CA",
  "S0240CB",
  "S0240DA",
  "S0240DB",
  "S0240EA",
  "S0240EB",
  "S0240FA",
  "S0240FB",
  "S02411A",
  "S02411B",
  "S02412A",
  "S02412B",
  "S02413A",
  "S02413B",
  "S0242XA",
  "S0242XB",
  "S02600A",
  "S02600B",
  "S02601A",
  "S02601B",
  "S02602A",
  "S02602B",
  "S02609A",
  "S02609B",
  "S02610A",
  "S02610B",
  "S02611A",
  "S02611B",
  "S02612A",
  "S02612B",
  "S02620A",
  "S02620B",
  "S02621A",
  "S02621B",
  "S02622A",
  "S02622B",
  "S02630A",
  "S02630B",
  "S02631A",
  "S02631B",
  "S02632A",
  "S02632B",
  "S02640A",
  "S02640B",
  "S02641A",
  "S02641B",
  "S02642A",
  "S02642B",
  "S02650A",
  "S02650B",
  "S02651A",
  "S02651B",
  "S02652A",
  "S02652B",
  "S0266XA",
  "S0266XB",
  "S02670A",
  "S02670B",
  "S02671A",
  "S02671B",
  "S02672A",
  "S02672B",
  "S0269XA",
  "S0269XB",
  "S0280XA",
  "S0280XB",
  "S0281XA",
  "S0281XB",
  "S0282XA",
  "S0282XB",
  "S02831A",
  "S02831B",
  "S02832A",
  "S02832B",
  "S02839A",
  "S02839B",
  "S02841A",
  "S02841B",
  "S02842A",
  "S02842B",
  "S02849A",
  "S02849B",
  "S0285XA",
  "S0285XB",
  "S0291XA",
  "S0291XB",
  "S0292XA",
  "S0292XB",
  "S061X0A",
  "S061X1A",
  "S061X2A",
  "S061X3A",
  "S061X4A",
  "S061X5A",
  "S061X6A",
  "S061X9A",
  "S061XAA",
  "S062X0A",
  "S062X1A",
  "S062X2A",
  "S062X3A",
  "S062X4A",
  "S062X5A",
  "S062X6A",
  "S062X9A",
  "S062XAA",
  "S06300A",
  "S06301A",
  "S06302A",
  "S06303A",
  "S06304A",
  "S06305A",
  "S06306A",
  "S06309A",
  "S0630AA",
  "S06310A",
  "S06311A",
  "S06312A",
  "S06313A",
  "S06314A",
  "S06315A",
  "S06316A",
  "S06319A",
  "S0631AA",
  "S06320A",
  "S06321A",
  "S06322A",
  "S06323A",
  "S06324A",
  "S06325A",
  "S06326A",
  "S06329A",
  "S0632AA",
  "S06330A",
  "S06331A",
  "S06332A",
  "S06333A",
  "S06334A",
  "S06335A",
  "S06336A",
  "S06339A",
  "S0633AA",
  "S06340A",
  "S06341A",
  "S06342A",
  "S06343A",
  "S06344A",
  "S06345A",
  "S06346A",
  "S06349A",
  "S0634AA",
  "S06350A",
  "S06351A",
  "S06352A",
  "S06353A",
  "S06354A",
  "S06355A",
  "S06356A",
  "S06359A",
  "S0635AA",
  "S06360A",
  "S06361A",
  "S06362A",
  "S06363A",
  "S06364A",
  "S06365A",
  "S06366A",
  "S06369A",
  "S0636AA",
  "S06370A",
  "S06371A",
  "S06372A",
  "S06373A",
  "S06374A",
  "S06375A",
  "S06376A",
  "S06379A",
  "S0637AA",
  "S06380A",
  "S06381A",
  "S06382A",
  "S06383A",
  "S06384A",
  "S06385A",
  "S06386A",
  "S06389A",
  "S0638AA",
  "S064X0A",
  "S064X1A",
  "S064X2A",
  "S064X3A",
  "S064X4A",
  "S064X5A",
  "S064X6A",
  "S064X9A",
  "S064XAA",
  "S065X0A",
  "S065X1A",
  "S065X2A",
  "S065X3A",
  "S065X4A",
  "S065X5A",
  "S065X6A",
  "S065X9A",
  "S065XAA",
  "S066X0A",
  "S066X1A",
  "S066X2A",
  "S066X3A",
  "S066X4A",
  "S066X5A",
  "S066X6A",
  "S066X9A",
  "S066XAA",
  "S06810A",
  "S06811A",
  "S06812A",
  "S06813A",
  "S06814A",
  "S06815A",
  "S06816A",
  "S06819A",
  "S0681AA",
  "S06820A",
  "S06821A",
  "S06822A",
  "S06823A",
  "S06824A",
  "S06825A",
  "S06826A",
  "S06829A",
  "S0682AA",
  "S06890A",
  "S06891A",
  "S06892A",
  "S06893A",
  "S06894A",
  "S06895A",
  "S06896A",
  "S06899A",
  "S0689AA",
  "S068A0A",
  "S068A1A",
  "S068A2A",
  "S068A3A",
  "S068A4A",
  "S068A5A",
  "S068A6A",
  "S068A9A",
  "S068AAA",
  "S069X0A",
  "S069X1A",
  "S069X2A",
  "S069X3A",
  "S069X4A",
  "S069X5A",
  "S069X6A",
  "S069X9A",
  "S069XAA",
  "S06A0XA",
  "S06A1XA",
  "S12000A",
  "S12000B",
  "S12001A",
  "S12001B",
  "S1201XA",
  "S1201XB",
  "S1202XA",
  "S1202XB",
  "S12030A",
  "S12030B",
  "S12031A",
  "S12031B",
  "S12040A",
  "S12040B",
  "S12041A",
  "S12041B",
  "S12090A",
  "S12090B",
  "S12091A",
  "S12091B",
  "S12100A",
  "S12100B",
  "S12101A",
  "S12101B",
  "S12110A",
  "S12110B",
  "S12111A",
  "S12111B",
  "S12112A",
  "S12112B",
  "S12120A",
  "S12120B",
  "S12121A",
  "S12121B",
  "S12130A",
  "S12130B",
  "S12131A",
  "S12131B",
  "S1214XA",
  "S1214XB",
  "S12150A",
  "S12150B",
  "S12151A",
  "S12151B",
  "S12190A",
  "S12190B",
  "S12191A",
  "S12191B",
  "S12200A",
  "S12200B",
  "S12201A",
  "S12201B",
  "S12230A",
  "S12230B",
  "S12231A",
  "S12231B",
  "S1224XA",
  "S1224XB",
  "S12250A",
  "S12250B",
  "S12251A",
  "S12251B",
  "S12290A",
  "S12290B",
  "S12291A",
  "S12291B",
  "S12300A",
  "S12300B",
  "S12301A",
  "S12301B",
  "S12330A",
  "S12330B",
  "S12331A",
  "S12331B",
  "S1234XA",
  "S1234XB",
  "S12350A",
  "S12350B",
  "S12351A",
  "S12351B",
  "S12390A",
  "S12390B",
  "S12391A",
  "S12391B",
  "S12400A",
  "S12400B",
  "S12401A",
  "S12401B",
  "S12430A",
  "S12430B",
  "S12431A",
  "S12431B",
  "S1244XA",
  "S1244XB",
  "S12450A",
  "S12450B",
  "S12451A",
  "S12451B",
  "S12490A",
  "S12490B",
  "S12491A",
  "S12491B",
  "S12500A",
  "S12500B",
  "S12501A",
  "S12501B",
  "S12530A",
  "S12530B",
  "S12531A",
  "S12531B",
  "S1254XA",
  "S1254XB",
  "S12550A",
  "S12550B",
  "S12551A",
  "S12551B",
  "S12590A",
  "S12590B",
  "S12591A",
  "S12591B",
  "S12600A",
  "S12600B",
  "S12601A",
  "S12601B",
  "S12630A",
  "S12630B",
  "S12631A",
  "S12631B",
  "S1264XA",
  "S1264XB",
  "S12650A",
  "S12650B",
  "S12651A",
  "S12651B",
  "S12690A",
  "S12690B",
  "S12691A",
  "S12691B",
  "S128XXA",
  "S129XXA",
  "S140XXA",
  "S140XXD",
  "S14101A",
  "S14101D",
  "S14102A",
  "S14102D",
  "S14103A",
  "S14103D",
  "S14104A",
  "S14104D",
  "S14105A",
  "S14105D",
  "S14106A",
  "S14106D",
  "S14107A",
  "S14107D",
  "S14108A",
  "S14108D",
  "S14109A",
  "S14109D",
  "S14111A",
  "S14111D",
  "S14111S",
  "S14112A",
  "S14112D",
  "S14112S",
  "S14113A",
  "S14113D",
  "S14113S",
  "S14114A",
  "S14114D",
  "S14114S",
  "S14115A",
  "S14115D",
  "S14115S",
  "S14116A",
  "S14116D",
  "S14116S",
  "S14117A",
  "S14117D",
  "S14117S",
  "S14118A",
  "S14118D",
  "S14118S",
  "S14119A",
  "S14119D",
  "S14119S",
  "S14121A",
  "S14121D",
  "S14122A",
  "S14122D",
  "S14123A",
  "S14123D",
  "S14124A",
  "S14124D",
  "S14125A",
  "S14125D",
  "S14126A",
  "S14126D",
  "S14127A",
  "S14127D",
  "S14128A",
  "S14128D",
  "S14129A",
  "S14129D",
  "S14131A",
  "S14131D",
  "S14132A",
  "S14132D",
  "S14133A",
  "S14133D",
  "S14134A",
  "S14134D",
  "S14135A",
  "S14135D",
  "S14136A",
  "S14136D",
  "S14137A",
  "S14137D",
  "S14138A",
  "S14138D",
  "S14139A",
  "S14139D",
  "S14141A",
  "S14141D",
  "S14142A",
  "S14142D",
  "S14143A",
  "S14143D",
  "S14144A",
  "S14144D",
  "S14145A",
  "S14145D",
  "S14146A",
  "S14146D",
  "S14147A",
  "S14147D",
  "S14148A",
  "S14148D",
  "S14149A",
  "S14149D",
  "S14151A",
  "S14151D",
  "S14152A",
  "S14152D",
  "S14153A",
  "S14153D",
  "S14154A",
  "S14154D",
  "S14155A",
  "S14155D",
  "S14156A",
  "S14156D",
  "S14157A",
  "S14157D",
  "S14158A",
  "S14158D",
  "S14159A",
  "S14159D",
  "S22000A",
  "S22000B",
  "S22001A",
  "S22001B",
  "S22002A",
  "S22002B",
  "S22008A",
  "S22008B",
  "S22009A",
  "S22009B",
  "S22010A",
  "S22010B",
  "S22011A",
  "S22011B",
  "S22012A",
  "S22012B",
  "S22018A",
  "S22018B",
  "S22019A",
  "S22019B",
  "S22020A",
  "S22020B",
  "S22021A",
  "S22021B",
  "S22022A",
  "S22022B",
  "S22028A",
  "S22028B",
  "S22029A",
  "S22029B",
  "S22030A",
  "S22030B",
  "S22031A",
  "S22031B",
  "S22032A",
  "S22032B",
  "S22038A",
  "S22038B",
  "S22039A",
  "S22039B",
  "S22040A",
  "S22040B",
  "S22041A",
  "S22041B",
  "S22042A",
  "S22042B",
  "S22048A",
  "S22048B",
  "S22049A",
  "S22049B",
  "S22050A",
  "S22050B",
  "S22051A",
  "S22051B",
  "S22052A",
  "S22052B",
  "S22058A",
  "S22058B",
  "S22059A",
  "S22059B",
  "S22060A",
  "S22060B",
  "S22061A",
  "S22061B",
  "S22062A",
  "S22062B",
  "S22068A",
  "S22068B",
  "S22069A",
  "S22069B",
  "S22070A",
  "S22070B",
  "S22071A",
  "S22071B",
  "S22072A",
  "S22072B",
  "S22078A",
  "S22078B",
  "S22079A",
  "S22079B",
  "S22080A",
  "S22080B",
  "S22081A",
  "S22081B",
  "S22082A",
  "S22082B",
  "S22088A",
  "S22088B",
  "S22089A",
  "S22089B",
  "S240XXA",
  "S240XXD",
  "S24101A",
  "S24101D",
  "S24102A",
  "S24102D",
  "S24103A",
  "S24103D",
  "S24104A",
  "S24104D",
  "S24109A",
  "S24109D",
  "S24111A",
  "S24111D",
  "S24111S",
  "S24112A",
  "S24112D",
  "S24112S",
  "S24113A",
  "S24113D",
  "S24113S",
  "S24114A",
  "S24114D",
  "S24114S",
  "S24119A",
  "S24119D",
  "S24119S",
  "S24131A",
  "S24131D",
  "S24132A",
  "S24132D",
  "S24133A",
  "S24133D",
  "S24134A",
  "S24134D",
  "S24139A",
  "S24139D",
  "S24141A",
  "S24141D",
  "S24142A",
  "S24142D",
  "S24143A",
  "S24143D",
  "S24144A",
  "S24144D",
  "S24149A",
  "S24149D",
  "S24151A",
  "S24151D",
  "S24152A",
  "S24152D",
  "S24153A",
  "S24153D",
  "S24154A",
  "S24154D",
  "S24159A",
  "S24159D",
  "S32000A",
  "S32000B",
  "S32001A",
  "S32001B",
  "S32002A",
  "S32002B",
  "S32008A",
  "S32010B",
  "S32011A",
  "S32011B",
  "S32012A",
  "S32012B",
  "S32018A",
  "S32018B",
  "S32019A",
  "S32019B",
  "S32020A",
  "S32020B",
  "S32021A",
  "S32021B",
  "S32022A",
  "S32022B",
  "S32028A",
  "S32028B",
  "S32029A",
  "S32029B",
  "S32030A",
  "S32030B",
  "S32031A",
  "S32031B",
  "S32032A",
  "S32032B",
  "S32038A",
  "S32038B",
  "S32039A",
  "S32039B",
  "S32040A",
  "S32040B",
  "S32041A",
  "S32041B",
  "S32042A",
  "S32042B",
  "S32048A",
  "S32048B",
  "S32049A",
  "S32049B",
  "S32050A",
  "S32050B",
  "S32051A",
  "S32051B",
  "S32052A",
  "S32052B",
  "S32058A",
  "S32058B",
  "S32059A",
  "S32059B",
  "S3210XA",
  "S3210XB",
  "S32110A",
  "S32110B",
  "S32111A",
  "S32111B",
  "S32112A",
  "S32112B",
  "S32119A",
  "S32119B",
  "S32120A",
  "S32120B",
  "S32121A",
  "S32121B",
  "S32122A",
  "S32122B",
  "S32129A",
  "S32129B",
  "S32130A",
  "S32130B",
  "S32131A",
  "S32131B",
  "S32132A",
  "S32132B",
  "S32139A",
  "S32139B",
  "S3214XA",
  "S3214XB",
  "S3215XA",
  "S3215XB",
  "S3216XA",
  "S3216XB",
  "S3217XA",
  "S3217XB",
  "S3219XA",
  "S3219XB",
  "S322XXA",
  "S322XXB",
  "S32301A",
  "S32301B",
  "S32302A",
  "S32302B",
  "S32309A",
  "S32309B",
  "S32311A",
  "S32311B",
  "S32312A",
  "S32312B",
  "S32313A",
  "S32313B",
  "S32314A",
  "S32314B",
  "S32315A",
  "S32315B",
  "S32316A",
  "S32316B",
  "S32391A",
  "S32391B",
  "S32392A",
  "S32392B",
  "S32399A",
  "S32399B",
  "S32401A",
  "S32401B",
  "S32402A",
  "S32402B",
  "S32409A",
  "S32409B",
  "S32411A",
  "S32411B",
  "S32412A",
  "S32412B",
  "S32413A",
  "S32413B",
  "S32414A",
  "S32414B",
  "S32415A",
  "S32415B",
  "S32416A",
  "S32416B",
  "S32421A",
  "S32421B",
  "S32422A",
  "S32422B",
  "S32423A",
  "S32423B",
  "S32424A",
  "S32424B",
  "S32425A",
  "S32425B",
  "S32426A",
  "S32426B",
  "S32431A",
  "S32431B",
  "S32432A",
  "S32432B",
  "S32433A",
  "S32433B",
  "S32434A",
  "S32434B",
  "S32435A",
  "S32435B",
  "S32436A",
  "S32436B",
  "S32441A",
  "S32441B",
  "S32442A",
  "S32442B",
  "S32443A",
  "S32443B",
  "S32444A",
  "S32444B",
  "S32445A",
  "S32445B",
  "S32446A",
  "S32446B",
  "S32451A",
  "S32451B",
  "S32452A",
  "S32452B",
  "S32453A",
  "S32453B",
  "S32454A",
  "S32454B",
  "S32455A",
  "S32455B",
  "S32456A",
  "S32456B",
  "S32461A",
  "S32461B",
  "S32462A",
  "S32462B",
  "S32463A",
  "S32463B",
  "S32464A",
  "S32464B",
  "S32465A",
  "S32465B",
  "S32466A",
  "S32466B",
  "S32471A",
  "S32471B",
  "S32472A",
  "S32472B",
  "S32473A",
  "S32473B",
  "S32474A",
  "S32474B",
  "S32475A",
  "S32475B",
  "S32476A",
  "S32476B",
  "S32481A",
  "S32481B",
  "S32482A",
  "S32482B",
  "S32483A",
  "S32483B",
  "S32484A",
  "S32484B",
  "S32485A",
  "S32485B",
  "S32486A",
  "S32486B",
  "S32491A",
  "S32491B",
  "S32492A",
  "S32492B",
  "S32499A",
  "S32499B",
  "S32501A",
  "S32501B",
  "S32502A",
  "S32502B",
  "S32509A",
  "S32509B",
  "S32511A",
  "S32511B",
  "S32512A",
  "S32512B",
  "S32519A",
  "S32519B",
  "S32591A",
  "S32591B",
  "S32592A",
  "S32592B",
  "S32599A",
  "S32599B",
  "S32601A",
  "S32601B",
  "S32602A",
  "S32602B",
  "S32609A",
  "S32609B",
  "S32611A",
  "S32611B",
  "S32612A",
  "S32612B",
  "S32613A",
  "S32613B",
  "S32614A",
  "S32614B",
  "S32615A",
  "S32615B",
  "S32616A",
  "S32616B",
  "S32691A",
  "S32691B",
  "S32692A",
  "S32692B",
  "S32699A",
  "S32699B",
  "S32810A",
  "S32810B",
  "S32811A",
  "S32811B",
  "S3282XA",
  "S3282XB",
  "S3289XA",
  "S3289XB",
  "S329XXA",
  "S329XXB",
  "S3401XA",
  "S3401XD",
  "S3402XA",
  "S3402XD",
  "S34101A",
  "S34101D",
  "S34102A",
  "S34102D",
  "S34103A",
  "S34103D",
  "S34104A",
  "S34104D",
  "S34105A",
  "S34105D",
  "S34109A",
  "S34109D",
  "S34111A",
  "S34111D",
  "S34112A",
  "S34112D",
  "S34113A",
  "S34113D",
  "S34114A",
  "S34114D",
  "S34115A",
  "S34115D",
  "S34119A",
  "S34119D",
  "S34121A",
  "S34121D",
  "S34122A",
  "S34122D",
  "S34123A",
  "S34123D",
  "S34124A",
  "S34124D",
  "S34125A",
  "S34125D",
  "S34129A",
  "S34129D",
  "S34131A",
  "S34131D",
  "S34132A",
  "S34132D",
  "S34139A",
  "S34139D",
  "S343XXA",
  "S48011A",
  "S48012A",
  "S48019A",
  "S48021A",
  "S48022A",
  "S48029A",
  "S48111A",
  "S48112A",
  "S48119A",
  "S48121A",
  "S48122A",
  "S48129A",
  "S48911A",
  "S48912A",
  "S48919A",
  "S48921A",
  "S48922A",
  "S48929A",
  "S58011A",
  "S58012A",
  "S58019A",
  "S58021A",
  "S58022A",
  "S58029A",
  "S58111A",
  "S58112A",
  "S58119A",
  "S58121A",
  "S58122A",
  "S58129A",
  "S58911A",
  "S58912A",
  "S58919A",
  "S58921A",
  "S58922A",
  "S58929A",
  "S68411A",
  "S68412A",
  "S68419A",
  "S68421A",
  "S68422A",
  "S68429A",
  "S68711A",
  "S68712A",
  "S68719A",
  "S68721A",
  "S68722A",
  "S68729A",
  "S72001A",
  "S72001B",
  "S72001C",
  "S72002A",
  "S72002B",
  "S72002C",
  "S72009A",
  "S72009B",
  "S72009C",
  "S72011A",
  "S72011B",
  "S72011C",
  "S72012A",
  "S72012B",
  "S72012C",
  "S72019A",
  "S72019B",
  "S72019C",
  "S72021A",
  "S72021B",
  "S72021C",
  "S72022A",
  "S72022B",
  "S72022C",
  "S72023A",
  "S72023B",
  "S72023C",
  "S72024A",
  "S72024B",
  "S72024C",
  "S72025A",
  "S72025B",
  "S72025C",
  "S72026A",
  "S72026B",
  "S72026C",
  "S72031A",
  "S72031B",
  "S72031C",
  "S72032A",
  "S72032B",
  "S72032C",
  "S72033A",
  "S72033B",
  "S72033C",
  "S72034A",
  "S72034B",
  "S72034C",
  "S72035A",
  "S72035B",
  "S72035C",
  "S72036A",
  "S72036B",
  "S72036C",
  "S72041A",
  "S72041B",
  "S72041C",
  "S72042A",
  "S72042B",
  "S72042C",
  "S72043A",
  "S72043B",
  "S72043C",
  "S72044A",
  "S72044B",
  "S72044C",
  "S72045A",
  "S72045B",
  "S72045C",
  "S72046A",
  "S72046B",
  "S72046C",
  "S72051A",
  "S72051B",
  "S72051C",
  "S72052A",
  "S72052B",
  "S72052C",
  "S72059A",
  "S72059B",
  "S72059C",
  "S72061A",
  "S72061B",
  "S72061C",
  "S72062A",
  "S72062B",
  "S72062C",
  "S72063A",
  "S72063B",
  "S72063C",
  "S72064A",
  "S72064B",
  "S72064C",
  "S72065A",
  "S72065B",
  "S72065C",
  "S72066A",
  "S72066B",
  "S72066C",
  "S72091A",
  "S72091B",
  "S72091C",
  "S72092A",
  "S72092B",
  "S72092C",
  "S72099A",
  "S72099B",
  "S72099C",
  "S72101A",
  "S72101B",
  "S72101C",
  "S72102A",
  "S72102B",
  "S72102C",
  "S72109A",
  "S72109B",
  "S72109C",
  "S72111A",
  "S72111B",
  "S72111C",
  "S72112A",
  "S72112B",
  "S72112C",
  "S72113A",
  "S72113B",
  "S72113C",
  "S72114A",
  "S72114B",
  "S72114C",
  "S72115A",
  "S72115B",
  "S72115C",
  "S72116A",
  "S72116B",
  "S72116C",
  "S72121A",
  "S72121B",
  "S72121C",
  "S72122A",
  "S72122B",
  "S72122C",
  "S72123A",
  "S72123B",
  "S72123C",
  "S72124A",
  "S72124B",
  "S72124C",
  "S72125A",
  "S72125B",
  "S72125C",
  "S72126A",
  "S72126B",
  "S72126C",
  "S72131A",
  "S72131B",
  "S72131C",
  "S72132A",
  "S72132B",
  "S72132C",
  "S72133A",
  "S72133B",
  "S72133C",
  "S72134A",
  "S72134B",
  "S72134C",
  "S72135A",
  "S72135B",
  "S72135C",
  "S72136A",
  "S72136B",
  "S72136C",
  "S72141A",
  "S72141B",
  "S72141C",
  "S72142A",
  "S72142B",
  "S72142C",
  "S72143A",
  "S72143B",
  "S72143C",
  "S72144A",
  "S72144B",
  "S72144C",
  "S72145A",
  "S72145B",
  "S72145C",
  "S72146A",
  "S72146B",
  "S72146C",
  "S7221XA",
  "S7221XB",
  "S7221XC",
  "S7222XA",
  "S7222XB",
  "S7222XC",
  "S7223XA",
  "S7223XB",
  "S7223XC",
  "S7224XA",
  "S7224XB",
  "S7224XC",
  "S7225XA",
  "S7225XB",
  "S7225XC",
  "S7226XA",
  "S7226XB",
  "S7226XC",
  "S72301A",
  "S72301B",
  "S72301C",
  "S72302A",
  "S72302B",
  "S72302C",
  "S72309A",
  "S72309B",
  "S72309C",
  "S72321A",
  "S72321B",
  "S72321C",
  "S72322A",
  "S72322B",
  "S72322C",
  "S72323A",
  "S72323B",
  "S72323C",
  "S72324A",
  "S72324B",
  "S72324C",
  "S72325A",
  "S72325B",
  "S72325C",
  "S72326A",
  "S72326B",
  "S72326C",
  "S72331A",
  "S72331B",
  "S72331C",
  "S72332A",
  "S72332B",
  "S72332C",
  "S72333A",
  "S72333B",
  "S72333C",
  "S72334A",
  "S72334B",
  "S72334C",
  "S72335A",
  "S72335B",
  "S72335C",
  "S72336A",
  "S72336B",
  "S72336C",
  "S72341A",
  "S72341B",
  "S72341C",
  "S72342A",
  "S72342B",
  "S72342C",
  "S72343A",
  "S72343B",
  "S72343C",
  "S72344A",
  "S72344B",
  "S72344C",
  "S72345A",
  "S72345B",
  "S72345C",
  "S72346A",
  "S72346B",
  "S72346C",
  "S72351A",
  "S72351B",
  "S72351C",
  "S72352A",
  "S72352B",
  "S72352C",
  "S72353A",
  "S72353B",
  "S72353C",
  "S72354A",
  "S72354B",
  "S72354C",
  "S72355A",
  "S72355B",
  "S72355C",
  "S72356A",
  "S72356B",
  "S72356C",
  "S72361A",
  "S72361B",
  "S72361C",
  "S72362A",
  "S72362B",
  "S72362C",
  "S72363A",
  "S72363B",
  "S72363C",
  "S72364A",
  "S72364B",
  "S72364C",
  "S72365A",
  "S72365B",
  "S72365C",
  "S72366A",
  "S72366B",
  "S72366C",
  "S72391A",
  "S72391B",
  "S72391C",
  "S72392A",
  "S72392B",
  "S72392C",
  "S72399A",
  "S72399B",
  "S72399C",
  "S72401A",
  "S72401B",
  "S72401C",
  "S72402A",
  "S72402B",
  "S72402C",
  "S72409A",
  "S72409B",
  "S72409C",
  "S72411A",
  "S72411B",
  "S72411C",
  "S72412A",
  "S72412B",
  "S72412C",
  "S72413A",
  "S72413B",
  "S72413C",
  "S72414A",
  "S72414B",
  "S72414C",
  "S72415A",
  "S72415B",
  "S72415C",
  "S72416A",
  "S72416B",
  "S72416C",
  "S72421A",
  "S72421B",
  "S72421C",
  "S72422A",
  "S72422B",
  "S72422C",
  "S72423A",
  "S72423B",
  "S72423C",
  "S72424A",
  "S72424B",
  "S72424C",
  "S72425A",
  "S72425B",
  "S72425C",
  "S72426A",
  "S72426B",
  "S72426C",
  "S72431A",
  "S72431B",
  "S72431C",
  "S72432A",
  "S72432B",
  "S72432C",
  "S72433A",
  "S72433B",
  "S72433C",
  "S72434A",
  "S72434B",
  "S72434C",
  "S72435A",
  "S72435B",
  "S72435C",
  "S72436A",
  "S72436B",
  "S72436C",
  "S72441A",
  "S72441B",
  "S72441C",
  "S72442A",
  "S72442B",
  "S72442C",
  "S72443A",
  "S72443B",
  "S72443C",
  "S72444A",
  "S72444B",
  "S72444C",
  "S72445A",
  "S72445B",
  "S72445C",
  "S72446A",
  "S72446B",
  "S72446C",
  "S72451A",
  "S72451B",
  "S72451C",
  "S72452A",
  "S72452B",
  "S72452C",
  "S72453A",
  "S72453B",
  "S72453C",
  "S72454A",
  "S72454B",
  "S72454C",
  "S72455A",
  "S72455B",
  "S72455C",
  "S72456A",
  "S72456B",
  "S72456C",
  "S72461A",
  "S72461B",
  "S72461C",
  "S72462A",
  "S72462B",
  "S72462C",
  "S72463A",
  "S72463B",
  "S72463C",
  "S72464A",
  "S72464B",
  "S72464C",
  "S72465A",
  "S72465B",
  "S72465C",
  "S72466A",
  "S72479A",
  "S72491A",
  "S72491B",
  "S72491C",
  "S72492A",
  "S72492B",
  "S72492C",
  "S72499A",
  "S72499B",
  "S72499C",
  "S728X1A",
  "S728X1B",
  "S728X1C",
  "S728X2A",
  "S728X2B",
  "S728X2C",
  "S728X9A",
  "S728X9B",
  "S728X9C",
  "S7290XA",
  "S7290XB",
  "S7290XC",
  "S7291XA",
  "S7291XB",
  "S7291XC",
  "S7292XA",
  "S7292XB",
  "S7292XC",
  "S73001A",
  "S73002A",
  "S73003A",
  "S73004A",
  "S73005A",
  "S73006A",
  "S73011A",
  "S73012A",
  "S73013A",
  "S73014A",
  "S73015A",
  "S73016A",
  "S73021A",
  "S73022A",
  "S73023A",
  "S73024A",
  "S73025A",
  "S73026A",
  "S73031A",
  "S73032A",
  "S73033A",
  "S73034A",
  "S73035A",
  "S73036A",
  "S73041A",
  "S73042A",
  "S73043A",
  "S73044A",
  "S73045A",
  "S73046A",
  "S78011A",
  "S78012A",
  "S78019A",
  "S78021A",
  "S78022A",
  "S78029A",
  "S78111A",
  "S78112A",
  "S78119A",
  "S78121A",
  "S78122A",
  "S78129A",
  "S78911A",
  "S78912A",
  "S78919A",
  "S78921A",
  "S78922A",
  "S78929A",
  "S79001A",
  "S79002A",
  "S79009A",
  "S79011A",
  "S79012A",
  "S79019A",
  "S79091A",
  "S79092A",
  "S79099A",
  "S79101A",
  "S79102A",
  "S79109A",
  "S79111A",
  "S79112A",
  "S79119A",
  "S79121A",
  "S79122A",
  "S79129A",
  "S79131A",
  "S79132A",
  "S79139A",
  "S79141A",
  "S79142A",
  "S79149A",
  "S79191A",
  "S79192A",
  "S79199A",
  "S88011A",
  "S88012A",
  "S88019A",
  "S88021A",
  "S88022A",
  "S88029A",
  "S88111A",
  "S88112A",
  "S88119A",
  "S88121A",
  "S88122A",
  "S88129A",
  "S88911A",
  "S88912A",
  "S88919A",
  "S88921A",
  "S88922A",
  "S88929A",
  "S98011A",
  "S98012A",
  "S98019A",
  "S98021A",
  "S98022A",
  "S98029A",
  "S98311A",
  "S98312A",
  "S98319A",
  "S98321A",
  "S98322A",
  "S98329A",
  "S98911A",
  "S98912A",
  "S98919A",
  "S98921A",
  "S98922A",
  "S98929A",
  "T1491XA",
  "T3111",
  "T3121",
  "T3122",
  "T3131",
  "T3132",
  "T3133",
  "T3141",
  "T3142",
  "T3143",
  "T3144",
  "T3151",
  "T3152",
  "T3153",
  "T3154",
  "T3155",
  "T3161",
  "T3162",
  "T3163",
  "T3164",
  "T3165",
  "T3166",
  "T3171",
  "T3172",
  "T3173",
  "T3174",
  "T3175",
  "T3176",
  "T3177",
  "T3181",
  "T3182",
  "T3183",
  "T3184",
  "T3185",
  "T3186",
  "T3187",
  "T3188",
  "T3191",
  "T3192",
  "T3193",
  "T3194",
  "T3195",
  "T3196",
  "T3197",
  "T3198",
  "T3199",
  "T3211",
  "T3221",
  "T3222",
  "T3231",
  "T3232",
  "T3233",
  "T3241",
  "T3242",
  "T3243",
  "T3244",
  "T3251",
  "T3252",
  "T3253",
  "T3254",
  "T3255",
  "T3261",
  "T3262",
  "T3263",
  "T3264",
  "T3265",
  "T3266",
  "T3271",
  "T3272",
  "T3273",
  "T3274",
  "T3275",
  "T3276",
  "T3277",
  "T3281",
  "T3282",
  "T3283",
  "T3284",
  "T3285",
  "T3286",
  "T3287",
  "T3288",
  "T3291",
  "T3292",
  "T3293",
  "T3294",
  "T3295",
  "T3296",
  "T3297",
  "T3298",
  "T3299",
  "T360X2A",
  "T361X2A",
  "T362X2A",
  "T363X2A",
  "T364X2A",
  "T365X2A",
  "T366X2A",
  "T367X2A",
  "T368X2A",
  "T3692XA",
  "T370X2A",
  "T371X2A",
  "T372X2A",
  "T373X2A",
  "T374X2A",
  "T375X2A",
  "T378X2A",
  "T3792XA",
  "T380X2A",
  "T381X2A",
  "T382X2A",
  "T383X2A",
  "T384X2A",
  "T385X2A",
  "T386X2A",
  "T387X2A",
  "T38802A",
  "T38812A",
  "T38892A",
  "T38902A",
  "T38992A",
  "T39012A",
  "T39092A",
  "T391X2A",
  "T392X2A",
  "T39312A",
  "T39392A",
  "T394X2A",
  "T398X2A",
  "T3992XA",
  "T400X1A",
  "T400X2A",
  "T400X4A",
  "T401X1A",
  "T401X2A",
  "T401X4A",
  "T402X1A",
  "T402X2A",
  "T402X4A",
  "T403X1A",
  "T403X2A",
  "T403X4A",
  "T40411A",
  "T40412A",
  "T40414A",
  "T40421A",
  "T40422A",
  "T40424A",
  "T40491A",
  "T40492A",
  "T40494A",
  "T405X1A",
  "T405X2A",
  "T405X4A",
  "T40601A",
  "T40602A",
  "T40604A",
  "T40691A",
  "T40692A",
  "T40694A",
  "T40712A",
  "T40722A",
  "T408X1A",
  "T408X2A",
  "T408X4A",
  "T40901A",
  "T40902A",
  "T40904A",
  "T40991A",
  "T40992A",
  "T40994A",
  "T410X2A",
  "T411X2A",
  "T41202A",
  "T41292A",
  "T413X2A",
  "T4142XA",
  "T415X2A",
  "T420X2A",
  "T421X2A",
  "T422X2A",
  "T423X2A",
  "T424X2A",
  "T425X2A",
  "T426X2A",
  "T4272XA",
  "T428X2A",
  "T43012A",
  "T43022A",
  "T431X2A",
  "T43202A",
  "T43212A",
  "T43222A",
  "T43292A",
  "T433X2A",
  "T434X2A",
  "T43502A",
  "T43592A",
  "T43601A",
  "T43602A",
  "T43604A",
  "T43611A",
  "T43612A",
  "T43614A",
  "T43621A",
  "T43622A",
  "T43624A",
  "T43631A",
  "T43632A",
  "T43634A",
  "T43641A",
  "T43642A",
  "T43644A",
  "T43651A",
  "T43652A",
  "T43654A",
  "T43691A",
  "T43692A",
  "T43694A",
  "T438X2A",
  "T4392XA",
  "T440X2A",
  "T441X2A",
  "T442X2A",
  "T443X2A",
  "T444X2A",
  "T445X2A",
  "T446X2A",
  "T447X2A",
  "T448X2A",
  "T44902A",
  "T44992A",
  "T450X2A",
  "T451X2A",
  "T452X2A",
  "T453X2A",
  "T454X2A",
  "T45512A",
  "T45522A",
  "T45602A",
  "T45612A",
  "T45622A",
  "T45692A",
  "T457X2A",
  "T458X2A",
  "T4592XA",
  "T45AX2A",
  "T460X2A",
  "T461X2A",
  "T462X2A",
  "T463X2A",
  "T464X2A",
  "T465X2A",
  "T466X2A",
  "T467X2A",
  "T468X2A",
  "T46902A",
  "T46992A",
  "T470X2A",
  "T471X2A",
  "T472X2A",
  "T473X2A",
  "T474X2A",
  "T475X2A",
  "T476X2A",
  "T477X2A",
  "T478X2A",
  "T4792XA",
  "T480X2A",
  "T481X2A",
  "T48202A",
  "T48292A",
  "T483X2A",
  "T484X2A",
  "T485X2A",
  "T486X2A",
  "T48902A",
  "T48992A",
  "T490X2A",
  "T491X2A",
  "T492X2A",
  "T493X2A",
  "T494X2A",
  "T495X2A",
  "T496X2A",
  "T497X2A",
  "T498X2A",
  "T4992XA",
  "T500X2A",
  "T501X2A",
  "T502X2A",
  "T503X2A",
  "T504X2A",
  "T505X2A",
  "T506X2A",
  "T507X2A",
  "T508X2A",
  "T50902A",
  "T50912A",
  "T50992A",
  "T50A12A",
  "T50A22A",
  "T50A92A",
  "T50B12A",
  "T50B92A",
  "T50Z12A",
  "T50Z92A",
  "T510X2A",
  "T511X2A",
  "T512X2A",
  "T513X2A",
  "T518X2A",
  "T5192XA",
  "T520X2A",
  "T521X2A",
  "T522X2A",
  "T523X2A",
  "T524X2A",
  "T528X2A",
  "T5292XA",
  "T530X2A",
  "T531X2A",
  "T532X2A",
  "T533X2A",
  "T534X2A",
  "T535X2A",
  "T536X2A",
  "T537X2A",
  "T5392XA",
  "T540X2A",
  "T541X2A",
  "T542X2A",
  "T543X2A",
  "T5492XA",
  "T550X2A",
  "T551X2A",
  "T560X2A",
  "T561X2A",
  "T562X2A",
  "T563X2A",
  "T564X2A",
  "T565X2A",
  "T566X2A",
  "T567X2A",
  "T56812A",
  "T56822A",
  "T56892A",
  "T5692XA",
  "T570X2A",
  "T571X2A",
  "T572X2A",
  "T573X2A",
  "T578X2A",
  "T5792XA",
  "T5802XA",
  "T5812XA",
  "T582X2A",
  "T588X2A",
  "T5892XA",
  "T590X2A",
  "T591X2A",
  "T592X2A",
  "T593X2A",
  "T594X2A",
  "T595X2A",
  "T596X2A",
  "T597X2A",
  "T59812A",
  "T59892A",
  "T5992XA",
  "T600X2A",
  "T601X2A",
  "T602X2A",
  "T603X2A",
  "T604X2A",
  "T608X2A",
  "T6092XA",
  "T6102XA",
  "T6112XA",
  "T61772A",
  "T61782A",
  "T618X2A",
  "T6192XA",
  "T620X2A",
  "T621X2A",
  "T622X2A",
  "T628X2A",
  "T6292XA",
  "T63002A",
  "T63012A",
  "T63022A",
  "T63032A",
  "T63042A",
  "T63062A",
  "T63072A",
  "T63082A",
  "T63092A",
  "T63112A",
  "T63122A",
  "T63192A",
  "T632X2A",
  "T63302A",
  "T63312A",
  "T63322A",
  "T63332A",
  "T63392A",
  "T63412A",
  "T63422A",
  "T63432A",
  "T63442A",
  "T63452A",
  "T63462A",
  "T63482A",
  "T63512A",
  "T63592A",
  "T63612A",
  "T63622A",
  "T63632A",
  "T63692A",
  "T63712A",
  "T63792A",
  "T63812A",
  "T63822A",
  "T63832A",
  "T63892A",
  "T6392XA",
  "T6402XA",
  "T6482XA",
  "T650X2A",
  "T651X2A",
  "T65212A",
  "T65222A",
  "T65292A",
  "T653X2A",
  "T654X2A",
  "T655X2A",
  "T656X2A",
  "T65812A",
  "T65822A",
  "T65832A",
  "T65892A",
  "T6592XA",
  "T71112A",
  "T71122A",
  "T71132A",
  "T71152A",
  "T71162A",
  "T71192A",
  "T71222A",
  "T71232A",
  "T790XXA",
  "T791XXA",
  "T794XXA",
  "T82512A",
  "T82522A",
  "T82532A",
  "T82592A",
  "T8600",
  "T8601",
  "T8602",
  "T8603",
  "T8609",
  "T8620",
  "T8621",
  "T8622",
  "T8623",
  "T86290",
  "T86298",
  "T8630",
  "T8630",
  "T8631",
  "T8631",
  "T8632",
  "T8632",
  "T8633",
  "T8633",
  "T8639",
  "T8639",
  "T8640",
  "T8641",
  "T8642",
  "T8643",
  "T8649",
  "T865",
  "T86810",
  "T86811",
  "T86812",
  "T86818",
  "T86819",
  "T86850",
  "T86851",
  "T86852",
  "T86858",
  "T86859",
  "T870X1",
  "T870X2",
  "T870X9",
  "T871X1",
  "T871X2",
  "T871X9",
  "T8730",
  "T8731",
  "T8732",
  "T8733",
  "T8734",
  "T8740",
  "T8741",
  "T8742",
  "T8743",
  "T8744",
  "T8750",
  "T8751",
  "T8752",
  "T8753",
  "T8754",
  "T8781",
  "T8789",
  "T879",
  "X710XXA",
  "X711XXA",
  "X712XXA",
  "X713XXA",
  "X718XXA",
  "X719XXA",
  "X72XXXA",
  "X730XXA",
  "X731XXA",
  "X732XXA",
  "X738XXA",
  "X739XXA",
  "X7401XA",
  "X7402XA",
  "X7409XA",
  "X748XXA",
  "X749XXA",
  "X75XXXA",
  "X76XXXA",
  "X770XXA",
  "X771XXA",
  "X772XXA",
  "X773XXA",
  "X778XXA",
  "X779XXA",
  "X780XXA",
  "X781XXA",
  "X782XXA",
  "X788XXA",
  "X789XXA",
  "X79XXXA",
  "X80XXXA",
  "X810XXA",
  "X811XXA",
  "X818XXA",
  "X820XXA",
  "X821XXA",
  "X822XXA",
  "X828XXA",
  "X830XXA",
  "X831XXA",
  "X832XXA",
  "X838XXA",
  "Z21",
  "Z430",
  "Z431",
  "Z432",
  "Z433",
  "Z434",
  "Z435",
  "Z436",
  "Z438",
  "Z439",
  "Z44101",
  "Z44102",
  "Z44109",
  "Z44111",
  "Z44112",
  "Z44119",
  "Z44121",
  "Z44122",
  "Z44129",
  "Z4821",
  "Z4823",
  "Z4824",
  "Z48280",
  "Z48280",
  "Z48290",
  "Z6841",
  "Z6842",
  "Z6843",
  "Z6844",
  "Z6845",
  "Z6856",
  "Z794",
  "Z89431",
  "Z89432",
  "Z89439",
  "Z89441",
  "Z89442",
  "Z89449",
  "Z89511",
  "Z89512",
  "Z89519",
  "Z89611",
  "Z89612",
  "Z89619",
  "Z930",
  "Z931",
  "Z932",
  "Z933",
  "Z934",
  "Z9350",
  "Z9351",
  "Z9352",
  "Z9359",
  "Z936",
  "Z938",
  "Z939",
  "Z941",
  "Z942",
  "Z943",
  "Z943",
  "Z944",
  "Z9481",
  "Z9482",
  "Z9483",
  "Z9484",
  "Z95811",
  "Z95812",
  "Z9713",
  "Z9714",
  "Z9716",
  "Z9911",
  "Z9912",
];

export function bundleToHtmlSimple(fhirBundle: Bundle, brief?: Brief): string {
  const {
    patient,
    medications,
    medicationStatements,
    conditions,
    observationSocialHistory,
    observationVitals,
    observationLaboratory,
  } = extractFhirTypesFromBundleSimple(fhirBundle);

  if (!patient) {
    throw new Error("No patient found in bundle");
  }

  const htmlPage = `
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
      <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <title>Patient Medical Record</title>
        <!-- General CSS -->
        <style type="text/css" media="all">

          * {
            font-family: Verdana, Tahoma, sans-serif;
          }

          .title {
            text-align: center;
            font-size: 1.5rem;
          }

          .logo-container {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: center;
            -ms-flex-pack: center;
            justify-content: center;
            width: 100%;
          }

          .logo-container img {
            height: 80px;
          }

          .divider {
            border: 0.5px solid lightgrey;
            margin: 20px auto;
            width: 100%;
          }

          .header-tables {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-flex: 1;
            -ms-flex: 1;
            flex: 1;
          }

          .header-table {
            width: 50%;
          }

          .header-label {
            font-weight: bold;
            margin-right: 5px;
          }

          body {
            padding: 0 1rem;
          }

          table {
            line-height: 15pt;
            width: 100%;
            border: 1px solid black;
            border-radius: 5px;
          }

          thead tr,
          thead th {
            background-color: LightGrey;
            padding: 8px 5px;
          }

          table {
            width: 100%;
            margin: 0.3em 0;
          }

          tbody tr, tbody th {
            background-color: #f2f2f2;
          }

          tbody tr td {
            padding: 8px 5px;
          }

          .section {
            margin-bottom: 50px;
          }

          .section-title {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
          }

          .section-title a {
            text-decoration: none;
            color: black;
          }

          .section-title h3 {
                white-space: nowrap;
          }

          #nav {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
          }
          table #nav {
            padding: 10px;
            margin: 0;
            background-color: #f2f2f2;
          }

          #nav .half {
            width: 50%;
          }

          #nav li {
            margin-bottom: 10px;
            margin-left: 20px;
          }

          #nav li a {
            text-decoration: none;
            color: black;
          }

          #mr-header h4 {
            margin-bottom: 10px
          }

          .p-line {
            white-space: pre-line;
          }



        </style>
      </head>

      <body>
        ${createMRHeader(patient)}
        ${createBrief(brief)}
        <div class="divider"></div>
        <div id="mr-sections">
          ${createConditionsSection(conditions)}
          ${createMedicationSection(medications, medicationStatements)}
          ${createObservationSocialHistorySection(observationSocialHistory)}
          ${createObservationVitalsSection(observationVitals)}
          ${createObservationLabsSection(observationLaboratory)}
        </div>
      </body>
    </html>
  `;

  return htmlPage;
}

function extractFhirTypesFromBundleSimple(bundle: Bundle): {
  patient?: Patient | undefined;
  medications: Medication[];
  medicationStatements: MedicationStatement[];
  conditions: Condition[];
  observationSocialHistory: Observation[];
  observationVitals: Observation[];
  observationLaboratory: Observation[];
} {
  let patient: Patient | undefined;
  const medications: Medication[] = [];
  const medicationStatements: MedicationStatement[] = [];
  const conditions: Condition[] = [];
  const observationSocialHistory: Observation[] = [];
  const observationVitals: Observation[] = [];
  const observationLaboratory: Observation[] = [];

  if (bundle.entry) {
    for (const entry of bundle.entry) {
      const resource = entry.resource;
      if (resource?.resourceType === "Patient") {
        patient = resource as Patient;
      } else if (resource?.resourceType === "MedicationStatement") {
        medicationStatements.push(resource as MedicationStatement);
      } else if (resource?.resourceType === "Medication") {
        medications.push(resource as Medication);
      } else if (resource?.resourceType === "Condition") {
        conditions.push(resource as Condition);
      } else if (resource?.resourceType === "Observation") {
        const observation = resource as Observation;
        const isVitalSigns = observation.category?.find(
          ext => ext.coding?.[0]?.code?.toLowerCase() === "vital-signs"
        );
        const isSocialHistory = observation.category?.find(
          ext => ext.coding?.[0]?.code?.toLowerCase() === "social-history"
        );
        const isLaboratory = observation.category?.find(
          category => category.coding?.[0]?.code?.toLowerCase() === "laboratory"
        );

        if (isVitalSigns) {
          observationVitals.push(observation);
        } else if (isLaboratory) {
          observationLaboratory.push(observation);
        } else if (isSocialHistory) {
          observationSocialHistory.push(observation);
        }
      }
    }
  }

  return {
    patient,
    medications,
    medicationStatements,
    conditions,
    observationSocialHistory,
    observationVitals,
    observationLaboratory,
  };
}

function createMRHeader(patient: Patient): string {
  return `
    <div id="mr-header">
      <div class='logo-container'>
        <img src="https://raw.githubusercontent.com/metriport/metriport/develop/assets/logo-black.png" alt="Logo">
      </div>
      <h1 class="title">
        Patient Medical Record (${formatDateForDisplay(new Date())})
      </h1>
      <div class="header-tables">
        <div style="margin-right: 10px" class="header-table">
          <div >
            <h4>Patient</h4>
            <table class="header-table-patient">
              <tbody>
                ${createHeaderTableRow(
                  "Name",
                  `${patient.name?.[0]?.given?.[0] ?? ""} ${patient.name?.[0]?.family ?? ""}`
                )}
                ${createHeaderTableRow("ID", patient.id ?? "")}
                ${createHeaderTableRow("DOB", patient.birthDate ?? "")}
                ${createHeaderTableRow("Gender", patient.gender ?? "")}
              </tbody>
            </table>
          </div>
          <div>
            <h4>Author</h4>
            <table class="header-table-author">
              <tbody>
                ${createHeaderTableRow("Name", "Metriport")}
                ${createHeaderTableRow("Authored On", formatDateForDisplay(new Date()))}
              </tbody>
            </table>
          </div>
        </div>
        <div class="header-table">
          <h4>Table of Contents</h4>
          <table><tbody><tr><td>
            <ul id="nav">
              <div class='half'>
                <li>
                  <a href="#conditions">Conditions</a>
                </li>
                <li>
                  <a href="#medications">Medications</a>
                </li>
              </div>
              <div class='half'>
                <li>
                  <a href="#social-history">Social History</a>
                </li>
                <li>
                  <a href="#vitals">Vitals</a>
                </li>
                <li>
                  <a href="#labs">Laboratory</a>
                </li>
              </div>
            </ul>
          </td></tr></tbody></table>
        </div>
      </div>
    </div>
  `;
}

function createHeaderTableRow(label: string, value: string): string {
  return `
    <tr>
      <td class="header-label">${label}:</td>
      <td>${value}</td>
    </tr>
  `;
}

function createConditionsSection(conditions: Condition[]): string {
  if (!conditions || conditions.length === 0) {
    return createSection(
      "Conditions",
      `<table><tbody><tr><td>No conditions found</td></tr></tbody></table>`,
      "conditions"
    );
  }

  // Separate HCC V28 conditions from chronic conditions
  const hccConditions: Condition[] = [];
  const chronicConditions: Condition[] = [];

  conditions.forEach(condition => {
    const icd10Code = getICD10Code(condition);
    if (icd10Code && HCC_V28_CODES.includes(icd10Code)) {
      hccConditions.push(condition);
    } else if (isChronicCondition(condition)) {
      chronicConditions.push(condition);
    }
  });

  // Consolidate conditions with same ICD-10 codes
  const consolidatedHccConditions = consolidateConditionsByICD10(hccConditions);
  const consolidatedChronicConditions = consolidateConditionsByICD10(chronicConditions);

  // Sort conditions by date (unknown dates at bottom)
  const sortedHccConditions = sortConditionsByDate(consolidatedHccConditions);
  const sortedChronicConditions = sortConditionsByDate(consolidatedChronicConditions);

  let tableContent = "";

  // HCC V28 Conditions (Priority 1)
  if (sortedHccConditions.length > 0) {
    tableContent += `
      <tr>
        <th colspan="3" style="text-align: left; padding: 10px;">
          HCC V28 Conditions
        </th>
      </tr>
      ${sortedHccConditions.map(condition => createConditionRow(condition)).join("")}
    `;
  }

  // Chronic Conditions (Priority 2)
  if (sortedChronicConditions.length > 0) {
    tableContent += `
      <tr>
        <th colspan="3" style="text-align: left; padding: 10px;">
          Chronic Conditions
        </th>
      </tr>
      ${sortedChronicConditions.map(condition => createConditionRow(condition)).join("")}
    `;
  }

  return createSection(
    "Conditions",
    `
    <table>
      <thead>
        <tr>
          <th>Condition</th>
          <th>ICD-10 Code</th>
          <th>Onset Date</th>
        </tr>
      </thead>
      <tbody>
        ${tableContent}
      </tbody>
    </table>
    `,
    "conditions"
  );
}

function createConditionRow(condition: Condition): string {
  const icd10Code = getICD10Code(condition);
  const onsetDate = condition.onsetDateTime
    ? formatDateForDisplay(condition.onsetDateTime)
    : condition.onsetPeriod?.start
    ? formatDateForDisplay(condition.onsetPeriod.start)
    : "Unknown";

  return `
    <tr>
      <td>${condition.code?.text || condition.code?.coding?.[0]?.display || "Unknown"}</td>
      <td>${icd10Code || "N/A"}</td>
      <td>${onsetDate}</td>
    </tr>
  `;
}

function createMedicationSection(
  medications: Medication[],
  medicationStatements: MedicationStatement[]
): string {
  if (
    (!medications || medications.length === 0) &&
    (!medicationStatements || medicationStatements.length === 0)
  ) {
    return createSection(
      "Medications",
      `<table><tbody><tr><td>No medications found</td></tr></tbody></table>`,
      "medications"
    );
  }

  // Filter for active medication statements and get the latest ones
  const activeMedications = medicationStatements.filter(statement => {
    // Check if the statement is active
    const isActive = statement.status === "active" || statement.status === "intended";

    // Check if it's from the last 12 months
    const oneYearAgo = dayjs().subtract(1, "year").format(ISO_DATE);
    const effectiveDate =
      statement.effectiveDateTime ||
      statement.effectivePeriod?.start ||
      statement.effectivePeriod?.end;

    // If we have an effectivePeriod with both start and end, use the most recent date
    if (statement.effectivePeriod?.start && statement.effectivePeriod?.end) {
      const startDate = statement.effectivePeriod.start;
      const endDate = statement.effectivePeriod.end;
      const mostRecentDate = dayjs(startDate).isAfter(dayjs(endDate)) ? startDate : endDate;
      return isActive && mostRecentDate >= oneYearAgo;
    }

    return isActive && effectiveDate && effectiveDate >= oneYearAgo;
  });

  if (activeMedications.length === 0) {
    return createSection(
      "Medications",
      `<table><tbody><tr><td>No active medications found in the last 12 months</td></tr></tbody></table>`,
      "medications"
    );
  }

  const medicationMap = new Map<string, Medication>();
  medications.forEach(med => {
    if (med.id) {
      medicationMap.set(med.id, med);
    }
  });

  // Consolidate medications by name and get start dates for each
  const consolidatedMedications = new Map<
    string,
    {
      name: string;
      dosage: string;
      startDate: string;
    }
  >();

  activeMedications.forEach((statement: MedicationStatement) => {
    const medication = statement.medicationReference?.reference
      ? medicationMap.get(statement.medicationReference.reference.replace("Medication/", ""))
      : undefined;

    const medicationName =
      medication?.code?.text ||
      medication?.code?.coding?.[0]?.display ||
      statement.medicationCodeableConcept?.text ||
      statement.medicationCodeableConcept?.coding?.[0]?.display ||
      "Unknown";

    const dosage = statement.dosage?.[0]?.text || "Not specified";

    // Get start date - prioritize effectivePeriod.start as it represents when medication was started
    const startDate = statement.effectivePeriod?.start || statement.effectiveDateTime;

    const formattedStartDate = startDate ? dayjs(startDate).format("MM/DD/YYYY") : "Unknown";

    if (consolidatedMedications.has(medicationName)) {
      // Update with the latest start date if this one is more recent
      const existing = consolidatedMedications.get(medicationName);
      if (
        existing &&
        formattedStartDate !== "Unknown" &&
        (existing.startDate === "Unknown" ||
          dayjs(formattedStartDate).isAfter(dayjs(existing.startDate)))
      ) {
        existing.startDate = formattedStartDate;
        existing.dosage = dosage;
      }
    } else {
      // Add new medication
      consolidatedMedications.set(medicationName, {
        name: medicationName,
        dosage,
        startDate: formattedStartDate,
      });
    }
  });

  // Sort consolidated medications by start date (most recent first, unknown at bottom)
  const sortedMedications = Array.from(consolidatedMedications.values()).sort((a, b) => {
    if (a.startDate === "Unknown" && b.startDate === "Unknown") return 0;
    if (a.startDate === "Unknown") return 1;
    if (b.startDate === "Unknown") return -1;
    return dayjs(b.startDate).diff(dayjs(a.startDate));
  });

  const tableContent = sortedMedications
    .map(
      med => `
      <tr>
        <td>${med.name}</td>
        <td>${med.dosage}</td>
        <td>${med.startDate}</td>
      </tr>
    `
    )
    .join("");

  return createSection(
    "Medications (Last 12 Months)",
    `
    <table>
      <thead>
        <tr>
          <th style="width: 40%;">Medication</th>
          <th style="width: 35%;">Dosage</th>
          <th style="width: 25%;">Start Date</th>
        </tr>
      </thead>
      <tbody>
        ${tableContent}
      </tbody>
    </table>
    `,
    "medications"
  );
}

function createObservationSocialHistorySection(observations: Observation[]): string {
  if (!observations || observations.length === 0) {
    return createSection(
      "Social History",
      `<table><tbody><tr><td>No social history found</td></tr></tbody></table>`,
      "social-history"
    );
  }

  const socialHistoryObservations = observations.filter(obs =>
    obs.category?.some(cat =>
      cat.coding?.some(
        coding => coding.code === "social-history" || coding.system?.includes("social-history")
      )
    )
  );

  if (socialHistoryObservations.length === 0) {
    return createSection(
      "Social History",
      `<table><tbody><tr><td>No social history observations found</td></tr></tbody></table>`,
      "social-history"
    );
  }

  // Consolidate social history observations by category and get the latest for each
  const consolidatedSocialHistory = new Map<
    string,
    {
      category: string;
      value: string;
      date: string;
      effectiveDate: string | undefined;
    }
  >();

  socialHistoryObservations.forEach(observation => {
    const category = observation.code?.text || observation.code?.coding?.[0]?.display || "Unknown";
    const value = renderSocialHistoryValue(observation);
    const effectiveDate = observation.effectiveDateTime || observation.effectivePeriod?.start;
    const formattedDate = effectiveDate ? dayjs(effectiveDate).format("MM/DD/YYYY") : "Unknown";

    if (consolidatedSocialHistory.has(category)) {
      // Update with the latest date if this one is more recent
      const existing = consolidatedSocialHistory.get(category);
      if (!existing) return;
      if (
        formattedDate !== "Unknown" &&
        (existing.date === "Unknown" ||
          dayjs(effectiveDate).isAfter(dayjs(existing.effectiveDate || "")))
      ) {
        existing.value = value;
        existing.date = formattedDate;
        existing.effectiveDate = effectiveDate;
      }
    } else {
      // Add new category
      consolidatedSocialHistory.set(category, {
        category,
        value,
        date: formattedDate,
        effectiveDate,
      });
    }
  });

  // Sort consolidated social history by date (most recent first, unknown at bottom)
  const sortedSocialHistory = Array.from(consolidatedSocialHistory.values()).sort((a, b) => {
    if (a.date === "Unknown" && b.date === "Unknown") return 0;
    if (a.date === "Unknown") return 1;
    if (b.date === "Unknown") return -1;
    return dayjs(b.effectiveDate || "").diff(dayjs(a.effectiveDate || ""));
  });

  const tableContent = sortedSocialHistory
    .map(
      item => `
      <tr>
        <td>${item.category}</td>
        <td>${item.value}</td>
        <td>${item.date}</td>
      </tr>
    `
    )
    .join("");

  return createSection(
    "Social History",
    `
    <table>
      <thead>
        <tr>
          <th>Category</th>
          <th>Value</th>
          <th>Date</th>
        </tr>
      </thead>
      <tbody>
        ${tableContent}
      </tbody>
    </table>
    `,
    "social-history"
  );
}

function createObservationVitalsSection(observations: Observation[]): string {
  if (!observations || observations.length === 0) {
    return createSection(
      "Vitals",
      `<table><tbody><tr><td>No vitals found</td></tr></tbody></table>`,
      "vitals"
    );
  }

  // Filter vitals from last 12 months
  const oneYearAgo = dayjs().subtract(1, "year").format(ISO_DATE);
  const vitalsObservations = observations.filter(obs => {
    const isVitalSign = obs.category?.some(cat =>
      cat.coding?.some(
        coding => coding.code === "vital-signs" || coding.system?.includes("vital-signs")
      )
    );

    if (!isVitalSign) return false;

    const effectiveDate = obs.effectiveDateTime || obs.effectivePeriod?.start;
    return effectiveDate && effectiveDate >= oneYearAgo;
  });

  if (vitalsObservations.length === 0) {
    return createSection(
      "Vitals (Last 12 Months)",
      `<table><tbody><tr><td>No vitals found in the last 12 months</td></tr></tbody></table>`,
      "vitals"
    );
  }

  // Group vitals by date
  const vitalsByDate = new Map<string, Observation[]>();
  vitalsObservations.forEach(obs => {
    const effectiveDate = obs.effectiveDateTime || obs.effectivePeriod?.start;
    const dateKey = effectiveDate ? formatDateForDisplay(effectiveDate) : "Unknown";

    if (!vitalsByDate.has(dateKey)) {
      vitalsByDate.set(dateKey, []);
    }
    const vitalsForDate = vitalsByDate.get(dateKey);
    if (vitalsForDate) {
      vitalsForDate.push(obs);
    }
  });

  const sortedDates = Array.from(vitalsByDate.keys()).sort((a, b) => {
    if (a === "Unknown") return 1;
    if (b === "Unknown") return -1;
    return dayjs(b).diff(dayjs(a));
  });

  let tablesContent = "";

  sortedDates.forEach(date => {
    const observationsForDate = vitalsByDate.get(date);
    if (!observationsForDate) return;

    const tableRows = observationsForDate
      .map(obs => {
        const code = obs.code?.text || obs.code?.coding?.[0]?.display || "Unknown";
        const value = renderVitalsValue(obs);

        return `
            <tr>
              <td style="padding: 8px; border: 1px solid #ddd;">${code}</td>
              <td style="padding: 8px; border: 1px solid #ddd;">${value}</td>
            </tr>
          `;
      })
      .join("");

    tablesContent += `
      <div style="margin-bottom: 30px;">
        <h4 style="margin-bottom: 10px; color: #333;">
          Vitals for ${date}
        </h4>
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
          <thead>
            <tr style="background-color: #f5f5f5;">
              <th style="padding: 8px; border: 1px solid #ddd; text-align: left;">Vital Sign</th>
              <th style="padding: 8px; border: 1px solid #ddd; text-align: left;">Value</th>
            </tr>
          </thead>
          <tbody>
            ${tableRows}
          </tbody>
        </table>
      </div>
    `;
  });

  return createSection("Vitals (Last 12 Months)", tablesContent, "vitals");
}

// Helper function to determine if a lab result is abnormal
function getLabResultStatus(obs: Observation): {
  status: "normal" | "high" | "low";
  isAbnormal: boolean;
} {
  const value = obs.valueQuantity?.value;
  const interpretation =
    obs.interpretation?.[0]?.text?.toLowerCase() ||
    obs.interpretation?.[0]?.coding?.[0]?.display?.toLowerCase() ||
    obs.interpretation?.[0]?.coding?.[0]?.code?.toLowerCase();

  // Check explicit interpretation first
  if (interpretation) {
    if (
      interpretation.includes("high") ||
      interpretation.includes("critical") ||
      interpretation.includes("positive") ||
      interpretation.includes("abnormal") ||
      interpretation.includes("elevated") ||
      interpretation.includes("increased")
    ) {
      return { status: "high", isAbnormal: true };
    }
    if (
      interpretation.includes("low") ||
      interpretation.includes("decreased") ||
      interpretation.includes("reduced")
    ) {
      return { status: "low", isAbnormal: true };
    }
    if (interpretation.includes("normal") || interpretation.includes("negative")) {
      return { status: "normal", isAbnormal: false };
    }
  }

  // Check reference range if we have a numeric value
  if (typeof value === "number" && obs.referenceRange?.[0]) {
    const low = obs.referenceRange[0].low?.value;
    const high = obs.referenceRange[0].high?.value;

    if (low !== undefined && value < low) {
      return { status: "low", isAbnormal: true };
    }
    if (high !== undefined && value > high) {
      return { status: "high", isAbnormal: true };
    }
    if (low !== undefined && high !== undefined && value >= low && value <= high) {
      return { status: "normal", isAbnormal: false };
    }
  }

  return { status: "normal", isAbnormal: false };
}

// Helper function to get CSS class for styling
function getLabResultCssClass(status: "normal" | "high" | "low"): string {
  switch (status) {
    case "high":
      return "background-color: #ffebee; color: #c62828;"; // Light red background, dark red text
    case "low":
      return "background-color: #e3f2fd; color: #1565c0;"; // Light blue background, dark blue text
    default:
      return ""; // No highlighting for normal results
  }
}

function createObservationLabsSection(observations: Observation[]): string {
  if (!observations || observations.length === 0) {
    return createSection(
      "Laboratory Results",
      `<table><tbody><tr><td>No laboratory results found</td></tr></tbody></table>`,
      "labs"
    );
  }

  // Filter labs from last 12 months
  const oneYearAgo = dayjs().subtract(1, "year").format(ISO_DATE);
  const labsObservations = observations.filter(obs => {
    const isLab = obs.category?.some(cat =>
      cat.coding?.some(
        coding => coding.code === "laboratory" || coding.system?.includes("laboratory")
      )
    );

    if (!isLab) return false;

    const effectiveDate = obs.effectiveDateTime || obs.effectivePeriod?.start;
    return effectiveDate && effectiveDate >= oneYearAgo;
  });

  if (labsObservations.length === 0) {
    return createSection(
      "Laboratory Results (Last 12 Months)",
      `<table><tbody><tr><td>No laboratory results found in the last 12 months</td></tr></tbody></table>`,
      "labs"
    );
  }

  // Group labs by date
  const labsByDate = new Map<string, Observation[]>();
  labsObservations.forEach(obs => {
    const effectiveDate = obs.effectiveDateTime || obs.effectivePeriod?.start;
    const dateKey = effectiveDate ? dayjs(effectiveDate).format("MM/DD/YYYY") : "Unknown";

    if (!labsByDate.has(dateKey)) {
      labsByDate.set(dateKey, []);
    }
    const labsForDate = labsByDate.get(dateKey);
    if (labsForDate) {
      labsForDate.push(obs);
    }
  });

  // Sort dates and limit to latest 4 days
  const sortedDates = Array.from(labsByDate.keys())
    .sort((a, b) => {
      if (a === "Unknown") return 1;
      if (b === "Unknown") return -1;
      return dayjs(b).diff(dayjs(a));
    })
    .slice(0, 4); // Only show latest 4 days

  let tablesContent = "";

  sortedDates.forEach(date => {
    const observationsForDate = labsByDate.get(date);
    if (!observationsForDate) return;

    // Sort observations within each date: abnormal first, then by test name
    const sortedObservations = observationsForDate.sort((a, b) => {
      const statusA = getLabResultStatus(a);
      const statusB = getLabResultStatus(b);

      // If one is abnormal and the other isn't, abnormal goes first
      if (statusA.isAbnormal && !statusB.isAbnormal) return -1;
      if (!statusA.isAbnormal && statusB.isAbnormal) return 1;

      // If both are abnormal, sort by severity (high before low)
      if (statusA.isAbnormal && statusB.isAbnormal) {
        if (statusA.status === "high" && statusB.status === "low") return -1;
        if (statusA.status === "low" && statusB.status === "high") return 1;
      }

      // If same status, sort alphabetically by test name
      const nameA = a.code?.text || a.code?.coding?.[0]?.display || "Unknown";
      const nameB = b.code?.text || b.code?.coding?.[0]?.display || "Unknown";
      return nameA.localeCompare(nameB);
    });

    const tableRows = sortedObservations
      .map(obs => {
        const code = obs.code?.text || obs.code?.coding?.[0]?.display || "Unknown";
        const value = renderLabsValue(obs);
        const unit = obs.valueQuantity?.unit || "";
        const interpretation =
          obs.interpretation?.[0]?.text || obs.interpretation?.[0]?.coding?.[0]?.display || "";
        let referenceRange = "";
        if (obs.referenceRange?.[0]) {
          if (obs.referenceRange[0].text) {
            referenceRange = obs.referenceRange[0].text;
          } else if (obs.referenceRange[0].low && obs.referenceRange[0].high) {
            referenceRange = `${obs.referenceRange[0].low.value} - ${
              obs.referenceRange[0].high.value
            }${obs.referenceRange[0].low.unit ? " " + obs.referenceRange[0].low.unit : ""}`;
          }
        }

        const resultStatus = getLabResultStatus(obs);
        const cssClass = getLabResultCssClass(resultStatus.status);

        return `
        <tr>
          <td style="width: 20%; padding: 8px; border: 1px solid #ddd;">${code}</td>
          <td style="width: 20%; padding: 8px; border: 1px solid #ddd; ${cssClass}">${value}${
          unit ? ` ${unit}` : ""
        }</td>
          <td style="width: 20%; padding: 8px; border: 1px solid #ddd; ${cssClass}">${interpretation}</td>
          <td style="width: 20%; padding: 8px; border: 1px solid #ddd;">${referenceRange}</td>
          <td style="width: 20%; padding: 8px; border: 1px solid #ddd;">${date}</td>
        </tr>
      `;
      })
      .join("");

    tablesContent += `
      <div style="margin-bottom: 30px;">
        <h4 style="margin-bottom: 10px; color: #333;">
          Lab Results for ${date}
        </h4>
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
          <thead>
            <tr style="background-color: #f5f5f5;">
              <th style="width: 20%; padding: 8px; border: 1px solid #ddd; text-align: left;">Observation</th>
              <th style="width: 20%; padding: 8px; border: 1px solid #ddd; text-align: left;">Value</th>
              <th style="width: 20%; padding: 8px; border: 1px solid #ddd; text-align: left;">Interpretation</th>
              <th style="width: 20%; padding: 8px; border: 1px solid #ddd; text-align: left;">Reference Range</th>
              <th style="width: 20%; padding: 8px; border: 1px solid #ddd; text-align: left;">Date</th>
            </tr>
          </thead>
          <tbody>
            ${tableRows}
          </tbody>
        </table>
      </div>
    `;
  });

  return createSection("Laboratory Results", tablesContent, "labs");
}

// Helper functions
function sortConditionsByDate(conditions: Condition[]): Condition[] {
  return conditions.sort((a, b) => {
    const dateA = a.onsetDateTime || a.onsetPeriod?.start || null;
    const dateB = b.onsetDateTime || b.onsetPeriod?.start || null;

    // If both dates are unknown, maintain original order
    if (!dateA && !dateB) return 0;

    // Unknown dates go to the bottom
    if (!dateA) return 1;
    if (!dateB) return -1;

    // Sort by date (most recent first)
    return dayjs(dateB).diff(dayjs(dateA));
  });
}

function getICD10Code(condition: Condition): string | undefined {
  return condition.code?.coding?.find(
    coding => coding.system?.includes("icd-10") || coding.system?.includes("2.16.840.1.113883.6.90")
  )?.code;
}

function isChronicCondition(condition: Condition): boolean {
  // Check for the chronicity extension
  const chronicityExtension = condition.extension?.find(
    ext => ext.url === "http://hl7.org/fhir/StructureDefinition/condition-related"
  );

  if (chronicityExtension?.valueCoding?.code === "C") {
    return true;
  }

  // Fallback: Simple heuristic for conditions that are active and have been present for a while
  const isActive = condition.clinicalStatus?.coding?.some(
    coding => coding.code === "active" || coding.code === "recurrence" || coding.code === "relapse"
  );

  if (!isActive) return false;

  // Check if it's been present for more than 3 months
  const onsetDate = condition.onsetDateTime || condition.onsetPeriod?.start;
  if (onsetDate) {
    const threeMonthsAgo = dayjs().subtract(3, "month");
    return dayjs(onsetDate).isBefore(threeMonthsAgo);
  }

  return false;
}

function consolidateConditionsByICD10(conditions: Condition[]): Condition[] {
  const consolidated = new Map<string, Condition>();

  conditions.forEach(condition => {
    const icd10Code = getICD10Code(condition);
    const conditionName = condition.code?.text || condition.code?.coding?.[0]?.display || "Unknown";

    // Use ICD-10 code as key if available, otherwise use condition name
    const key = icd10Code || conditionName;

    if (!consolidated.has(key)) {
      consolidated.set(key, condition);
    } else {
      // Keep the most recent one
      const existing = consolidated.get(key);
      if (existing) {
        const existingDate = existing.onsetDateTime || existing.onsetPeriod?.start;
        const newDate = condition.onsetDateTime || condition.onsetPeriod?.start;

        if (newDate && (!existingDate || dayjs(newDate).isAfter(dayjs(existingDate)))) {
          consolidated.set(key, condition);
        }
      }
    }
  });

  return Array.from(consolidated.values());
}

function renderSocialHistoryValue(observation: Observation): string {
  if (observation.valueQuantity) {
    return `${observation.valueQuantity.value} ${observation.valueQuantity.unit || ""}`;
  }
  if (observation.valueCodeableConcept) {
    return (
      observation.valueCodeableConcept.text ||
      observation.valueCodeableConcept.coding?.[0]?.display ||
      "Unknown"
    );
  }
  if (observation.valueString) {
    return observation.valueString;
  }
  if (observation.valueBoolean !== undefined) {
    return observation.valueBoolean ? "Yes" : "No";
  }
  return "Unknown";
}

function renderVitalsValue(observation: Observation): string {
  if (observation.valueQuantity) {
    return `${observation.valueQuantity.value} ${observation.valueQuantity.unit || ""}`;
  }
  if (observation.valueCodeableConcept) {
    return (
      observation.valueCodeableConcept.text ||
      observation.valueCodeableConcept.coding?.[0]?.display ||
      "Unknown"
    );
  }
  if (observation.valueString) {
    return observation.valueString;
  }
  return "Unknown";
}

function renderLabsValue(observation: Observation): string {
  if (observation.valueQuantity) {
    return `${observation.valueQuantity.value}`;
  }
  if (observation.valueCodeableConcept) {
    return (
      observation.valueCodeableConcept.text ||
      observation.valueCodeableConcept.coding?.[0]?.display ||
      "Unknown"
    );
  }
  if (observation.valueString) {
    return observation.valueString;
  }
  if (observation.valueBoolean !== undefined) {
    return observation.valueBoolean ? "Positive" : "Negative";
  }
  return "Unknown";
}
