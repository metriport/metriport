title: fhirElementDefinition
type: object
description: >-
  Captures constraints on each element within the resource, profile, or
  extension.
properties:
  id:
    type: string
    nullable: true
    description: >-
      Unique id for the element within a resource (for internal references).
      This may be any string value that does not contain spaces.
  extension:
    type: array
    items:
      $ref: ./fhirExtension.yml
    nullable: true
    description: >-
      May be used to represent additional information that is not part of the
      basic definition of the element. To make the use of extensions safe and
      manageable, there is a strict set of governance applied to the definition
      and use of extensions. Though any implementer can define an extension,
      there is a set of requirements that SHALL be met as part of the definition
      of the extension.
  modifierExtension:
    type: array
    items:
      $ref: ./fhirExtension.yml
    nullable: true
    description: >-
      May be used to represent additional information that is not part of the
      basic definition of the element and that modifies the understanding of the
      element in which it is contained and/or the understanding of the
      containing element's descendants. Usually modifier elements provide
      negation or qualification. To make the use of extensions safe and
      manageable, there is a strict set of governance applied to the definition
      and use of extensions. Though any implementer can define an extension,
      there is a set of requirements that SHALL be met as part of the definition
      of the extension. Applications processing a resource are required to check
      for modifier extensions. Modifier extensions SHALL NOT change the meaning
      of any elements on Resource or DomainResource (including cannot change the
      meaning of modifierExtension itself).
  path:
    type: string
    nullable: true
    description: >-
      The path identifies the element and is expressed as a "."-separated list
      of ancestor elements, beginning with the name of the resource or
      extension.
  representation:
    type: array
    items:
      $ref: ./fhirElementDefinitionRepresentationItem.yml
    nullable: true
    description: >-
      Codes that define how this element is represented in instances, when the
      deviation varies from the normal case.
  sliceName:
    type: string
    nullable: true
    description: >-
      The name of this element definition slice, when slicing is working. The
      name must be a token with no dots or spaces. This is a unique name
      referring to a specific set of constraints applied to this element, used
      to provide a name to different slices of the same element.
  sliceIsConstraining:
    type: boolean
    nullable: true
    description: >-
      If true, indicates that this slice definition is constraining a slice
      definition with the same name in an inherited profile. If false, the slice
      is not overriding any slice in an inherited profile. If missing, the slice
      might or might not be overriding a slice in an inherited profile,
      depending on the sliceName.
  label:
    type: string
    nullable: true
    description: >-
      A single preferred label which is the text to display beside the element
      indicating its meaning or to use to prompt for the element in a user
      display or form.
  code:
    type: array
    items:
      $ref: ./fhirCoding.yml
    nullable: true
    description: >-
      A code that has the same meaning as the element in a particular
      terminology.
  slicing:
    $ref: ./fhirElementDefinitionSlicing.yml
    nullable: true
    description: >-
      Indicates that the element is sliced into a set of alternative definitions
      (i.e. in a structure definition, there are multiple different constraints
      on a single element in the base resource). Slicing can be used in any
      resource that has cardinality ..\* on the base resource, or any resource
      with a choice of types. The set of slices is any elements that come after
      this in the element sequence that have the same path, until a shorter path
      occurs (the shorter path terminates the set).
  short:
    type: string
    nullable: true
    description: >-
      A concise description of what this element means (e.g. for use in
      autogenerated summaries).
  definition:
    $ref: ./fhirmarkdown.yml
    nullable: true
    description: >-
      Provides a complete explanation of the meaning of the data element for
      human readability. For the case of elements derived from existing elements
      (e.g. constraints), the definition SHALL be consistent with the base
      definition, but convey the meaning of the element in the particular
      context of use of the resource. (Note: The text you are reading is
      specified in ElementDefinition.definition).
  comment:
    $ref: ./fhirmarkdown.yml
    nullable: true
    description: >-
      Explanatory notes and implementation guidance about the data element,
      including notes about how to use the data properly, exceptions to proper
      use, etc. (Note: The text you are reading is specified in
      ElementDefinition.comment).
  requirements:
    $ref: ./fhirmarkdown.yml
    nullable: true
    description: >-
      This element is for traceability of why the element was created and why
      the constraints exist as they do. This may be used to point to source
      materials or specifications that drove the structure of this element.
  alias:
    type: array
    items:
      type: string
    nullable: true
    description: Identifies additional names by which this element might also be known.
  min:
    $ref: ./fhirunsignedInt.yml
    nullable: true
    description: The minimum number of times this element SHALL appear in the instance.
  max:
    type: string
    nullable: true
    description: >-
      The maximum number of times this element is permitted to appear in the
      instance.
  base:
    $ref: ./fhirElementDefinitionBase.yml
    nullable: true
    description: >-
      Information about the base definition of the element, provided to make it
      unnecessary for tools to trace the deviation of the element through the
      derived and related profiles. When the element definition is not the
      original definition of an element - i.g. either in a constraint on another
      type, or for elements from a super type in a snap shot - then the
      information in provided in the element definition may be different to the
      base definition. On the original definition of the element, it will be
      same.
  contentReference:
    $ref: ./fhiruri.yml
    nullable: true
    description: >-
      Identifies an element defined elsewhere in the definition whose content
      rules should be applied to the current element. ContentReferences bring
      across all the rules that are in the ElementDefinition for the element,
      including definitions, cardinality constraints, bindings, invariants etc.
  type:
    type: array
    items:
      $ref: ./fhirElementDefinitionType.yml
    nullable: true
    description: >-
      The data type or resource that the value of this element is permitted to
      be.
  defaultValueBase64Binary:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueBoolean:
    type: boolean
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueCanonical:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueCode:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueDate:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueDateTime:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueDecimal:
    type: number
    format: double
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueId:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueInstant:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueInteger:
    type: number
    format: double
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueMarkdown:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueOid:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValuePositiveInt:
    type: number
    format: double
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueString:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueTime:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueUnsignedInt:
    type: number
    format: double
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueUri:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueUrl:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueUuid:
    type: string
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueAddress:
    $ref: ./fhirAddress.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueAge:
    $ref: ./fhirAge.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueAnnotation:
    $ref: ./fhirAnnotation.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueAttachment:
    $ref: ./fhirAttachment.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueCodeableConcept:
    $ref: ./fhirCodeableConcept.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueCoding:
    $ref: ./fhirCoding.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueContactPoint:
    $ref: ./fhirContactPoint.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueCount:
    $ref: ./fhirCount.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueDistance:
    $ref: ./fhirDistance.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueDuration:
    $ref: ./fhirDuration.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueHumanName:
    $ref: ./fhirHumanName.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueIdentifier:
    $ref: ./fhirIdentifier.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueMoney:
    $ref: ./fhirMoney.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValuePeriod:
    $ref: ./fhirPeriod.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueQuantity:
    $ref: ./fhirQuantity.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueRange:
    $ref: ./fhirRange.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueRatio:
    $ref: ./fhirRatio.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueReference:
    $ref: ./fhirReference.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueSampledData:
    $ref: ./fhirSampledData.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueSignature:
    $ref: ./fhirSignature.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueTiming:
    $ref: ./fhirTiming.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueContactDetail:
    $ref: ./fhirContactDetail.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueContributor:
    $ref: ./fhirContributor.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueDataRequirement:
    $ref: ./fhirDataRequirement.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueExpression:
    $ref: ./fhirExpression.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueParameterDefinition:
    $ref: ./fhirParameterDefinition.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueRelatedArtifact:
    $ref: ./fhirRelatedArtifact.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueTriggerDefinition:
    $ref: ./fhirTriggerDefinition.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueUsageContext:
    $ref: ./fhirUsageContext.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueDosage:
    $ref: ./fhirDosage.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  defaultValueMeta:
    $ref: ./fhirMeta.yml
    nullable: true
    description: >-
      The value that should be used if there is no value stated in the instance
      (e.g. 'if not otherwise specified, the abstract is false').
  meaningWhenMissing:
    $ref: ./fhirmarkdown.yml
    nullable: true
    description: >-
      The Implicit meaning that is to be understood when this element is missing
      (e.g. 'when this element is missing, the period is ongoing').
  orderMeaning:
    type: string
    nullable: true
    description: >-
      If present, indicates that the order of the repeating element has meaning
      and describes what that meaning is. If absent, it means that the order of
      the element has no meaning.
  fixedBase64Binary:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedBoolean:
    type: boolean
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedCanonical:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedCode:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedDate:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedDateTime:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedDecimal:
    type: number
    format: double
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedId:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedInstant:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedInteger:
    type: number
    format: double
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedMarkdown:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedOid:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedPositiveInt:
    type: number
    format: double
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedString:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedTime:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedUnsignedInt:
    type: number
    format: double
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedUri:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedUrl:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedUuid:
    type: string
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedAddress:
    $ref: ./fhirAddress.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedAge:
    $ref: ./fhirAge.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedAnnotation:
    $ref: ./fhirAnnotation.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedAttachment:
    $ref: ./fhirAttachment.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedCodeableConcept:
    $ref: ./fhirCodeableConcept.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedCoding:
    $ref: ./fhirCoding.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedContactPoint:
    $ref: ./fhirContactPoint.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedCount:
    $ref: ./fhirCount.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedDistance:
    $ref: ./fhirDistance.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedDuration:
    $ref: ./fhirDuration.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedHumanName:
    $ref: ./fhirHumanName.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedIdentifier:
    $ref: ./fhirIdentifier.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedMoney:
    $ref: ./fhirMoney.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedPeriod:
    $ref: ./fhirPeriod.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedQuantity:
    $ref: ./fhirQuantity.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedRange:
    $ref: ./fhirRange.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedRatio:
    $ref: ./fhirRatio.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedReference:
    $ref: ./fhirReference.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedSampledData:
    $ref: ./fhirSampledData.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedSignature:
    $ref: ./fhirSignature.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedTiming:
    $ref: ./fhirTiming.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedContactDetail:
    $ref: ./fhirContactDetail.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedContributor:
    $ref: ./fhirContributor.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedDataRequirement:
    $ref: ./fhirDataRequirement.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedExpression:
    $ref: ./fhirExpression.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedParameterDefinition:
    $ref: ./fhirParameterDefinition.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedRelatedArtifact:
    $ref: ./fhirRelatedArtifact.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedTriggerDefinition:
    $ref: ./fhirTriggerDefinition.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedUsageContext:
    $ref: ./fhirUsageContext.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedDosage:
    $ref: ./fhirDosage.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  fixedMeta:
    $ref: ./fhirMeta.yml
    nullable: true
    description: >-
      Specifies a value that SHALL be exactly the value for this element in the
      instance. For purposes of comparison, non-significant whitespace is
      ignored, and all values must be an exact match (case and accent
      sensitive). Missing elements/attributes must also be missing.
  patternBase64Binary:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternBoolean:
    type: boolean
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternCanonical:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternCode:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternDate:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternDateTime:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternDecimal:
    type: number
    format: double
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternId:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternInstant:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternInteger:
    type: number
    format: double
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternMarkdown:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternOid:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternPositiveInt:
    type: number
    format: double
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternString:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternTime:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternUnsignedInt:
    type: number
    format: double
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternUri:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternUrl:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternUuid:
    type: string
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternAddress:
    $ref: ./fhirAddress.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternAge:
    $ref: ./fhirAge.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternAnnotation:
    $ref: ./fhirAnnotation.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternAttachment:
    $ref: ./fhirAttachment.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternCodeableConcept:
    $ref: ./fhirCodeableConcept.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternCoding:
    $ref: ./fhirCoding.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternContactPoint:
    $ref: ./fhirContactPoint.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternCount:
    $ref: ./fhirCount.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternDistance:
    $ref: ./fhirDistance.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternDuration:
    $ref: ./fhirDuration.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternHumanName:
    $ref: ./fhirHumanName.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternIdentifier:
    $ref: ./fhirIdentifier.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternMoney:
    $ref: ./fhirMoney.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternPeriod:
    $ref: ./fhirPeriod.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternQuantity:
    $ref: ./fhirQuantity.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternRange:
    $ref: ./fhirRange.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternRatio:
    $ref: ./fhirRatio.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternReference:
    $ref: ./fhirReference.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternSampledData:
    $ref: ./fhirSampledData.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternSignature:
    $ref: ./fhirSignature.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternTiming:
    $ref: ./fhirTiming.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternContactDetail:
    $ref: ./fhirContactDetail.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternContributor:
    $ref: ./fhirContributor.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternDataRequirement:
    $ref: ./fhirDataRequirement.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternExpression:
    $ref: ./fhirExpression.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternParameterDefinition:
    $ref: ./fhirParameterDefinition.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternRelatedArtifact:
    $ref: ./fhirRelatedArtifact.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternTriggerDefinition:
    $ref: ./fhirTriggerDefinition.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternUsageContext:
    $ref: ./fhirUsageContext.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternDosage:
    $ref: ./fhirDosage.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  patternMeta:
    $ref: ./fhirMeta.yml
    nullable: true
    description: >-
      Specifies a value that the value in the instance SHALL follow - that is,
      any value in the pattern must be found in the instance. Other additional
      values may be found too. This is effectively constraint by example. When
      pattern[x] is used to constrain a primitive, it means that the value
      provided in the pattern[x] must match the instance value exactly. When
      pattern[x] is used to constrain an array, it means that each element
      provided in the pattern[x] array must (recursively) match at least one
      element from the instance array. When pattern[x] is used to constrain a
      complex object, it means that each property in the pattern must be present
      in the complex object, and its value must recursively match -- i.e., 1. If
      primitive: it must match exactly the pattern value 2. If a complex object:
      it must match (recursively) the pattern value 3. If an array: it must
      match (recursively) the pattern value.
  example:
    type: array
    items:
      $ref: ./fhirElementDefinitionExample.yml
    nullable: true
    description: >-
      A sample value for this element demonstrating the type of information that
      would typically be found in the element.
  minValueDate:
    type: string
    nullable: true
    description: >-
      The minimum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  minValueDateTime:
    type: string
    nullable: true
    description: >-
      The minimum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  minValueInstant:
    type: string
    nullable: true
    description: >-
      The minimum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  minValueTime:
    type: string
    nullable: true
    description: >-
      The minimum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  minValueDecimal:
    type: number
    format: double
    nullable: true
    description: >-
      The minimum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  minValueInteger:
    type: number
    format: double
    nullable: true
    description: >-
      The minimum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  minValuePositiveInt:
    type: number
    format: double
    nullable: true
    description: >-
      The minimum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  minValueUnsignedInt:
    type: number
    format: double
    nullable: true
    description: >-
      The minimum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  minValueQuantity:
    $ref: ./fhirQuantity.yml
    nullable: true
    description: >-
      The minimum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxValueDate:
    type: string
    nullable: true
    description: >-
      The maximum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxValueDateTime:
    type: string
    nullable: true
    description: >-
      The maximum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxValueInstant:
    type: string
    nullable: true
    description: >-
      The maximum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxValueTime:
    type: string
    nullable: true
    description: >-
      The maximum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxValueDecimal:
    type: number
    format: double
    nullable: true
    description: >-
      The maximum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxValueInteger:
    type: number
    format: double
    nullable: true
    description: >-
      The maximum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxValuePositiveInt:
    type: number
    format: double
    nullable: true
    description: >-
      The maximum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxValueUnsignedInt:
    type: number
    format: double
    nullable: true
    description: >-
      The maximum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxValueQuantity:
    $ref: ./fhirQuantity.yml
    nullable: true
    description: >-
      The maximum allowed value for the element. The value is inclusive. This is
      allowed for the types date, dateTime, instant, time, decimal, integer, and
      Quantity.
  maxLength:
    type: integer
    nullable: true
    description: >-
      Indicates the maximum length in characters that is permitted to be present
      in conformant instances and which is expected to be supported by
      conformant consumers that support the element.
  condition:
    type: array
    items:
      $ref: ./fhirid.yml
    nullable: true
    description: >-
      A reference to an invariant that may make additional statements about the
      cardinality or value in the instance.
  constraint:
    type: array
    items:
      $ref: ./fhirElementDefinitionConstraint.yml
    nullable: true
    description: >-
      Formal constraints such as co-occurrence and other constraints that can be
      computationally evaluated within the context of the instance.
  mustSupport:
    type: boolean
    nullable: true
    description: >-
      If true, implementations that produce or consume resources SHALL provide
      "support" for the element in some meaningful way. If false, the element
      may be ignored and not supported. If false, whether to populate or use the
      data element in any way is at the discretion of the implementation.
  isModifier:
    type: boolean
    nullable: true
    description: >-
      If true, the value of this element affects the interpretation of the
      element or resource that contains it, and the value of the element cannot
      be ignored. Typically, this is used for status, negation and qualification
      codes. The effect of this is that the element cannot be ignored by
      systems: they SHALL either recognize the element and process it, and/or a
      pre-determination has been made that it is not relevant to their
      particular system.
  isModifierReason:
    type: string
    nullable: true
    description: >-
      Explains how that element affects the interpretation of the resource or
      element that contains it.
  isSummary:
    type: boolean
    nullable: true
    description: >-
      Whether the element should be included if a client requests a search with
      the parameter \_summary=true.
  binding:
    $ref: ./fhirElementDefinitionBinding.yml
    nullable: true
    description: >-
      Binds to a value set if this element is coded (code, Coding,
      CodeableConcept, Quantity), or the data types (string, uri).
  mapping:
    type: array
    items:
      $ref: ./fhirElementDefinitionMapping.yml
    nullable: true
    description: >-
      Identifies a concept from an external specification that roughly
      corresponds to this element.
