name: Deploy - PRODUCTION

permissions:
  contents: read

on:
  push: # a commit to the specified branches, if any
    branches:
      - master
    paths:
      - "packages/shared/**"
      - "packages/api/**"
      - "packages/api-sdk/**"
      - "packages/commonwell-sdk/**"
      - "packages/core/**"
      - "packages/fhir-converter/**"
      - "packages/ihe-gateway-sdk/**"
      - "packages/carequality-sdk/**"
      - "packages/infra/**"
      - "packages/lambdas/**"
      - "packages/terminology/**"
      - "packages/mllp-server/**"
  workflow_dispatch: # manually executed by a user

jobs:
  files-changed:
    name: detect changes
    runs-on: ubuntu-latest
    timeout-minutes: 3
    # Map a step output to a job output
    outputs:
      api: ${{ steps.changes.outputs.api }}
      mllp-server: ${{ steps.changes.outputs.mllp-server }}
      fhir-converter: ${{ steps.changes.outputs.fhir-converter }}
      terminology: ${{ steps.changes.outputs.terminology }}
      infra-lambdas: ${{ steps.changes.outputs.infra-lambdas }}
      secrets: ${{ steps.changes.outputs.secrets }}
      location_services: ${{ steps.changes.outputs.location_services }}
      infra-hl7-notification: ${{ steps.changes.outputs.infra-hl7-notification }}
      analytics-platform: ${{ steps.changes.outputs.analytics-platform }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect Changes
        uses: dorny/paths-filter@4067d885736b84de7c414f582ac45897079b0a78 # v2
        id: changes
        with:
          base: "master"
          filters: |
            api:
              - "packages/api/**"
              - "packages/api-sdk/**"
              - "packages/commonwell-sdk/**"
              - "packages/ihe-gateway-sdk/**"
              - "packages/infra/**"
              - "packages/core/**"
              - "packages/shared/**"
              - "package*.json"
            mllp-server:
              - "packages/shared/**"
              - "packages/core/**"
              - "packages/mllp-server/**"
              - "packages/infra/lib/hl7-notification-stack/**"
              - "packages/infra/bin/infrastructure.ts"
              - "package*.json"
            fhir-converter:
              # Doing them individually because there are other stuff there that we don't want to trigger a deploy b/c of that
              - "packages/fhir-converter/Dockerfile"
              - "packages/fhir-converter/docker-entrypoint.sh"
              - "packages/fhir-converter/package*.json"
              - "packages/fhir-converter/mocha-config.json"
              - "packages/fhir-converter/src/**"
              - "packages/fhir-converter/test/**"
              - "packages/fhir-converter/deploy/**"
              - "packages/infra/**"
            terminology:
              - "packages/terminology/Dockerfile"
              - "packages/terminology/package*.json"
              - "packages/terminology/src/**"
              - "packages/infra/**"
            infra-lambdas:
              - "packages/shared/**"
              - "packages/core/**"
              - "packages/infra/**"
              - "packages/lambdas/**"
              - "package*.json"
            secrets:
              - "packages/infra/**"
              - "package*.json"
            location_services:
              - "packages/infra/lib/location-services*"
              - "packages/infra/shared/**"
              - "packages/infra/package*.json"
              - "package*.json"
            infra-hl7-notification:
              - "packages/infra/lib/hl7-notification-stack/**"
              - "packages/infra/bin/infrastructure.ts"
              - "package*.json"
            analytics-platform:
              - "packages/data-transformation/**"
              - "package*.json"

  api-prod:
    if: needs.files-changed.outputs.api == 'true'
    needs: files-changed
    uses: ./.github/workflows/_deploy-api.yml
    with:
      deploy_env: "production"
      ECR_REPO_URI: ${{ vars.ECR_REPO_URI_PRODUCTION }}
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER_PRODUCTION }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE_PRODUCTION }}
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  api-sandbox:
    uses: ./.github/workflows/_deploy-api.yml
    needs: [api-prod]
    if: ${{ !failure() && needs.api-prod.result == 'success' }}
    with:
      deploy_env: "sandbox"
      ECR_REPO_URI: ${{ vars.ECR_REPO_URI_SANDBOX }}
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER_SANDBOX }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE_SANDBOX }}
      AWS_REGION: ${{ vars.API_REGION_SANDBOX }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  mllp-server:
    if: needs.files-changed.outputs.mllp-server == 'true'
    needs: files-changed
    uses: ./.github/workflows/_deploy-mllp-server.yml
    with:
      deploy_env: "production"
      ECR_REPO_URI: ${{ vars.ECR_REPO_URI_MLLP_SERVER_PRODUCTION }}
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER_MLLP_SERVER_PRODUCTION }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE_MLLP_SERVER_PRODUCTION }}
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  analytics-platform:
    if: needs.files-changed.outputs.analytics-platform == 'true'
    needs: files-changed
    uses: ./.github/workflows/_deploy-analytics-platform.yml
    with:
      deploy_env: "production"
      ECR_REPO_URI: ${{ vars.ECR_REPO_URI_ANALYTICS_PLATFORM_PRODUCTION }}
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  infra-hl7-notification:
    if: needs.files-changed.outputs.infra-hl7-notification == 'true'
    uses: ./.github/workflows/_deploy-hl7-notification-cdk.yml
    needs: files-changed
    with:
      deploy_env: "production"
      secrets_cdk_stack: ${{ vars.SECRET_STACK_NAME_PRODUCTION }}
      hl7_notification_stack: ${{ vars.HL7_NOTIFICATION_STACK_NAME_PRODUCTION }}
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
    secrets:
      SERVICE_PAT: ${{ secrets.SERVICE_PAT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  infra-api-lambdas:
    uses: ./.github/workflows/_deploy-cdk.yml
    if: ${{ needs.files-changed.outputs.infra-lambdas == 'true' || needs.files-changed.outputs.fhir-converter == 'true' || needs.files-changed.outputs.terminology == 'true' }}
    needs: files-changed
    with:
      deploy_env: "production"
      cdk_stack: ${{ vars.API_STACK_NAME_PRODUCTION }}
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
    secrets:
      SERVICE_PAT: ${{ secrets.SERVICE_PAT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  infra-api-lambdas-sandbox:
    uses: ./.github/workflows/_deploy-cdk.yml
    needs: [infra-api-lambdas]
    if: ${{ !failure() && needs.infra-api-lambdas.result == 'success' }}
    with:
      deploy_env: "sandbox"
      cdk_stack: ${{ vars.API_STACK_NAME_SANDBOX }}
      AWS_REGION: ${{ vars.API_REGION_SANDBOX  }}
    secrets:
      SERVICE_PAT: ${{ secrets.SERVICE_PAT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  secrets_cdk_stack_prod:
    uses: ./.github/workflows/_deploy-cdk.yml
    needs: files-changed
    if: needs.files-changed.outputs.secrets == 'true'
    with:
      deploy_env: "production"
      cdk_stack: ${{ vars.SECRET_STACK_NAME_PRODUCTION }}
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
    secrets:
      SERVICE_PAT: ${{ secrets.SERVICE_PAT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  secrets_cdk_stack_sandbox:
    uses: ./.github/workflows/_deploy-cdk.yml
    needs: [secrets_cdk_stack_prod]
    if: ${{ !failure() && needs.secrets_cdk_stack_prod.result == 'success' }}
    with:
      deploy_env: "sandbox"
      cdk_stack: ${{ vars.SECRET_STACK_NAME_SANDBOX }}
      AWS_REGION: ${{ vars.API_REGION_SANDBOX }}
    secrets:
      SERVICE_PAT: ${{ secrets.SERVICE_PAT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  location_services_cdk_stack:
    uses: ./.github/workflows/_deploy-cdk.yml
    needs: files-changed
    if: needs.files-changed.outputs.location_services == 'true'
    with:
      deploy_env: "production"
      cdk_stack: ${{ vars.LOCATION_SERVICES_STACK_NAME_PRODUCTION }}
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
    secrets:
      SERVICE_PAT: ${{ secrets.SERVICE_PAT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  ihe_stack:
    uses: ./.github/workflows/_deploy-cdk.yml
    needs: files-changed
    if: ${{ needs.files-changed.outputs.infra-lambdas == 'true' }}
    with:
      deploy_env: "production"
      cdk_stack: ${{ vars.IHE_STACK_NAME }}
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
    secrets:
      SERVICE_PAT: ${{ secrets.SERVICE_PAT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  redeploy-api-gw-prod:
    uses: ./.github/workflows/_redeploy_api-gw.yml
    needs: [infra-api-lambdas]
    with:
      deploy_env: "production"
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
      API_GW_ID: ${{ vars.API_GW_ID_PRODUCTION }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  redeploy-api-gw-sandbox:
    uses: ./.github/workflows/_redeploy_api-gw.yml
    needs: [infra-api-lambdas-sandbox]
    with:
      deploy_env: "sandbox"
      AWS_REGION: ${{ vars.API_REGION_SANDBOX }}
      API_GW_ID: ${{ vars.API_GW_ID_SANDBOX }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  e2e-tests:
    uses: ./.github/workflows/_e2e-tests.yml
    needs: [api-prod, infra-api-lambdas, redeploy-api-gw-prod]
    # run even if one of the dependencies didn't
    # can't use ${{ ! failure() && success() }} because `success()` "Returns true when none of the previous steps have failed or been canceled."
    # can't use ${{ ! failure() && contains(needs.*.result, 'success') }} because if anything that came before succeeded, even if not a direct dependency, it will run
    if: ${{ !failure() && (needs.api-prod.result == 'success' || needs.infra-api-lambdas.result == 'success' || needs.redeploy-api-gw-prod.result == 'success') }}
    with:
      deploy_env: "production"
      api_url: ${{ vars.API_URL_PRODUCTION }}
      fhir_url: ${{ vars.FHIR_SERVER_URL_PRODUCTION }}
      CONVERSION_RESULT_BUCKET_NAME: ${{ vars.CONVERSION_RESULT_BUCKET_NAME_PRODUCTION }}
      MEDICAL_DOCUMENTS_BUCKET_NAME: ${{ vars.MEDICAL_DOCUMENTS_BUCKET_NAME_PRODUCTION }}
      AWS_REGION: ${{ vars.API_REGION_PRODUCTION }}
      CQ_API_MODE: ${{ vars.CQ_API_MODE_PRODUCTION }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TEST_API_KEY: ${{ secrets.TEST_API_KEY_PRODUCTION }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      CQ_MANAGEMENT_API_KEY: ${{ secrets.CQ_MANAGEMENT_API_KEY_PRODUCTION }}
      CQ_TEST_ORG_OID: ${{ secrets.CQ_TEST_ORG_OID_PRODUCTION }}
